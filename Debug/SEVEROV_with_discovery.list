
SEVEROV_with_discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6f8  0800c6f8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800c6f8  0800c6f8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c6f8  0800c6f8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6f8  0800c6f8  0001c6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6fc  0800c6fc  0001c6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001698  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001818  20001818  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fac0  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004153  00000000  00000000  0003fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00043dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a0  00000000  00000000  00045720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e6a  00000000  00000000  00046ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024400  00000000  00000000  0004cd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90cc  00000000  00000000  0007112a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a1f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bfc  00000000  00000000  0013a248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c660 	.word	0x0800c660

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800c660 	.word	0x0800c660

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <Thruster_Set_Speed>:
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
	HAL_Delay(4000);
}

void Thruster_Set_Speed(int *speed)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed[2]);//3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3308      	adds	r3, #8
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <Thruster_Set_Speed+0x74>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed[0]);//1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <Thruster_Set_Speed+0x74>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed[6]);//7
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3318      	adds	r3, #24
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <Thruster_Set_Speed+0x74>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed[7]);//8
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	331c      	adds	r3, #28
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <Thruster_Set_Speed+0x74>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed[1]);//2
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3304      	adds	r3, #4
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <Thruster_Set_Speed+0x78>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed[3]);//4
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	330c      	adds	r3, #12
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <Thruster_Set_Speed+0x78>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed[4]);//5
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3310      	adds	r3, #16
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <Thruster_Set_Speed+0x78>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed[5]);//6
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3314      	adds	r3, #20
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <Thruster_Set_Speed+0x78>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000034c 	.word	0x2000034c
 8000a2c:	20000398 	.word	0x20000398

08000a30 <Thruster_Set_Perc>:

void Thruster_Set_Perc(int *speed)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	int sec_speed[8];
	for(int i = 0;i<8;i++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a3c:	e03c      	b.n	8000ab8 <Thruster_Set_Perc+0x88>
	{
		if((speed[i]<100)&&(speed[i]>-100))
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b63      	cmp	r3, #99	; 0x63
 8000a4a:	dc2b      	bgt.n	8000aa4 <Thruster_Set_Perc+0x74>
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000a5a:	db23      	blt.n	8000aa4 <Thruster_Set_Perc+0x74>
			sec_speed[i] = speed[i]*kpercsec+150;
 8000a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd00 	bl	800046c <__aeabi_i2d>
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <Thruster_Set_Perc+0xb0>)
 8000a72:	f7ff fd65 	bl	8000540 <__aeabi_dmul>
 8000a76:	4602      	mov	r2, r0
 8000a78:	460b      	mov	r3, r1
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	a316      	add	r3, pc, #88	; (adr r3, 8000ad8 <Thruster_Set_Perc+0xa8>)
 8000a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a84:	f7ff fba6 	bl	80001d4 <__adddf3>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff ff68 	bl	8000964 <__aeabi_d2iz>
 8000a94:	4602      	mov	r2, r0
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	3330      	adds	r3, #48	; 0x30
 8000a9c:	443b      	add	r3, r7
 8000a9e:	f843 2c24 	str.w	r2, [r3, #-36]
 8000aa2:	e006      	b.n	8000ab2 <Thruster_Set_Perc+0x82>
		else
			sec_speed[i] = 150;
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	3330      	adds	r3, #48	; 0x30
 8000aaa:	443b      	add	r3, r7
 8000aac:	2296      	movs	r2, #150	; 0x96
 8000aae:	f843 2c24 	str.w	r2, [r3, #-36]
	for(int i = 0;i<8;i++)
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	ddbf      	ble.n	8000a3e <Thruster_Set_Perc+0xe>
	}
	sec_speed[4] = 200;
 8000abe:	23c8      	movs	r3, #200	; 0xc8
 8000ac0:	61fb      	str	r3, [r7, #28]

	Thruster_Set_Speed(sec_speed);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff74 	bl	80009b4 <Thruster_Set_Speed>

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	f3af 8000 	nop.w
 8000ad8:	00000000 	.word	0x00000000
 8000adc:	4062c000 	.word	0x4062c000
 8000ae0:	3fe00000 	.word	0x3fe00000

08000ae4 <calculate_crc>:
#include "crc.h"

uint16_t calculate_crc(unsigned char *data_ptr, unsigned short size)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
    uint16_t wcrc=0xFFFF;// preset 16 position crc register , The initial values are all 1
 8000af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af4:	82fb      	strh	r3, [r7, #22]
    uint8_t temp;// Define intermediate variables
    int i=0,j=0;// Define count
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
    for(i=0;i<size;i++)// Cycle through each data
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	e028      	b.n	8000b56 <calculate_crc+0x72>
    {

       temp=data_ptr[i];
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	72fb      	strb	r3, [r7, #11]
       wcrc^=temp;
 8000b0e:	7afb      	ldrb	r3, [r7, #11]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	8afb      	ldrh	r3, [r7, #22]
 8000b14:	4053      	eors	r3, r2
 8000b16:	82fb      	strh	r3, [r7, #22]
       for(j=0;j<8;j++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	e015      	b.n	8000b4a <calculate_crc+0x66>

          // Judge whether what is moved to the right is 1, If it is 1 XOR with polynomials .
          if(wcrc&0x0001){
 8000b1e:	8afb      	ldrh	r3, [r7, #22]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00a      	beq.n	8000b3e <calculate_crc+0x5a>

              wcrc>>=1;// First move the data one bit to the right
 8000b28:	8afb      	ldrh	r3, [r7, #22]
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	82fb      	strh	r3, [r7, #22]
              wcrc^=0xA001;// XOR with the polynomial above
 8000b2e:	8afb      	ldrh	r3, [r7, #22]
 8000b30:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000b34:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	82fb      	strh	r3, [r7, #22]
 8000b3c:	e002      	b.n	8000b44 <calculate_crc+0x60>
          }
          else// If not 1, Then directly remove
              wcrc>>=1;// Direct removal
 8000b3e:	8afb      	ldrh	r3, [r7, #22]
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	82fb      	strh	r3, [r7, #22]
       for(j=0;j<8;j++){
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	dde6      	ble.n	8000b1e <calculate_crc+0x3a>
    for(i=0;i<size;i++)// Cycle through each data
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	3301      	adds	r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbd2      	blt.n	8000b04 <calculate_crc+0x20>
       }
    }
    temp=wcrc;//crc Value
 8000b5e:	8afb      	ldrh	r3, [r7, #22]
 8000b60:	72fb      	strb	r3, [r7, #11]
    return wcrc;
 8000b62:	8afb      	ldrh	r3, [r7, #22]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	371c      	adds	r7, #28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <check_crc>:

uint8_t check_crc(unsigned char *data_ptr, unsigned short size){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
    unsigned char crc_low = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
    unsigned char crc_high = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73bb      	strb	r3, [r7, #14]
	uint16_t crc16bit = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	81bb      	strh	r3, [r7, #12]
	crc16bit = calculate_crc(data_ptr,size-2);
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	3b02      	subs	r3, #2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffa7 	bl	8000ae4 <calculate_crc>
 8000b96:	4603      	mov	r3, r0
 8000b98:	81bb      	strh	r3, [r7, #12]
	crc_low = (crc16bit & 0x00FF);
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	73fb      	strb	r3, [r7, #15]
	crc_high = (crc16bit>>8) & 0x00FF;
 8000b9e:	89bb      	ldrh	r3, [r7, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	73bb      	strb	r3, [r7, #14]
	unsigned char tmp1= data_ptr[size-1];
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	72fb      	strb	r3, [r7, #11]
	unsigned char tmp2= data_ptr[size-2];
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	3b02      	subs	r3, #2
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	72bb      	strb	r3, [r7, #10]
	if(data_ptr[size-1]==crc_high && data_ptr[size-2]==crc_low){
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	7bba      	ldrb	r2, [r7, #14]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d109      	bne.n	8000be2 <check_crc+0x72>
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	3b02      	subs	r3, #2
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d101      	bne.n	8000be2 <check_crc+0x72>
		return 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <check_crc+0x74>
	}
	else
		return 0;
 8000be2:	2300      	movs	r3, #0

}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f001 fa60 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f8f8 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 fd42 	bl	8001680 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bfc:	f000 f9d4 	bl	8000fa8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c00:	f000 fa52 	bl	80010a8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000c04:	f000 fa10 	bl	8001028 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000c08:	f000 fc94 	bl	8001534 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c0c:	f000 fcc2 	bl	8001594 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c10:	f000 fac6 	bl	80011a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c14:	f000 fb42 	bl	800129c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000c18:	f000 fbbe 	bl	8001398 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000c1c:	f000 fcea 	bl	80015f4 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8000c20:	f000 fa80 	bl	8001124 <MX_SPI3_Init>
  MX_UART5_Init();
 8000c24:	f000 fc56 	bl	80014d4 <MX_UART5_Init>
  MX_ADC3_Init();
 8000c28:	f000 f94e 	bl	8000ec8 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000c2c:	f00b f80a 	bl	800bc44 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_SET); //индикация о начале работы программы
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c36:	4864      	ldr	r0, [pc, #400]	; (8000dc8 <main+0x1dc>)
 8000c38:	f002 fb76 	bl	8003328 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET); //включаем силовое питание
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	4862      	ldr	r0, [pc, #392]	; (8000dcc <main+0x1e0>)
 8000c44:	f002 fb70 	bl	8003328 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4861      	ldr	r0, [pc, #388]	; (8000dd0 <main+0x1e4>)
 8000c4c:	f005 febc 	bl	80069c8 <HAL_TIM_PWM_Start_IT>
		HAL_Delay(500);
 8000c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c54:	f001 fa94 	bl	8002180 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200);//7
 8000c58:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <main+0x1e4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	22c8      	movs	r2, #200	; 0xc8
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(5000);
 8000c60:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c64:	f001 fa8c 	bl	8002180 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);//7
 8000c68:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <main+0x1e4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	220a      	movs	r2, #10
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(5000);
 8000c70:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c74:	f001 fa84 	bl	8002180 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);//7
 8000c78:	4b55      	ldr	r3, [pc, #340]	; (8000dd0 <main+0x1e4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2264      	movs	r2, #100	; 0x64
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(5000);
 8000c80:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c84:	f001 fa7c 	bl	8002180 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);//7
 8000c88:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <main+0x1e4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2296      	movs	r2, #150	; 0x96
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c
		  if(rxFlag){
 8000c90:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <main+0x1e8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0d7      	beq.n	8000c48 <main+0x5c>
			  rxFlag = 0;
 8000c98:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <main+0x1e8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
			  if(check_crc(bufferRx, MAX_SIZE)){ //если crc совпало
 8000c9e:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <main+0x1ec>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	484d      	ldr	r0, [pc, #308]	; (8000ddc <main+0x1f0>)
 8000ca8:	f7ff ff62 	bl	8000b70 <check_crc>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8083 	beq.w	8000dba <main+0x1ce>
				  HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_SET); //индикация о приеме
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cba:	4843      	ldr	r0, [pc, #268]	; (8000dc8 <main+0x1dc>)
 8000cbc:	f002 fb34 	bl	8003328 <HAL_GPIO_WritePin>

				  data[0] =  (bufferRx[3] << 8) | (bufferRx[2] & 0xff);
 8000cc0:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <main+0x1f0>)
 8000cc2:	78db      	ldrb	r3, [r3, #3]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <main+0x1f0>)
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <main+0x1f4>)
 8000cd6:	801a      	strh	r2, [r3, #0]
				  data[1] =  (bufferRx[5] << 8) | (bufferRx[4] & 0xff);
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <main+0x1f0>)
 8000cda:	795b      	ldrb	r3, [r3, #5]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <main+0x1f0>)
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <main+0x1f4>)
 8000cee:	805a      	strh	r2, [r3, #2]
				  data[2] =  (bufferRx[7] << 8) | (bufferRx[6] & 0xff);
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <main+0x1f0>)
 8000cf2:	79db      	ldrb	r3, [r3, #7]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <main+0x1f0>)
 8000cfa:	799b      	ldrb	r3, [r3, #6]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <main+0x1f4>)
 8000d06:	809a      	strh	r2, [r3, #4]
				  data[3] =  (bufferRx[9] << 8) | (bufferRx[8] & 0xff);
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <main+0x1f0>)
 8000d0a:	7a5b      	ldrb	r3, [r3, #9]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <main+0x1f0>)
 8000d12:	7a1b      	ldrb	r3, [r3, #8]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <main+0x1f4>)
 8000d1e:	80da      	strh	r2, [r3, #6]
				  data[4] =  (bufferRx[11] << 8) | (bufferRx[10] & 0xff);
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <main+0x1f0>)
 8000d22:	7adb      	ldrb	r3, [r3, #11]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <main+0x1f0>)
 8000d2a:	7a9b      	ldrb	r3, [r3, #10]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <main+0x1f4>)
 8000d36:	811a      	strh	r2, [r3, #8]
				  data[5] =  (bufferRx[13] << 8) | (bufferRx[12] & 0xff);
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <main+0x1f0>)
 8000d3a:	7b5b      	ldrb	r3, [r3, #13]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <main+0x1f0>)
 8000d42:	7b1b      	ldrb	r3, [r3, #12]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <main+0x1f4>)
 8000d4e:	815a      	strh	r2, [r3, #10]
				  data[6] =  (bufferRx[15] << 8) | (bufferRx[14] & 0xff);
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <main+0x1f0>)
 8000d52:	7bdb      	ldrb	r3, [r3, #15]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <main+0x1f0>)
 8000d5a:	7b9b      	ldrb	r3, [r3, #14]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <main+0x1f4>)
 8000d66:	819a      	strh	r2, [r3, #12]
				  data[7] =  (bufferRx[17] << 8) | (bufferRx[16] & 0xff);
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <main+0x1f0>)
 8000d6a:	7c5b      	ldrb	r3, [r3, #17]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <main+0x1f0>)
 8000d72:	7c1b      	ldrb	r3, [r3, #16]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <main+0x1f4>)
 8000d7e:	81da      	strh	r2, [r3, #14]
				  flags = (bufferRx[19] << 8) | (bufferRx[18] & 0xff);
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <main+0x1f0>)
 8000d82:	7cdb      	ldrb	r3, [r3, #19]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <main+0x1f0>)
 8000d8a:	7c9b      	ldrb	r3, [r3, #18]
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <main+0x1f8>)
 8000d96:	801a      	strh	r2, [r3, #0]

				  Thruster_Set_Perc(data); //записываем ширину импульса Ш�?Ма
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <main+0x1f4>)
 8000d9a:	f7ff fe49 	bl	8000a30 <Thruster_Set_Perc>

				  if(flags & (1 << 7)){  //если 7 бит выствлен
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <main+0x1f8>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f43f af4e 	beq.w	8000c48 <main+0x5c>
						HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);//выключаем силовое питание
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <main+0x1e0>)
 8000db4:	f002 fab8 	bl	8003328 <HAL_GPIO_WritePin>
 8000db8:	e746      	b.n	8000c48 <main+0x5c>
					}
			  }
			  else{
				  HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET); //индикация о ошибке приема
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc0:	4801      	ldr	r0, [pc, #4]	; (8000dc8 <main+0x1dc>)
 8000dc2:	f002 fab1 	bl	8003328 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000dc6:	e73f      	b.n	8000c48 <main+0x5c>
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	2000034c 	.word	0x2000034c
 8000dd4:	20001108 	.word	0x20001108
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000640 	.word	0x20000640
 8000de0:	20000658 	.word	0x20000658
 8000de4:	20000668 	.word	0x20000668

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09e      	sub	sp, #120	; 0x78
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00b fc2a 	bl	800c650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	223c      	movs	r2, #60	; 0x3c
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00b fc1c 	bl	800c650 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e36:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e3c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 f89a 	bl	8004f7c <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e4e:	f000 fd11 	bl	8001874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 f8c2 	bl	8005ff8 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e7a:	f000 fcfb 	bl	8001874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <SystemClock_Config+0xdc>)
 8000e80:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ea0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fad9 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000eb8:	f000 fcdc 	bl	8001874 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3778      	adds	r7, #120	; 0x78
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	00022177 	.word	0x00022177

08000ec8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000eec:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <MX_ADC3_Init+0xdc>)
 8000eee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f44:	f001 f940 	bl	80021c8 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000f4e:	f000 fc91 	bl	8001874 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f5e:	f001 fdff 	bl	8002b60 <HAL_ADCEx_MultiModeConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000f68:	f000 fc84 	bl	8001874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_ADC3_Init+0xd8>)
 8000f8a:	f001 fafd 	bl	8002588 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000f94:	f000 fc6e 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000019c 	.word	0x2000019c
 8000fa4:	50000400 	.word	0x50000400

08000fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_I2C1_Init+0x74>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <MX_I2C1_Init+0x78>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_I2C1_Init+0x74>)
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <MX_I2C1_Init+0x7c>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_I2C1_Init+0x74>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_I2C1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <MX_I2C1_Init+0x74>)
 8000fe4:	f002 f9b8 	bl	8003358 <HAL_I2C_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fee:	f000 fc41 	bl	8001874 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <MX_I2C1_Init+0x74>)
 8000ff6:	f002 fa3e 	bl	8003476 <HAL_I2CEx_ConfigAnalogFilter>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001000:	f000 fc38 	bl	8001874 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_I2C1_Init+0x74>)
 8001008:	f002 fa80 	bl	800350c <HAL_I2CEx_ConfigDigitalFilter>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fc2f 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001ec 	.word	0x200001ec
 8001020:	40005400 	.word	0x40005400
 8001024:	2000090e 	.word	0x2000090e

08001028 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_I2C2_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_I2C2_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_I2C2_Init+0x74>)
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <MX_I2C2_Init+0x7c>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_I2C2_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_I2C2_Init+0x74>)
 8001040:	2201      	movs	r2, #1
 8001042:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_I2C2_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_I2C2_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C2_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C2_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <MX_I2C2_Init+0x74>)
 8001064:	f002 f978 	bl	8003358 <HAL_I2C_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800106e:	f000 fc01 	bl	8001874 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <MX_I2C2_Init+0x74>)
 8001076:	f002 f9fe 	bl	8003476 <HAL_I2CEx_ConfigAnalogFilter>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001080:	f000 fbf8 	bl	8001874 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_I2C2_Init+0x74>)
 8001088:	f002 fa40 	bl	800350c <HAL_I2CEx_ConfigDigitalFilter>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 fbef 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000238 	.word	0x20000238
 80010a0:	40005800 	.word	0x40005800
 80010a4:	2000090e 	.word	0x2000090e

080010a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_SPI1_Init+0x74>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <MX_SPI1_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_SPI1_Init+0x74>)
 80010b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_SPI1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_SPI1_Init+0x74>)
 80010c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_SPI1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_SPI1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_SPI1_Init+0x74>)
 80010d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_SPI1_Init+0x74>)
 80010de:	2210      	movs	r2, #16
 80010e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_SPI1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_SPI1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_SPI1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_SPI1_Init+0x74>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_SPI1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_SPI1_Init+0x74>)
 8001102:	2208      	movs	r2, #8
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_SPI1_Init+0x74>)
 8001108:	f005 fb5c 	bl	80067c4 <HAL_SPI_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001112:	f000 fbaf 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000284 	.word	0x20000284
 8001120:	40013000 	.word	0x40013000

08001124 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_SPI3_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_SPI3_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_SPI3_Init+0x74>)
 8001130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001134:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_SPI3_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI3_Init+0x74>)
 800113e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001142:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI3_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_SPI3_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI3_Init+0x74>)
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI3_Init+0x74>)
 800115a:	2210      	movs	r2, #16
 800115c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI3_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI3_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_SPI3_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI3_Init+0x74>)
 8001172:	2207      	movs	r2, #7
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_SPI3_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI3_Init+0x74>)
 800117e:	2208      	movs	r2, #8
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_SPI3_Init+0x74>)
 8001184:	f005 fb1e 	bl	80067c4 <HAL_SPI_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 fb71 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200002e8 	.word	0x200002e8
 800119c:	40003c00 	.word	0x40003c00

080011a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4790;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011ce:	f241 22b6 	movw	r2, #4790	; 0x12b6
 80011d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011dc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f0:	4829      	ldr	r0, [pc, #164]	; (8001298 <MX_TIM2_Init+0xf8>)
 80011f2:	f005 fb92 	bl	800691a <HAL_TIM_PWM_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 80011fc:	f000 fb3a 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_TIM2_Init+0xf8>)
 8001210:	f006 f9c6 	bl	80075a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800121a:	f000 fb2b 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	4818      	ldr	r0, [pc, #96]	; (8001298 <MX_TIM2_Init+0xf8>)
 8001236:	f005 fd13 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001240:	f000 fb18 	bl	8001874 <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 8001244:	2396      	movs	r3, #150	; 0x96
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	2204      	movs	r2, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <MX_TIM2_Init+0xf8>)
 8001250:	f005 fd06 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 800125a:	f000 fb0b 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2208      	movs	r2, #8
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_TIM2_Init+0xf8>)
 8001266:	f005 fcfb 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001270:	f000 fb00 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	220c      	movs	r2, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM2_Init+0xf8>)
 800127c:	f005 fcf0 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001286:	f000 faf5 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM2_Init+0xf8>)
 800128c:	f000 fcac 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000034c 	.word	0x2000034c

0800129c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <MX_TIM3_Init+0xf8>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012e8:	4829      	ldr	r0, [pc, #164]	; (8001390 <MX_TIM3_Init+0xf4>)
 80012ea:	f005 fb16 	bl	800691a <HAL_TIM_PWM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80012f4:	f000 fabe 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4822      	ldr	r0, [pc, #136]	; (8001390 <MX_TIM3_Init+0xf4>)
 8001308:	f006 f94a 	bl	80075a0 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001312:	f000 faaf 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM3_Init+0xf4>)
 800132e:	f005 fc97 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001338:	f000 fa9c 	bl	8001874 <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 800133c:	2396      	movs	r3, #150	; 0x96
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	2204      	movs	r2, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	; (8001390 <MX_TIM3_Init+0xf4>)
 8001348:	f005 fc8a 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001352:	f000 fa8f 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_TIM3_Init+0xf4>)
 800135e:	f005 fc7f 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001368:	f000 fa84 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	220c      	movs	r2, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM3_Init+0xf4>)
 8001374:	f005 fc74 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800137e:	f000 fa79 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM3_Init+0xf4>)
 8001384:	f000 fc30 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000398 	.word	0x20000398
 8001394:	40000400 	.word	0x40000400

08001398 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	; 0x58
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	222c      	movs	r2, #44	; 0x2c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00b f943 	bl	800c650 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013ca:	4b40      	ldr	r3, [pc, #256]	; (80014cc <MX_TIM8_Init+0x134>)
 80013cc:	4a40      	ldr	r2, [pc, #256]	; (80014d0 <MX_TIM8_Init+0x138>)
 80013ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 479;
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <MX_TIM8_Init+0x134>)
 80013d2:	f240 12df 	movw	r2, #479	; 0x1df
 80013d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_TIM8_Init+0x134>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <MX_TIM8_Init+0x134>)
 80013e0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80013e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <MX_TIM8_Init+0x134>)
 80013e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <MX_TIM8_Init+0x134>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_TIM8_Init+0x134>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013fa:	4834      	ldr	r0, [pc, #208]	; (80014cc <MX_TIM8_Init+0x134>)
 80013fc:	f005 fa8d 	bl	800691a <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 8001406:	f000 fa35 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800141a:	4619      	mov	r1, r3
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <MX_TIM8_Init+0x134>)
 800141e:	f006 f8bf 	bl	80075a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001428:	f000 fa24 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 150;
 8001430:	2396      	movs	r3, #150	; 0x96
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	; (80014cc <MX_TIM8_Init+0x134>)
 8001452:	f005 fc05 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800145c:	f000 fa0a 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001464:	2204      	movs	r2, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <MX_TIM8_Init+0x134>)
 800146a:	f005 fbf9 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
 8001474:	f000 f9fe 	bl	8001874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM8_Init+0x134>)
 80014ae:	f006 f8f7 	bl	80076a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 80014b8:	f000 f9dc 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM8_Init+0x134>)
 80014be:	f000 fb93 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3758      	adds	r7, #88	; 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200003e4 	.word	0x200003e4
 80014d0:	40013400 	.word	0x40013400

080014d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_UART5_Init+0x58>)
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <MX_UART5_Init+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_UART5_Init+0x58>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_UART5_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_UART5_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_UART5_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_UART5_Init+0x58>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_UART5_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_UART5_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_UART5_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_UART5_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_UART5_Init+0x58>)
 8001518:	f006 f940 	bl	800779c <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001522:	f000 f9a7 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000430 	.word	0x20000430
 8001530:	40005000 	.word	0x40005000

08001534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USART1_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <MX_USART1_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001540:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USART1_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART1_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART1_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART1_UART_Init+0x58>)
 8001578:	f006 f910 	bl	800779c <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f977 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200004b4 	.word	0x200004b4
 8001590:	40013800 	.word	0x40013800

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_USART2_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <MX_USART2_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART2_UART_Init+0x58>)
 80015d8:	f006 f8e0 	bl	800779c <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f947 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000538 	.word	0x20000538
 80015f0:	40004400 	.word	0x40004400

080015f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_USART3_UART_Init+0x80>)
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <MX_USART3_UART_Init+0x84>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <MX_USART3_UART_Init+0x88>)
 8001602:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_USART3_UART_Init+0x80>)
 800160e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001612:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_USART3_UART_Init+0x80>)
 800161e:	2204      	movs	r2, #4
 8001620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_USART3_UART_Init+0x80>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001636:	2233      	movs	r2, #51	; 0x33
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart3.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART3_UART_Init+0x80>)
 800163c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_USART3_UART_Init+0x80>)
 800164c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800165a:	2300      	movs	r3, #0
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_USART3_UART_Init+0x80>)
 8001662:	f006 fc6e 	bl	8007f42 <HAL_RS485Ex_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800166c:	f000 f902 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200005bc 	.word	0x200005bc
 8001678:	40004800 	.word	0x40004800
 800167c:	000186a0 	.word	0x000186a0

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001696:	4b71      	ldr	r3, [pc, #452]	; (800185c <MX_GPIO_Init+0x1dc>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a70      	ldr	r2, [pc, #448]	; (800185c <MX_GPIO_Init+0x1dc>)
 800169c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b6e      	ldr	r3, [pc, #440]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b6b      	ldr	r3, [pc, #428]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a6a      	ldr	r2, [pc, #424]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b68      	ldr	r3, [pc, #416]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a64      	ldr	r2, [pc, #400]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b62      	ldr	r3, [pc, #392]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b5c      	ldr	r3, [pc, #368]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a58      	ldr	r2, [pc, #352]	; (800185c <MX_GPIO_Init+0x1dc>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <MX_GPIO_Init+0x1dc>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <MX_GPIO_Init+0x1dc>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a52      	ldr	r2, [pc, #328]	; (800185c <MX_GPIO_Init+0x1dc>)
 8001714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <MX_GPIO_Init+0x1dc>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8001726:	2200      	movs	r2, #0
 8001728:	f64f 7108 	movw	r1, #65288	; 0xff08
 800172c:	484c      	ldr	r0, [pc, #304]	; (8001860 <MX_GPIO_Init+0x1e0>)
 800172e:	f001 fdfb 	bl	8003328 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2110      	movs	r1, #16
 8001736:	484b      	ldr	r0, [pc, #300]	; (8001864 <MX_GPIO_Init+0x1e4>)
 8001738:	f001 fdf6 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GRAB_DIR_Pin|ROT_DIR_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001742:	4849      	ldr	r0, [pc, #292]	; (8001868 <MX_GPIO_Init+0x1e8>)
 8001744:	f001 fdf0 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROT_ENABLE_Pin|GRAB_ENABLE_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800174e:	4847      	ldr	r0, [pc, #284]	; (800186c <MX_GPIO_Init+0x1ec>)
 8001750:	f001 fdea 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MAN_EN1_Pin|CS_SPI3_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f244 0101 	movw	r1, #16385	; 0x4001
 800175a:	4844      	ldr	r0, [pc, #272]	; (800186c <MX_GPIO_Init+0x1ec>)
 800175c:	f001 fde4 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	4842      	ldr	r0, [pc, #264]	; (8001870 <MX_GPIO_Init+0x1f0>)
 8001768:	f001 fdde 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800176c:	2337      	movs	r3, #55	; 0x37
 800176e:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001770:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4837      	ldr	r0, [pc, #220]	; (8001860 <MX_GPIO_Init+0x1e0>)
 8001782:	f001 fc57 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin PE10
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8001786:	f64f 7308 	movw	r3, #65288	; 0xff08
 800178a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4830      	ldr	r0, [pc, #192]	; (8001860 <MX_GPIO_Init+0x1e0>)
 80017a0:	f001 fc48 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f001 fc3b 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017be:	2310      	movs	r3, #16
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4823      	ldr	r0, [pc, #140]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80017d6:	f001 fc2d 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAB_DIR_Pin ROT_DIR_Pin */
  GPIO_InitStruct.Pin = GRAB_DIR_Pin|ROT_DIR_Pin;
 80017da:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	481d      	ldr	r0, [pc, #116]	; (8001868 <MX_GPIO_Init+0x1e8>)
 80017f4:	f001 fc1e 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_ENABLE_Pin GRAB_ENABLE_Pin */
  GPIO_InitStruct.Pin = ROT_ENABLE_Pin|GRAB_ENABLE_Pin;
 80017f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4816      	ldr	r0, [pc, #88]	; (800186c <MX_GPIO_Init+0x1ec>)
 8001812:	f001 fc0f 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAN_EN1_Pin CS_SPI3_Pin */
  GPIO_InitStruct.Pin = MAN_EN1_Pin|CS_SPI3_Pin;
 8001816:	f244 0301 	movw	r3, #16385	; 0x4001
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <MX_GPIO_Init+0x1ec>)
 8001830:	f001 fc00 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_ON_Pin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_GPIO_Init+0x1f0>)
 800184e:	f001 fbf1 	bl	8003034 <HAL_GPIO_Init>

}
 8001852:	bf00      	nop
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	48001000 	.word	0x48001000
 8001864:	48001400 	.word	0x48001400
 8001868:	48000400 	.word	0x48000400
 800186c:	48000c00 	.word	0x48000c00
 8001870:	48000800 	.word	0x48000800

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800187c:	e7fe      	b.n	800187c <Error_Handler+0x8>
	...

08001880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x44>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_MspInit+0x44>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6193      	str	r3, [r2, #24]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x44>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x44>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x44>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018b6:	2007      	movs	r0, #7
 80018b8:	f001 fb7a 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a15      	ldr	r2, [pc, #84]	; (800193c <HAL_ADC_MspInit+0x74>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d124      	bne.n	8001934 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_ADC_MspInit+0x78>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_ADC_MspInit+0x78>)
 80018f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_ADC_MspInit+0x78>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_ADC_MspInit+0x78>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_ADC_MspInit+0x78>)
 8001908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_ADC_MspInit+0x78>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PD11     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800191a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001920:	2303      	movs	r3, #3
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_ADC_MspInit+0x7c>)
 8001930:	f001 fb80 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	50000400 	.word	0x50000400
 8001940:	40021000 	.word	0x40021000
 8001944:	48000c00 	.word	0x48000c00

08001948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_I2C_MspInit+0xdc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d128      	bne.n	80019bc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001986:	2312      	movs	r3, #18
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001992:	2304      	movs	r3, #4
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4823      	ldr	r0, [pc, #140]	; (8001a2c <HAL_I2C_MspInit+0xe4>)
 800199e:	f001 fb49 	bl	8003034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 80019a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019ba:	e02e      	b.n	8001a1a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_I2C_MspInit+0xe8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d129      	bne.n	8001a1a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	6153      	str	r3, [r2, #20]
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019f0:	2304      	movs	r3, #4
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fe:	f001 fb19 	bl	8003034 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 8001a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_I2C_MspInit+0xe0>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	bf00      	nop
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	40005800 	.word	0x40005800

08001a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <HAL_SPI_MspInit+0x114>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12a      	bne.n	8001aac <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a60:	6193      	str	r3, [r2, #24]
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6153      	str	r3, [r2, #20]
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin|GPIO_PIN_15;
 8001a86:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa6:	f001 fac5 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001aaa:	e049      	b.n	8001b40 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_SPI_MspInit+0x11c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d144      	bne.n	8001b40 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ad8:	6153      	str	r3, [r2, #20]
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_SPI_MspInit+0x118>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b10:	2306      	movs	r3, #6
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <HAL_SPI_MspInit+0x120>)
 8001b1c:	f001 fa8a 	bl	8003034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b20:	2320      	movs	r3, #32
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b30:	2306      	movs	r3, #6
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <HAL_SPI_MspInit+0x124>)
 8001b3c:	f001 fa7a 	bl	8003034 <HAL_GPIO_Init>
}
 8001b40:	bf00      	nop
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40003c00 	.word	0x40003c00
 8001b54:	48000800 	.word	0x48000800
 8001b58:	48000400 	.word	0x48000400

08001b5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b86:	e022      	b.n	8001bce <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_TIM_PWM_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10c      	bne.n	8001bac <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
}
 8001baa:	e010      	b.n	8001bce <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_TIM_PWM_MspInit+0x88>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10b      	bne.n	8001bce <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_TIM_PWM_MspInit+0x80>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40013400 	.word	0x40013400

08001be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08e      	sub	sp, #56	; 0x38
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c08:	d139      	bne.n	8001c7e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a5c      	ldr	r2, [pc, #368]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PD3     ------> TIM2_CH1
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = VMA_2_Pin;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VMA_2_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f001 f9ec 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VMA_1_Pin|VMA_4_Pin|VMA_3_Pin;
 8001c5c:	23c8      	movs	r3, #200	; 0xc8
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	4619      	mov	r1, r3
 8001c76:	4843      	ldr	r0, [pc, #268]	; (8001d84 <HAL_TIM_MspPostInit+0x19c>)
 8001c78:	f001 f9dc 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c7c:	e07b      	b.n	8001d76 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_TIM_MspPostInit+0x1a0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d138      	bne.n	8001cfa <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4a3c      	ldr	r2, [pc, #240]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c92:	6153      	str	r3, [r2, #20]
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001caa:	6153      	str	r3, [r2, #20]
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VMA_7_Pin|VMA_8_Pin|VMA_5_Pin;
 8001cb8:	2313      	movs	r3, #19
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482e      	ldr	r0, [pc, #184]	; (8001d8c <HAL_TIM_MspPostInit+0x1a4>)
 8001cd4:	f001 f9ae 	bl	8003034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VMA_6_Pin;
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VMA_6_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4827      	ldr	r0, [pc, #156]	; (8001d90 <HAL_TIM_MspPostInit+0x1a8>)
 8001cf4:	f001 f99e 	bl	8003034 <HAL_GPIO_Init>
}
 8001cf8:	e03d      	b.n	8001d76 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <HAL_TIM_MspPostInit+0x1ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d138      	bne.n	8001d76 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d0e:	6153      	str	r3, [r2, #20]
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d26:	6153      	str	r3, [r2, #20]
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_TIM_MspPostInit+0x198>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_TILT_Pin;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001d44:	2304      	movs	r3, #4
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_PWM_TILT_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4810      	ldr	r0, [pc, #64]	; (8001d90 <HAL_TIM_MspPostInit+0x1a8>)
 8001d50:	f001 f970 	bl	8003034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SERVO_PWM_MAN_Pin;
 8001d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001d66:	230a      	movs	r3, #10
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_PWM_MAN_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <HAL_TIM_MspPostInit+0x1a4>)
 8001d72:	f001 f95f 	bl	8003034 <HAL_GPIO_Init>
}
 8001d76:	bf00      	nop
 8001d78:	3738      	adds	r7, #56	; 0x38
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	40013400 	.word	0x40013400

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b092      	sub	sp, #72	; 0x48
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_UART_MspInit+0x204>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d145      	bne.n	8001e46 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a78      	ldr	r2, [pc, #480]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4a72      	ldr	r2, [pc, #456]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ddc:	6153      	str	r3, [r2, #20]
 8001dde:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a6c      	ldr	r2, [pc, #432]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = IMU_TX_Pin;
 8001e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001e14:	2305      	movs	r3, #5
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(IMU_TX_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4861      	ldr	r0, [pc, #388]	; (8001fa4 <HAL_UART_MspInit+0x20c>)
 8001e20:	f001 f908 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_RX_Pin;
 8001e24:	2304      	movs	r3, #4
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001e34:	2305      	movs	r3, #5
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(IMU_RX_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	485a      	ldr	r0, [pc, #360]	; (8001fa8 <HAL_UART_MspInit+0x210>)
 8001e40:	f001 f8f8 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e44:	e0a6      	b.n	8001f94 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_UART_MspInit+0x214>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d128      	bne.n	8001ea2 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e72:	6153      	str	r3, [r2, #20]
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e7c:	623b      	str	r3, [r7, #32]
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e80:	2330      	movs	r3, #48	; 0x30
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e90:	2307      	movs	r3, #7
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <HAL_UART_MspInit+0x20c>)
 8001e9c:	f001 f8ca 	bl	8003034 <HAL_GPIO_Init>
}
 8001ea0:	e078      	b.n	8001f94 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <HAL_UART_MspInit+0x218>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d129      	bne.n	8001f00 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eac:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb6:	61d3      	str	r3, [r2, #28]
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ece:	6153      	str	r3, [r2, #20]
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = OSD_TX_Pin|OSD_RX_Pin;
 8001edc:	230c      	movs	r3, #12
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eec:	2307      	movs	r3, #7
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efa:	f001 f89b 	bl	8003034 <HAL_GPIO_Init>
}
 8001efe:	e049      	b.n	8001f94 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <HAL_UART_MspInit+0x21c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d144      	bne.n	8001f94 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6153      	str	r3, [r2, #20]
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f44:	6153      	str	r3, [r2, #20]
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_UART_MspInit+0x208>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_485_Pin|RX_485_Pin;
 8001f52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f64:	2307      	movs	r3, #7
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4812      	ldr	r0, [pc, #72]	; (8001fb8 <HAL_UART_MspInit+0x220>)
 8001f70:	f001 f860 	bl	8003034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DE_485_Pin;
 8001f74:	2340      	movs	r3, #64	; 0x40
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f84:	2307      	movs	r3, #7
 8001f86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DE_485_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480b      	ldr	r0, [pc, #44]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f90:	f001 f850 	bl	8003034 <HAL_GPIO_Init>
}
 8001f94:	bf00      	nop
 8001f96:	3748      	adds	r7, #72	; 0x48
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40005000 	.word	0x40005000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40004400 	.word	0x40004400
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	48001400 	.word	0x48001400

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 f898 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <USB_HP_IRQHandler+0x10>)
 800201a:	f001 fbc7 	bl	80037ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000130c 	.word	0x2000130c

08002028 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <USB_LP_IRQHandler+0x10>)
 800202e:	f001 fbbd 	bl	80037ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000130c 	.word	0x2000130c

0800203c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <SystemInit+0x20>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <SystemInit+0x20>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <LoopForever+0x6>)
  ldr r1, =_edata
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <LoopForever+0xe>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800207c:	4c0b      	ldr	r4, [pc, #44]	; (80020ac <LoopForever+0x16>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800208a:	f7ff ffd7 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208e:	f00a faad 	bl	800c5ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002092:	f7fe fdab 	bl	8000bec <main>

08002096 <LoopForever>:

LoopForever:
    b LoopForever
 8002096:	e7fe      	b.n	8002096 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002098:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80020a4:	0800c700 	.word	0x0800c700
  ldr r2, =_sbss
 80020a8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80020ac:	20001818 	.word	0x20001818

080020b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC1_2_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_Init+0x28>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_Init+0x28>)
 80020be:	f043 0310 	orr.w	r3, r3, #16
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 ff73 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff fbd6 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000

080020e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 ff8b 	bl	800301a <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f000 ff53 	bl	8002fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000004 	.word	0x20000004
 8002138:	2000000c 	.word	0x2000000c
 800213c:	20000008 	.word	0x20000008

08002140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c
 8002164:	2000066c 	.word	0x2000066c

08002168 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;  
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000066c 	.word	0x2000066c

08002180 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b09a      	sub	sp, #104	; 0x68
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e1c9      	b.n	800257c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d176      	bne.n	80022e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d152      	bne.n	80022a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff fb53 	bl	80018c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d13b      	bne.n	80022a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fd87 	bl	8002d44 <ADC_Disable>
 8002236:	4603      	mov	r3, r0
 8002238:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12f      	bne.n	80022a8 <HAL_ADC_Init+0xe0>
 8002248:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800224c:	2b00      	cmp	r3, #0
 800224e:	d12b      	bne.n	80022a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002258:	f023 0302 	bic.w	r3, r3, #2
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002272:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002282:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002284:	4b86      	ldr	r3, [pc, #536]	; (80024a0 <HAL_ADC_Init+0x2d8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a86      	ldr	r2, [pc, #536]	; (80024a4 <HAL_ADC_Init+0x2dc>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0c9a      	lsrs	r2, r3, #18
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229a:	e002      	b.n	80022a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3b01      	subs	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022c4:	d110      	bne.n	80022e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f023 0312 	bic.w	r3, r3, #18
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 8136 	bne.w	8002562 <HAL_ADC_Init+0x39a>
 80022f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 8131 	bne.w	8002562 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8129 	bne.w	8002562 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002318:	f043 0202 	orr.w	r2, r3, #2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002328:	d004      	beq.n	8002334 <HAL_ADC_Init+0x16c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_ADC_Init+0x2e0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_ADC_Init+0x170>
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_ADC_Init+0x2e4>)
 8002336:	e000      	b.n	800233a <HAL_ADC_Init+0x172>
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_ADC_Init+0x2e8>)
 800233a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d102      	bne.n	800234c <HAL_ADC_Init+0x184>
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_ADC_Init+0x2e0>)
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e01a      	b.n	8002382 <HAL_ADC_Init+0x1ba>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a55      	ldr	r2, [pc, #340]	; (80024a8 <HAL_ADC_Init+0x2e0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d103      	bne.n	800235e <HAL_ADC_Init+0x196>
 8002356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e011      	b.n	8002382 <HAL_ADC_Init+0x1ba>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a54      	ldr	r2, [pc, #336]	; (80024b4 <HAL_ADC_Init+0x2ec>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d102      	bne.n	800236e <HAL_ADC_Init+0x1a6>
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_ADC_Init+0x2f0>)
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e009      	b.n	8002382 <HAL_ADC_Init+0x1ba>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_ADC_Init+0x2f0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_ADC_Init+0x1b6>
 8002378:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <HAL_ADC_Init+0x2ec>)
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e001      	b.n	8002382 <HAL_ADC_Init+0x1ba>
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_ADC_Init+0x1da>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x1da>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_Init+0x1dc>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11c      	bne.n	80023e2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <HAL_ADC_Init+0x202>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x202>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_ADC_Init+0x204>
 80023ca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d108      	bne.n	80023e2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80023d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	431a      	orrs	r2, r3
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7e5b      	ldrb	r3, [r3, #25]
 80023e6:	035b      	lsls	r3, r3, #13
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ec:	2a01      	cmp	r2, #1
 80023ee:	d002      	beq.n	80023f6 <HAL_ADC_Init+0x22e>
 80023f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f4:	e000      	b.n	80023f8 <HAL_ADC_Init+0x230>
 80023f6:	2200      	movs	r2, #0
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4313      	orrs	r3, r2
 8002406:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002408:	4313      	orrs	r3, r2
 800240a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d11b      	bne.n	800244e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7e5b      	ldrb	r3, [r3, #25]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	3b01      	subs	r3, #1
 8002424:	045a      	lsls	r2, r3, #17
 8002426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002428:	4313      	orrs	r3, r2
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	663b      	str	r3, [r7, #96]	; 0x60
 8002430:	e00d      	b.n	800244e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	2b01      	cmp	r3, #1
 8002454:	d03a      	beq.n	80024cc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_ADC_Init+0x2ec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_ADC_Init+0x2a2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <HAL_ADC_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d128      	bne.n	80024bc <HAL_ADC_Init+0x2f4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002472:	d012      	beq.n	800249a <HAL_ADC_Init+0x2d2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247c:	d00a      	beq.n	8002494 <HAL_ADC_Init+0x2cc>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002486:	d002      	beq.n	800248e <HAL_ADC_Init+0x2c6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	e018      	b.n	80024c0 <HAL_ADC_Init+0x2f8>
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	e015      	b.n	80024c0 <HAL_ADC_Init+0x2f8>
 8002494:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002498:	e012      	b.n	80024c0 <HAL_ADC_Init+0x2f8>
 800249a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800249e:	e00f      	b.n	80024c0 <HAL_ADC_Init+0x2f8>
 80024a0:	20000004 	.word	0x20000004
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	50000100 	.word	0x50000100
 80024ac:	50000300 	.word	0x50000300
 80024b0:	50000700 	.word	0x50000700
 80024b4:	50000400 	.word	0x50000400
 80024b8:	50000500 	.word	0x50000500
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024c4:	4313      	orrs	r3, r2
 80024c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c8:	4313      	orrs	r3, r2
 80024ca:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d114      	bne.n	8002504 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e8:	f023 0302 	bic.w	r3, r3, #2
 80024ec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7e1b      	ldrb	r3, [r3, #24]
 80024f2:	039a      	lsls	r2, r3, #14
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4313      	orrs	r3, r2
 80024fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002500:	4313      	orrs	r3, r2
 8002502:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_ADC_Init+0x3bc>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002514:	430b      	orrs	r3, r1
 8002516:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10c      	bne.n	800253a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f023 010f 	bic.w	r1, r3, #15
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	1e5a      	subs	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
 8002538:	e007      	b.n	800254a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 020f 	bic.w	r2, r2, #15
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f023 0303 	bic.w	r3, r3, #3
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
 8002560:	e00a      	b.n	8002578 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f023 0312 	bic.w	r3, r3, #18
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800257c:	4618      	mov	r0, r3
 800257e:	3768      	adds	r7, #104	; 0x68
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	fff0c007 	.word	0xfff0c007

08002588 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002588:	b480      	push	{r7}
 800258a:	b09b      	sub	sp, #108	; 0x6c
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x22>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e2ca      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x5b8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 82ae 	bne.w	8002b1e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d81c      	bhi.n	8002604 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	461a      	mov	r2, r3
 80025de:	231f      	movs	r3, #31
 80025e0:	4093      	lsls	r3, r2
 80025e2:	43db      	mvns	r3, r3
 80025e4:	4019      	ands	r1, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
 8002602:	e063      	b.n	80026cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b09      	cmp	r3, #9
 800260a:	d81e      	bhi.n	800264a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3b1e      	subs	r3, #30
 8002620:	221f      	movs	r2, #31
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	4019      	ands	r1, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	3b1e      	subs	r3, #30
 800263c:	fa00 f203 	lsl.w	r2, r0, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
 8002648:	e040      	b.n	80026cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b0e      	cmp	r3, #14
 8002650:	d81e      	bhi.n	8002690 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	3b3c      	subs	r3, #60	; 0x3c
 8002666:	221f      	movs	r2, #31
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	4019      	ands	r1, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	3b3c      	subs	r3, #60	; 0x3c
 8002682:	fa00 f203 	lsl.w	r2, r0, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
 800268e:	e01d      	b.n	80026cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	3b5a      	subs	r3, #90	; 0x5a
 80026a4:	221f      	movs	r2, #31
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4019      	ands	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	3b5a      	subs	r3, #90	; 0x5a
 80026c0:	fa00 f203 	lsl.w	r2, r0, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 80e5 	bne.w	80028a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d91c      	bls.n	800271e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	3b1e      	subs	r3, #30
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]
 800271c:	e019      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6959      	ldr	r1, [r3, #20]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	2207      	movs	r2, #7
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6898      	ldr	r0, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	3b01      	subs	r3, #1
 8002770:	2b03      	cmp	r3, #3
 8002772:	d84f      	bhi.n	8002814 <HAL_ADC_ConfigChannel+0x28c>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_ADC_ConfigChannel+0x1f4>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	0800278d 	.word	0x0800278d
 8002780:	080027af 	.word	0x080027af
 8002784:	080027d1 	.word	0x080027d1
 8002788:	080027f3 	.word	0x080027f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002792:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <HAL_ADC_ConfigChannel+0x474>)
 8002794:	4013      	ands	r3, r2
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	0691      	lsls	r1, r2, #26
 800279c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800279e:	430a      	orrs	r2, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027ac:	e07e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027b4:	4b91      	ldr	r3, [pc, #580]	; (80029fc <HAL_ADC_ConfigChannel+0x474>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	0691      	lsls	r1, r2, #26
 80027be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c0:	430a      	orrs	r2, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027ce:	e06d      	b.n	80028ac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027d6:	4b89      	ldr	r3, [pc, #548]	; (80029fc <HAL_ADC_ConfigChannel+0x474>)
 80027d8:	4013      	ands	r3, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	0691      	lsls	r1, r2, #26
 80027e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027e2:	430a      	orrs	r2, r1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027f0:	e05c      	b.n	80028ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027f8:	4b80      	ldr	r3, [pc, #512]	; (80029fc <HAL_ADC_ConfigChannel+0x474>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	0691      	lsls	r1, r2, #26
 8002802:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002804:	430a      	orrs	r2, r1
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002810:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002812:	e04b      	b.n	80028ac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	069b      	lsls	r3, r3, #26
 8002824:	429a      	cmp	r2, r3
 8002826:	d107      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002836:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800285a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800287e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	429a      	cmp	r2, r3
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80028a4:	e001      	b.n	80028aa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <HAL_ADC_ConfigChannel+0x324>
      break;
 80028aa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d108      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x344>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x344>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_ADC_ConfigChannel+0x346>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8130 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d00f      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2201      	movs	r2, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028fa:	e049      	b.n	8002990 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b09      	cmp	r3, #9
 800291c:	d91c      	bls.n	8002958 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6999      	ldr	r1, [r3, #24]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	3b1b      	subs	r3, #27
 8002930:	2207      	movs	r2, #7
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	4019      	ands	r1, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6898      	ldr	r0, [r3, #8]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1b      	subs	r3, #27
 800294a:	fa00 f203 	lsl.w	r2, r0, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	619a      	str	r2, [r3, #24]
 8002956:	e01b      	b.n	8002990 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6959      	ldr	r1, [r3, #20]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	2207      	movs	r2, #7
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	4019      	ands	r1, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6898      	ldr	r0, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	fa00 f203 	lsl.w	r2, r0, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002998:	d004      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x41c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_ADC_ConfigChannel+0x478>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x420>
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_ADC_ConfigChannel+0x47c>)
 80029a6:	e000      	b.n	80029aa <HAL_ADC_ConfigChannel+0x422>
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_ADC_ConfigChannel+0x480>)
 80029aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029c4:	2b11      	cmp	r3, #17
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029d8:	2b12      	cmp	r3, #18
 80029da:	f040 80ab 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 80a4 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f4:	d10a      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x484>
 80029f6:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <HAL_ADC_ConfigChannel+0x478>)
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e022      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x4ba>
 80029fc:	83fff000 	.word	0x83fff000
 8002a00:	50000100 	.word	0x50000100
 8002a04:	50000300 	.word	0x50000300
 8002a08:	50000700 	.word	0x50000700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_ADC_ConfigChannel+0x5c4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d103      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x496>
 8002a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e011      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x4ba>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x4a6>
 8002a28:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e009      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x4ba>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d102      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x4b6>
 8002a38:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e001      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x4ba>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d108      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x4da>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x4da>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x4dc>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d150      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x502>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x502>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x504>
 8002a8a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d13c      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d11d      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x54c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa0:	d118      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aac:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_ADC_ConfigChannel+0x5d4>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	0c9a      	lsrs	r2, r3, #18
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ad2:	e02e      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b11      	cmp	r3, #17
 8002ada:	d10b      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x56c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae4:	d106      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002af2:	e01e      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d11a      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b06:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b08:	e013      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b1c:	e00a      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b32:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	376c      	adds	r7, #108	; 0x6c
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	50000100 	.word	0x50000100
 8002b50:	50000400 	.word	0x50000400
 8002b54:	50000500 	.word	0x50000500
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	431bde83 	.word	0x431bde83

08002b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b099      	sub	sp, #100	; 0x64
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b78:	d102      	bne.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	e01a      	b.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d103      	bne.n	8002b92 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	e011      	b.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d102      	bne.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	e009      	b.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a64      	ldr	r2, [pc, #400]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d102      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bac:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	e001      	b.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0b0      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0a9      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 808d 	bne.w	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 8086 	bne.w	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfc:	d004      	beq.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002c0a:	e000      	b.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002c0e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d040      	beq.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2a:	035b      	lsls	r3, r3, #13
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c32:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d108      	bne.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c54:	2300      	movs	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d15c      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c76:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d14b      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c84:	f023 030f 	bic.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	6811      	ldr	r1, [r2, #0]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	6892      	ldr	r2, [r2, #8]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	431a      	orrs	r2, r3
 8002c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c96:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c98:	e03c      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d108      	bne.n	8002cc6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d123      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002ce8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d112      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cf6:	f023 030f 	bic.w	r3, r3, #15
 8002cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cfc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfe:	e009      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d12:	e000      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d14:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d22:	4618      	mov	r0, r3
 8002d24:	3764      	adds	r7, #100	; 0x64
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	50000100 	.word	0x50000100
 8002d34:	50000400 	.word	0x50000400
 8002d38:	50000500 	.word	0x50000500
 8002d3c:	50000300 	.word	0x50000300
 8002d40:	50000700 	.word	0x50000700

08002d44 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <ADC_Disable+0x2c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <ADC_Disable+0x2c>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <ADC_Disable+0x2e>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d047      	beq.n	8002e06 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030d 	and.w	r3, r3, #13
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10f      	bne.n	8002da4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0202 	orr.w	r2, r2, #2
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d9c:	f7ff f9e4 	bl	8002168 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002da2:	e029      	b.n	8002df8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e023      	b.n	8002e08 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dc0:	f7ff f9d2 	bl	8002168 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d914      	bls.n	8002df8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10d      	bne.n	8002df8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d0dc      	beq.n	8002dc0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f7c:	d301      	bcc.n	8002f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00f      	b.n	8002fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <SysTick_Config+0x40>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f7ff ff8e 	bl	8002eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <SysTick_Config+0x40>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <SysTick_Config+0x40>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	e000e010 	.word	0xe000e010

08002fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff29 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd8:	f7ff ff3e 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7ff ff8e 	bl	8002f04 <NVIC_EncodePriority>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff5d 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff31 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ffa2 	bl	8002f6c <SysTick_Config>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	e154      	b.n	80032ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8146 	beq.w	80032e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d005      	beq.n	8003074 <HAL_GPIO_Init+0x40>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d130      	bne.n	80030d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030aa:	2201      	movs	r2, #1
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 0201 	and.w	r2, r3, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d017      	beq.n	8003112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d123      	bne.n	8003166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0203 	and.w	r2, r3, #3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a0 	beq.w	80032e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a8:	4b58      	ldr	r3, [pc, #352]	; (800330c <HAL_GPIO_Init+0x2d8>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <HAL_GPIO_Init+0x2d8>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6193      	str	r3, [r2, #24]
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_GPIO_Init+0x2d8>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c0:	4a53      	ldr	r2, [pc, #332]	; (8003310 <HAL_GPIO_Init+0x2dc>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031ea:	d019      	beq.n	8003220 <HAL_GPIO_Init+0x1ec>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a49      	ldr	r2, [pc, #292]	; (8003314 <HAL_GPIO_Init+0x2e0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_GPIO_Init+0x1e8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a48      	ldr	r2, [pc, #288]	; (8003318 <HAL_GPIO_Init+0x2e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00d      	beq.n	8003218 <HAL_GPIO_Init+0x1e4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a47      	ldr	r2, [pc, #284]	; (800331c <HAL_GPIO_Init+0x2e8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <HAL_GPIO_Init+0x1e0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a46      	ldr	r2, [pc, #280]	; (8003320 <HAL_GPIO_Init+0x2ec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_GPIO_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e008      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003210:	2305      	movs	r3, #5
 8003212:	e006      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003214:	2303      	movs	r3, #3
 8003216:	e004      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003218:	2302      	movs	r3, #2
 800321a:	e002      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003220:	2300      	movs	r3, #0
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	f002 0203 	and.w	r2, r2, #3
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	4093      	lsls	r3, r2
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003232:	4937      	ldr	r1, [pc, #220]	; (8003310 <HAL_GPIO_Init+0x2dc>)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003264:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800326a:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43db      	mvns	r3, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800328e:	4a25      	ldr	r2, [pc, #148]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_GPIO_Init+0x2f0>)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f aea3 	bne.w	8003044 <HAL_GPIO_Init+0x10>
  }
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000
 8003314:	48000400 	.word	0x48000400
 8003318:	48000800 	.word	0x48000800
 800331c:	48000c00 	.word	0x48000c00
 8003320:	48001000 	.word	0x48001000
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003344:	e002      	b.n	800334c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e081      	b.n	800346e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe fae2 	bl	8001948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e006      	b.n	80033e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d104      	bne.n	80033f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003414:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	d138      	bne.n	80034fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003496:	2302      	movs	r3, #2
 8003498:	e032      	b.n	8003500 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2224      	movs	r2, #36	; 0x24
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d139      	bne.n	8003596 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800352c:	2302      	movs	r3, #2
 800352e:	e033      	b.n	8003598 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800355e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a6:	b08b      	sub	sp, #44	; 0x2c
 80035a8:	af06      	add	r7, sp, #24
 80035aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0d0      	b.n	8003758 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f008 fd28 	bl	800c020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2203      	movs	r2, #3
 80035d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 fd2e 	bl	800803e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e04c      	b.n	8003682 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	3301      	adds	r3, #1
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	b298      	uxth	r0, r3
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	3336      	adds	r3, #54	; 0x36
 8003626:	4602      	mov	r2, r0
 8003628:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	3303      	adds	r3, #3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	3338      	adds	r3, #56	; 0x38
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	333c      	adds	r3, #60	; 0x3c
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	3340      	adds	r3, #64	; 0x40
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	3301      	adds	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3ad      	bcc.n	80035e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	e044      	b.n	800371c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3301      	adds	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3b5      	bcc.n	8003692 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	687e      	ldr	r6, [r7, #4]
 800372e:	466d      	mov	r5, sp
 8003730:	f106 0410 	add.w	r4, r6, #16
 8003734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	602b      	str	r3, [r5, #0]
 800373c:	1d33      	adds	r3, r6, #4
 800373e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003740:	6838      	ldr	r0, [r7, #0]
 8003742:	f004 fc97 	bl	8008074 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003760 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_PCD_Start+0x16>
 8003772:	2302      	movs	r3, #2
 8003774:	e016      	b.n	80037a4 <HAL_PCD_Start+0x44>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 fc44 	bl	8008010 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003788:	2101      	movs	r1, #1
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f008 fef6 	bl	800c57c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f006 fe59 	bl	800a44c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f006 fe52 	bl	800a462 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	d102      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 faf6 	bl	8003dbc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f006 fe44 	bl	800a462 <USB_ReadInterrupts>
 80037da:	4603      	mov	r3, r0
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e4:	d112      	bne.n	800380c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	b292      	uxth	r2, r2
 80037fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f008 fcbf 	bl	800c182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003804:	2100      	movs	r1, #0
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8c7 	bl	800399a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f006 fe26 	bl	800a462 <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d10b      	bne.n	800383a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003834:	b292      	uxth	r2, r2
 8003836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f006 fe0f 	bl	800a462 <USB_ReadInterrupts>
 8003844:	4603      	mov	r3, r0
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	d10b      	bne.n	8003868 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003862:	b292      	uxth	r2, r2
 8003864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f006 fdf8 	bl	800a462 <USB_ReadInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d126      	bne.n	80038cc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0204 	bic.w	r2, r2, #4
 8003890:	b292      	uxth	r2, r2
 8003892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0208 	bic.w	r2, r2, #8
 80038a8:	b292      	uxth	r2, r2
 80038aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f008 fca0 	bl	800c1f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c6:	b292      	uxth	r2, r2
 80038c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f006 fdc6 	bl	800a462 <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d126      	bne.n	8003930 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0208 	orr.w	r2, r2, #8
 80038f4:	b292      	uxth	r2, r2
 80038f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390c:	b292      	uxth	r2, r2
 800390e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0204 	orr.w	r2, r2, #4
 8003924:	b292      	uxth	r2, r2
 8003926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f008 fc48 	bl	800c1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f006 fd94 	bl	800a462 <USB_ReadInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003944:	d10e      	bne.n	8003964 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003958:	b292      	uxth	r2, r2
 800395a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f008 fc01 	bl	800c166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f006 fd7a 	bl	800a462 <USB_ReadInterrupts>
 800396e:	4603      	mov	r3, r0
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003978:	d10b      	bne.n	8003992 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800398c:	b292      	uxth	r2, r2
 800398e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_PCD_SetAddress+0x1a>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e013      	b.n	80039dc <HAL_PCD_SetAddress+0x42>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f006 fd29 	bl	800a424 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	4608      	mov	r0, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	70fb      	strb	r3, [r7, #3]
 80039f6:	460b      	mov	r3, r1
 80039f8:	803b      	strh	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0e      	bge.n	8003a28 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	705a      	strb	r2, [r3, #1]
 8003a26:	e00e      	b.n	8003a46 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 0207 	and.w	r2, r3, #7
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a52:	883a      	ldrh	r2, [r7, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	78ba      	ldrb	r2, [r7, #2]
 8003a5c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a70:	78bb      	ldrb	r3, [r7, #2]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d102      	bne.n	8003a7c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_PCD_EP_Open+0xa6>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e00e      	b.n	8003aa8 <HAL_PCD_EP_Open+0xc4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fb0d 	bl	80080b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da0e      	bge.n	8003ae2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	705a      	strb	r2, [r3, #1]
 8003ae0:	e00e      	b.n	8003b00 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 0207 	and.w	r2, r3, #7
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_PCD_EP_Close+0x6a>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e00e      	b.n	8003b38 <HAL_PCD_EP_Close+0x88>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 fe59 	bl	80087e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	f003 0207 	and.w	r2, r3, #7
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 f80c 	bl	8008bba <USB_EPStartXfer>
 8003ba2:	e005      	b.n	8003bb0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f005 f805 	bl	8008bba <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 0207 	and.w	r2, r3, #7
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003bdc:	681b      	ldr	r3, [r3, #0]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b086      	sub	sp, #24
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2201      	movs	r2, #1
 8003c34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c42:	7afb      	ldrb	r3, [r7, #11]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6979      	ldr	r1, [r7, #20]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 ffb1 	bl	8008bba <USB_EPStartXfer>
 8003c58:	e005      	b.n	8003c66 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6979      	ldr	r1, [r7, #20]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 ffaa 	bl	8008bba <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 0207 	and.w	r2, r3, #7
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d901      	bls.n	8003c8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e03e      	b.n	8003d0c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da0e      	bge.n	8003cb4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	705a      	strb	r2, [r3, #1]
 8003cb2:	e00c      	b.n	8003cce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_PCD_EP_SetStall+0x7e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e00e      	b.n	8003d0c <HAL_PCD_EP_SetStall+0x9c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f006 fa92 	bl	800a226 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d901      	bls.n	8003d32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e040      	b.n	8003db4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da0e      	bge.n	8003d58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	705a      	strb	r2, [r3, #1]
 8003d56:	e00e      	b.n	8003d76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 0207 	and.w	r2, r3, #7
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_PCD_EP_ClrStall+0x82>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e00e      	b.n	8003db4 <HAL_PCD_EP_ClrStall+0xa0>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f006 fa8f 	bl	800a2c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b096      	sub	sp, #88	; 0x58
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dc4:	e3a9      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003dd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003de0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f040 8164 	bne.w	80040b2 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003dea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d152      	bne.n	8003e9c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	81fb      	strh	r3, [r7, #14]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3328      	adds	r3, #40	; 0x28
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	3302      	adds	r3, #2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	441a      	add	r2, r3
 8003e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f008 f968 	bl	800c132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8355 	beq.w	800451a <PCD_EP_ISR_Handler+0x75e>
 8003e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f040 8350 	bne.w	800451a <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e9a:	e33e      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d034      	beq.n	8003f24 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3306      	adds	r3, #6
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f006 fb08 	bl	800a50e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	823b      	strh	r3, [r7, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	8a3a      	ldrh	r2, [r7, #16]
 8003f14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f18:	b292      	uxth	r2, r2
 8003f1a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f008 f8db 	bl	800c0d8 <HAL_PCD_SetupStageCallback>
 8003f22:	e2fa      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f24:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f280 82f6 	bge.w	800451a <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	83fb      	strh	r3, [r7, #30]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	8bfa      	ldrh	r2, [r7, #30]
 8003f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f48:	b292      	uxth	r2, r2
 8003f4a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3306      	adds	r3, #6
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f76:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d019      	beq.n	8003fb4 <PCD_EP_ISR_Handler+0x1f8>
 8003f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	6959      	ldr	r1, [r3, #20]
 8003f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f92:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f96:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f006 fab8 	bl	800a50e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003faa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fac:	2100      	movs	r1, #0
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f008 f8a4 	bl	800c0fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 82aa 	bne.w	800451a <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d112      	bne.n	8004014 <PCD_EP_ISR_Handler+0x258>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400c:	b29a      	uxth	r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	e02f      	b.n	8004074 <PCD_EP_ISR_Handler+0x2b8>
 8004014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b3e      	cmp	r3, #62	; 0x3e
 800401a:	d813      	bhi.n	8004044 <PCD_EP_ISR_Handler+0x288>
 800401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <PCD_EP_ISR_Handler+0x27a>
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	3301      	adds	r3, #1
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
 8004036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004038:	b29b      	uxth	r3, r3
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	b29a      	uxth	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	e017      	b.n	8004074 <PCD_EP_ISR_Handler+0x2b8>
 8004044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	647b      	str	r3, [r7, #68]	; 0x44
 800404c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <PCD_EP_ISR_Handler+0x2a2>
 8004058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405a:	3b01      	subs	r3, #1
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
 800405e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004060:	b29b      	uxth	r3, r3
 8004062:	029b      	lsls	r3, r3, #10
 8004064:	b29b      	uxth	r3, r3
 8004066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800406a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406e:	b29a      	uxth	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	827b      	strh	r3, [r7, #18]
 8004086:	8a7b      	ldrh	r3, [r7, #18]
 8004088:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800408c:	827b      	strh	r3, [r7, #18]
 800408e:	8a7b      	ldrh	r3, [r7, #18]
 8004090:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004094:	827b      	strh	r3, [r7, #18]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	8a7b      	ldrh	r3, [r7, #18]
 800409c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	8013      	strh	r3, [r2, #0]
 80040b0:	e233      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040c6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f280 80fc 	bge.w	80042c8 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040e6:	4013      	ands	r3, r2
 80040e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80040fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004102:	b292      	uxth	r2, r2
 8004104:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004106:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411e:	7b1b      	ldrb	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d125      	bne.n	8004170 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412c:	b29b      	uxth	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4413      	add	r3, r2
 8004138:	3306      	adds	r3, #6
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004150:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8092 	beq.w	800427e <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	6959      	ldr	r1, [r3, #20]
 8004162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004164:	88da      	ldrh	r2, [r3, #6]
 8004166:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800416a:	f006 f9d0 	bl	800a50e <USB_ReadPMA>
 800416e:	e086      	b.n	800427e <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	78db      	ldrb	r3, [r3, #3]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d10a      	bne.n	800418e <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004178:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800417c:	461a      	mov	r2, r3
 800417e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f9d8 	bl	8004536 <HAL_PCD_EP_DB_Receive>
 8004186:	4603      	mov	r3, r0
 8004188:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800418c:	e077      	b.n	800427e <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d024      	beq.n	8004236 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	3302      	adds	r3, #2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004214:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800421c:	2b00      	cmp	r3, #0
 800421e:	d02e      	beq.n	800427e <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	6959      	ldr	r1, [r3, #20]
 8004228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422a:	891a      	ldrh	r2, [r3, #8]
 800422c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004230:	f006 f96d 	bl	800a50e <USB_ReadPMA>
 8004234:	e023      	b.n	800427e <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	3306      	adds	r3, #6
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800425e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004262:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004270:	6959      	ldr	r1, [r3, #20]
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	895a      	ldrh	r2, [r3, #10]
 8004276:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800427a:	f006 f948 	bl	800a50e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004286:	441a      	add	r2, r3
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004294:	441a      	add	r2, r3
 8004296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004298:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <PCD_EP_ISR_Handler+0x4f2>
 80042a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d206      	bcs.n	80042bc <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f007 ff21 	bl	800c0fc <HAL_PCD_DataOutStageCallback>
 80042ba:	e005      	b.n	80042c8 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 fc79 	bl	8008bba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8122 	beq.w	800451a <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80042d6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800431a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	78db      	ldrb	r3, [r3, #3]
 800432a:	2b02      	cmp	r3, #2
 800432c:	f000 809d 	beq.w	800446a <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 8004330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004336:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d046      	beq.n	80043d0 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d126      	bne.n	8004398 <PCD_EP_ISR_Handler+0x5dc>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004358:	b29b      	uxth	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	4413      	add	r3, r2
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	011a      	lsls	r2, r3, #4
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	4413      	add	r3, r2
 800436c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004370:	623b      	str	r3, [r7, #32]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437c:	b29a      	uxth	r2, r3
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004390:	b29a      	uxth	r2, r3
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	e061      	b.n	800445c <PCD_EP_ISR_Handler+0x6a0>
 8004398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d15d      	bne.n	800445c <PCD_EP_ISR_Handler+0x6a0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	4413      	add	r3, r2
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	011a      	lsls	r2, r3, #4
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	4413      	add	r3, r2
 80043c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2200      	movs	r2, #0
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	e045      	b.n	800445c <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d126      	bne.n	800442c <PCD_EP_ISR_Handler+0x670>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	4413      	add	r3, r2
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	011a      	lsls	r2, r3, #4
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	4413      	add	r3, r2
 8004400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004410:	b29a      	uxth	r2, r3
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004424:	b29a      	uxth	r2, r3
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	e017      	b.n	800445c <PCD_EP_ISR_Handler+0x6a0>
 800442c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d113      	bne.n	800445c <PCD_EP_ISR_Handler+0x6a0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004442:	4413      	add	r3, r2
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444e:	4413      	add	r3, r2
 8004450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2200      	movs	r2, #0
 800445a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f007 fe65 	bl	800c132 <HAL_PCD_DataInStageCallback>
 8004468:	e057      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800446a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446c:	78db      	ldrb	r3, [r3, #3]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d14c      	bne.n	800450c <PCD_EP_ISR_Handler+0x750>
 8004472:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d146      	bne.n	800450c <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	3302      	adds	r3, #2
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 80044aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d907      	bls.n	80044c6 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 80044b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	619a      	str	r2, [r3, #24]
 80044c4:	e002      	b.n	80044cc <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 80044c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f007 fe29 	bl	800c132 <HAL_PCD_DataInStageCallback>
 80044e0:	e01b      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044ea:	441a      	add	r2, r3
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80044f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044f8:	441a      	add	r2, r3
 80044fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004504:	4618      	mov	r0, r3
 8004506:	f004 fb58 	bl	8008bba <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800450a:	e006      	b.n	800451a <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800450c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004510:	461a      	mov	r2, r3
 8004512:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f91b 	bl	8004750 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004522:	b29b      	uxth	r3, r3
 8004524:	b21b      	sxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	f6ff ac4d 	blt.w	8003dc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3758      	adds	r7, #88	; 0x58
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d07e      	beq.n	800464c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	3302      	adds	r3, #2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004576:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	8b7b      	ldrh	r3, [r7, #26]
 800457e:	429a      	cmp	r2, r3
 8004580:	d306      	bcc.n	8004590 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	8b7b      	ldrh	r3, [r7, #26]
 8004588:	1ad2      	subs	r2, r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	619a      	str	r2, [r3, #24]
 800458e:	e002      	b.n	8004596 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d123      	bne.n	80045e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	833b      	strh	r3, [r7, #24]
 80045ba:	8b3b      	ldrh	r3, [r7, #24]
 80045bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045c0:	833b      	strh	r3, [r7, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	8b3b      	ldrh	r3, [r7, #24]
 80045d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01f      	beq.n	8004630 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	82fb      	strh	r3, [r7, #22]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	8afb      	ldrh	r3, [r7, #22]
 800461c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800462c:	b29b      	uxth	r3, r3
 800462e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004630:	8b7b      	ldrh	r3, [r7, #26]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8087 	beq.w	8004746 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	891a      	ldrh	r2, [r3, #8]
 8004644:	8b7b      	ldrh	r3, [r7, #26]
 8004646:	f005 ff62 	bl	800a50e <USB_ReadPMA>
 800464a:	e07c      	b.n	8004746 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004654:	b29b      	uxth	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	3306      	adds	r3, #6
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004674:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	8b7b      	ldrh	r3, [r7, #26]
 800467c:	429a      	cmp	r2, r3
 800467e:	d306      	bcc.n	800468e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	8b7b      	ldrh	r3, [r7, #26]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	619a      	str	r2, [r3, #24]
 800468c:	e002      	b.n	8004694 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d123      	bne.n	80046e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	83fb      	strh	r3, [r7, #30]
 80046b8:	8bfb      	ldrh	r3, [r7, #30]
 80046ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046be:	83fb      	strh	r3, [r7, #30]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	8bfb      	ldrh	r3, [r7, #30]
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d11f      	bne.n	800472e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004708:	83bb      	strh	r3, [r7, #28]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8bbb      	ldrh	r3, [r7, #28]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6959      	ldr	r1, [r3, #20]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	895a      	ldrh	r2, [r3, #10]
 8004740:	8b7b      	ldrh	r3, [r7, #26]
 8004742:	f005 fee4 	bl	800a50e <USB_ReadPMA>
    }
  }

  return count;
 8004746:	8b7b      	ldrh	r3, [r7, #26]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b0a2      	sub	sp, #136	; 0x88
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 81c7 	beq.w	8004af8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	3302      	adds	r3, #2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004792:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800479e:	429a      	cmp	r2, r3
 80047a0:	d907      	bls.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	619a      	str	r2, [r3, #24]
 80047b0:	e002      	b.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 80b9 	bne.w	8004934 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d126      	bne.n	8004818 <HAL_PCD_EP_DB_Transmit+0xc8>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	4413      	add	r3, r2
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	011a      	lsls	r2, r3, #4
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	4413      	add	r3, r2
 80047ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29a      	uxth	r2, r3
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e01a      	b.n	800484e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d116      	bne.n	800484e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482e:	b29b      	uxth	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	4413      	add	r3, r2
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	4413      	add	r3, r2
 8004842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	2200      	movs	r2, #0
 800484c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d126      	bne.n	80048aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486a:	b29b      	uxth	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	4413      	add	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011a      	lsls	r2, r3, #4
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4413      	add	r3, r2
 800487e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800488e:	b29a      	uxth	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e017      	b.n	80048da <HAL_PCD_EP_DB_Transmit+0x18a>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d113      	bne.n	80048da <HAL_PCD_EP_DB_Transmit+0x18a>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	4413      	add	r3, r2
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2200      	movs	r2, #0
 80048d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f007 fc26 	bl	800c132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 82d4 	beq.w	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	827b      	strh	r3, [r7, #18]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	8a7b      	ldrh	r3, [r7, #18]
 800491e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
 8004932:	e2b2      	b.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d021      	beq.n	8004982 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800497a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 8286 	bne.w	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004996:	441a      	add	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049a4:	441a      	add	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d309      	bcc.n	80049ca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	621a      	str	r2, [r3, #32]
 80049c8:	e015      	b.n	80049f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80049d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049e0:	e009      	b.n	80049f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d155      	bne.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x35a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	4413      	add	r3, r2
 8004a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	4413      	add	r3, r2
 8004a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d112      	bne.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x302>
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	e047      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a54:	2b3e      	cmp	r3, #62	; 0x3e
 8004a56:	d811      	bhi.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	e032      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_PCD_EP_DB_Transmit+0x342>
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	e01b      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d117      	bne.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac6:	4413      	add	r3, r2
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	011a      	lsls	r2, r3, #4
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6959      	ldr	r1, [r3, #20]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	891a      	ldrh	r2, [r3, #8]
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f005 fcc6 	bl	800a482 <USB_WritePMA>
 8004af6:	e1d0      	b.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3306      	adds	r3, #6
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d307      	bcc.n	8004b40 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b38:	1ad2      	subs	r2, r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	619a      	str	r2, [r3, #24]
 8004b3e:	e002      	b.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 80c4 	bne.w	8004cd8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d126      	bne.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e01a      	b.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x48c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d116      	bne.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x48c>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	677b      	str	r3, [r7, #116]	; 0x74
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc2:	4413      	add	r3, r2
 8004bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	011a      	lsls	r2, r3, #4
 8004bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bce:	4413      	add	r3, r2
 8004bd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bd4:	673b      	str	r3, [r7, #112]	; 0x70
 8004bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd8:	2200      	movs	r2, #0
 8004bda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d12f      	bne.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c02:	4413      	add	r3, r2
 8004c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	011a      	lsls	r2, r3, #4
 8004c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c12:	4413      	add	r3, r2
 8004c14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e017      	b.n	8004c7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d113      	bne.n	8004c7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c60:	4413      	add	r3, r2
 8004c62:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	011a      	lsls	r2, r3, #4
 8004c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c76:	2200      	movs	r2, #0
 8004c78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f007 fa56 	bl	800c132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 8104 	bne.w	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	8013      	strh	r3, [r2, #0]
 8004cd6:	e0e0      	b.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d121      	bne.n	8004d26 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f040 80b4 	bne.w	8004e9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d48:	441a      	add	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d309      	bcc.n	8004d6e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	621a      	str	r2, [r3, #32]
 8004d6c:	e015      	b.n	8004d9a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d107      	bne.n	8004d86 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004d76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d84:	e009      	b.n	8004d9a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d155      	bne.n	8004e54 <HAL_PCD_EP_DB_Transmit+0x704>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbc:	4413      	add	r3, r2
 8004dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	011a      	lsls	r2, r3, #4
 8004dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc8:	4413      	add	r3, r2
 8004dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dce:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d112      	bne.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	e044      	b.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8004e00:	d811      	bhi.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e14:	3301      	adds	r3, #1
 8004e16:	657b      	str	r3, [r7, #84]	; 0x54
 8004e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e22:	801a      	strh	r2, [r3, #0]
 8004e24:	e02f      	b.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e50:	801a      	strh	r2, [r3, #0]
 8004e52:	e018      	b.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d114      	bne.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6a:	4413      	add	r3, r2
 8004e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	011a      	lsls	r2, r3, #4
 8004e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e76:	4413      	add	r3, r2
 8004e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6959      	ldr	r1, [r3, #20]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	895a      	ldrh	r2, [r3, #10]
 8004e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f005 faf4 	bl	800a482 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb4:	823b      	strh	r3, [r7, #16]
 8004eb6:	8a3b      	ldrh	r3, [r7, #16]
 8004eb8:	f083 0310 	eor.w	r3, r3, #16
 8004ebc:	823b      	strh	r3, [r7, #16]
 8004ebe:	8a3b      	ldrh	r3, [r7, #16]
 8004ec0:	f083 0320 	eor.w	r3, r3, #32
 8004ec4:	823b      	strh	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8a3b      	ldrh	r3, [r7, #16]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3788      	adds	r7, #136	; 0x88
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	817b      	strh	r3, [r7, #10]
 8004f02:	4613      	mov	r3, r2
 8004f04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e009      	b.n	8004f3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f2a:	897a      	ldrh	r2, [r7, #10]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f3e:	893b      	ldrh	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	80da      	strh	r2, [r3, #6]
 8004f52:	e00b      	b.n	8004f6c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2201      	movs	r2, #1
 8004f58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f001 b823 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 817d 	beq.w	80052b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004fb8:	4bbc      	ldr	r3, [pc, #752]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fc4:	4bb9      	ldr	r3, [pc, #740]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d15c      	bne.n	800508a <HAL_RCC_OscConfig+0x10e>
 8004fd0:	4bb6      	ldr	r3, [pc, #728]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d155      	bne.n	800508a <HAL_RCC_OscConfig+0x10e>
 8004fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fe2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004fea:	fa93 f3a3 	rbit	r3, r3
 8004fee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ff2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff6:	fab3 f383 	clz	r3, r3
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d102      	bne.n	8005010 <HAL_RCC_OscConfig+0x94>
 800500a:	4ba8      	ldr	r3, [pc, #672]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	e015      	b.n	800503c <HAL_RCC_OscConfig+0xc0>
 8005010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005014:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800501c:	fa93 f3a3 	rbit	r3, r3
 8005020:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005028:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800502c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005030:	fa93 f3a3 	rbit	r3, r3
 8005034:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005038:	4b9c      	ldr	r3, [pc, #624]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005040:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005044:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005048:	fa92 f2a2 	rbit	r2, r2
 800504c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005050:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005054:	fab2 f282 	clz	r2, r2
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	f042 0220 	orr.w	r2, r2, #32
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	f002 021f 	and.w	r2, r2, #31
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f202 	lsl.w	r2, r1, r2
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 811f 	beq.w	80052b0 <HAL_RCC_OscConfig+0x334>
 8005072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8116 	bne.w	80052b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f000 bfaf 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509a:	d106      	bne.n	80050aa <HAL_RCC_OscConfig+0x12e>
 800509c:	4b83      	ldr	r3, [pc, #524]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a82      	ldr	r2, [pc, #520]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	e036      	b.n	8005118 <HAL_RCC_OscConfig+0x19c>
 80050aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x158>
 80050ba:	4b7c      	ldr	r3, [pc, #496]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a7b      	ldr	r2, [pc, #492]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b79      	ldr	r3, [pc, #484]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a78      	ldr	r2, [pc, #480]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e021      	b.n	8005118 <HAL_RCC_OscConfig+0x19c>
 80050d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x184>
 80050e6:	4b71      	ldr	r3, [pc, #452]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a70      	ldr	r2, [pc, #448]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b6e      	ldr	r3, [pc, #440]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a6d      	ldr	r2, [pc, #436]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0x19c>
 8005100:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a69      	ldr	r2, [pc, #420]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b67      	ldr	r3, [pc, #412]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a66      	ldr	r2, [pc, #408]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005116:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005118:	4b64      	ldr	r3, [pc, #400]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f023 020f 	bic.w	r2, r3, #15
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	495f      	ldr	r1, [pc, #380]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 800512e:	4313      	orrs	r3, r2
 8005130:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d059      	beq.n	80051f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7fd f811 	bl	8002168 <HAL_GetTick>
 8005146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	e00a      	b.n	8005162 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fd f80c 	bl	8002168 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b64      	cmp	r3, #100	; 0x64
 800515a:	d902      	bls.n	8005162 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	f000 bf43 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005166:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005176:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d102      	bne.n	8005194 <HAL_RCC_OscConfig+0x218>
 800518e:	4b47      	ldr	r3, [pc, #284]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	e015      	b.n	80051c0 <HAL_RCC_OscConfig+0x244>
 8005194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005198:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80051a0:	fa93 f3a3 	rbit	r3, r3
 80051a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80051a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80051b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80051c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80051cc:	fa92 f2a2 	rbit	r2, r2
 80051d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80051d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80051d8:	fab2 f282 	clz	r2, r2
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	f042 0220 	orr.w	r2, r2, #32
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	f002 021f 	and.w	r2, r2, #31
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f202 	lsl.w	r2, r1, r2
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ab      	beq.n	800514c <HAL_RCC_OscConfig+0x1d0>
 80051f4:	e05d      	b.n	80052b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fc ffb7 	bl	8002168 <HAL_GetTick>
 80051fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fe:	e00a      	b.n	8005216 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005200:	f7fc ffb2 	bl	8002168 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	; 0x64
 800520e:	d902      	bls.n	8005216 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	f000 bee9 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800521a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800522a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d102      	bne.n	8005248 <HAL_RCC_OscConfig+0x2cc>
 8005242:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	e015      	b.n	8005274 <HAL_RCC_OscConfig+0x2f8>
 8005248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800524c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005250:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800525c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005260:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005264:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005278:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800527c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005280:	fa92 f2a2 	rbit	r2, r2
 8005284:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005288:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800528c:	fab2 f282 	clz	r2, r2
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	f042 0220 	orr.w	r2, r2, #32
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	f002 021f 	and.w	r2, r2, #31
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f202 	lsl.w	r2, r1, r2
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ab      	bne.n	8005200 <HAL_RCC_OscConfig+0x284>
 80052a8:	e003      	b.n	80052b2 <HAL_RCC_OscConfig+0x336>
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 817d 	beq.w	80055c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80052c8:	4ba6      	ldr	r3, [pc, #664]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80052d4:	4ba3      	ldr	r3, [pc, #652]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d172      	bne.n	80053c6 <HAL_RCC_OscConfig+0x44a>
 80052e0:	4ba0      	ldr	r3, [pc, #640]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d16c      	bne.n	80053c6 <HAL_RCC_OscConfig+0x44a>
 80052ec:	2302      	movs	r3, #2
 80052ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80052fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	fab3 f383 	clz	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d102      	bne.n	800531c <HAL_RCC_OscConfig+0x3a0>
 8005316:	4b93      	ldr	r3, [pc, #588]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	e013      	b.n	8005344 <HAL_RCC_OscConfig+0x3c8>
 800531c:	2302      	movs	r3, #2
 800531e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005326:	fa93 f3a3 	rbit	r3, r3
 800532a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800532e:	2302      	movs	r3, #2
 8005330:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005334:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005338:	fa93 f3a3 	rbit	r3, r3
 800533c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005340:	4b88      	ldr	r3, [pc, #544]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2202      	movs	r2, #2
 8005346:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800534a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800534e:	fa92 f2a2 	rbit	r2, r2
 8005352:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005356:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800535a:	fab2 f282 	clz	r2, r2
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	f042 0220 	orr.w	r2, r2, #32
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	f002 021f 	and.w	r2, r2, #31
 800536a:	2101      	movs	r1, #1
 800536c:	fa01 f202 	lsl.w	r2, r1, r2
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCC_OscConfig+0x410>
 8005376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d002      	beq.n	800538c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f000 be2e 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538c:	4b75      	ldr	r3, [pc, #468]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	21f8      	movs	r1, #248	; 0xf8
 80053a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80053aa:	fa91 f1a1 	rbit	r1, r1
 80053ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80053b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80053b6:	fab1 f181 	clz	r1, r1
 80053ba:	b2c9      	uxtb	r1, r1
 80053bc:	408b      	lsls	r3, r1
 80053be:	4969      	ldr	r1, [pc, #420]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c4:	e0fd      	b.n	80055c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8088 	beq.w	80054e8 <HAL_RCC_OscConfig+0x56c>
 80053d8:	2301      	movs	r3, #1
 80053da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80053e2:	fa93 f3a3 	rbit	r3, r3
 80053e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80053ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	461a      	mov	r2, r3
 8005400:	2301      	movs	r3, #1
 8005402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fc feb0 	bl	8002168 <HAL_GetTick>
 8005408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540e:	f7fc feab 	bl	8002168 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d902      	bls.n	8005424 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	f000 bde2 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005424:	2302      	movs	r3, #2
 8005426:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800542e:	fa93 f3a3 	rbit	r3, r3
 8005432:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005436:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <HAL_RCC_OscConfig+0x4d8>
 800544e:	4b45      	ldr	r3, [pc, #276]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	e013      	b.n	800547c <HAL_RCC_OscConfig+0x500>
 8005454:	2302      	movs	r3, #2
 8005456:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005466:	2302      	movs	r3, #2
 8005468:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800546c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005478:	4b3a      	ldr	r3, [pc, #232]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	2202      	movs	r2, #2
 800547e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005482:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005486:	fa92 f2a2 	rbit	r2, r2
 800548a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800548e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005492:	fab2 f282 	clz	r2, r2
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f042 0220 	orr.w	r2, r2, #32
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f002 021f 	and.w	r2, r2, #31
 80054a2:	2101      	movs	r1, #1
 80054a4:	fa01 f202 	lsl.w	r2, r1, r2
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0af      	beq.n	800540e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ae:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	21f8      	movs	r1, #248	; 0xf8
 80054c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80054cc:	fa91 f1a1 	rbit	r1, r1
 80054d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80054d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80054d8:	fab1 f181 	clz	r1, r1
 80054dc:	b2c9      	uxtb	r1, r1
 80054de:	408b      	lsls	r3, r1
 80054e0:	4920      	ldr	r1, [pc, #128]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
 80054e6:	e06c      	b.n	80055c2 <HAL_RCC_OscConfig+0x646>
 80054e8:	2301      	movs	r3, #1
 80054ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80054fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fe:	fab3 f383 	clz	r3, r3
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005508:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	461a      	mov	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fc fe28 	bl	8002168 <HAL_GetTick>
 8005518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551c:	e00a      	b.n	8005534 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551e:	f7fc fe23 	bl	8002168 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d902      	bls.n	8005534 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	f000 bd5a 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005534:	2302      	movs	r3, #2
 8005536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800553e:	fa93 f3a3 	rbit	r3, r3
 8005542:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d104      	bne.n	8005568 <HAL_RCC_OscConfig+0x5ec>
 800555e:	4b01      	ldr	r3, [pc, #4]	; (8005564 <HAL_RCC_OscConfig+0x5e8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	e015      	b.n	8005590 <HAL_RCC_OscConfig+0x614>
 8005564:	40021000 	.word	0x40021000
 8005568:	2302      	movs	r3, #2
 800556a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800557a:	2302      	movs	r3, #2
 800557c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005584:	fa93 f3a3 	rbit	r3, r3
 8005588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800558c:	4bc8      	ldr	r3, [pc, #800]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2202      	movs	r2, #2
 8005592:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005596:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800559a:	fa92 f2a2 	rbit	r2, r2
 800559e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80055a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80055a6:	fab2 f282 	clz	r2, r2
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	f042 0220 	orr.w	r2, r2, #32
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	f002 021f 	and.w	r2, r2, #31
 80055b6:	2101      	movs	r1, #1
 80055b8:	fa01 f202 	lsl.w	r2, r1, r2
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ad      	bne.n	800551e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8110 	beq.w	80057f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d079      	beq.n	80056dc <HAL_RCC_OscConfig+0x760>
 80055e8:	2301      	movs	r3, #1
 80055ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80055fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	4bab      	ldr	r3, [pc, #684]	; (80058b4 <HAL_RCC_OscConfig+0x938>)
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	461a      	mov	r2, r3
 800560e:	2301      	movs	r3, #1
 8005610:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005612:	f7fc fda9 	bl	8002168 <HAL_GetTick>
 8005616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561c:	f7fc fda4 	bl	8002168 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d902      	bls.n	8005632 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	f000 bcdb 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005632:	2302      	movs	r3, #2
 8005634:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800563c:	fa93 f3a3 	rbit	r3, r3
 8005640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005648:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800564c:	2202      	movs	r2, #2
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005654:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	fa93 f2a3 	rbit	r2, r3
 800565e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005670:	2202      	movs	r2, #2
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	fa93 f2a3 	rbit	r2, r3
 8005682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005686:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800568a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568c:	4b88      	ldr	r3, [pc, #544]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 800568e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005694:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005698:	2102      	movs	r1, #2
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	fa93 f1a3 	rbit	r1, r3
 80056aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056b2:	6019      	str	r1, [r3, #0]
  return result;
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2101      	movs	r1, #1
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0a0      	beq.n	800561c <HAL_RCC_OscConfig+0x6a0>
 80056da:	e08d      	b.n	80057f8 <HAL_RCC_OscConfig+0x87c>
 80056dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	fa93 f2a3 	rbit	r2, r3
 80056f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80056fe:	601a      	str	r2, [r3, #0]
  return result;
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005708:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	4b68      	ldr	r3, [pc, #416]	; (80058b4 <HAL_RCC_OscConfig+0x938>)
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	461a      	mov	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571e:	f7fc fd23 	bl	8002168 <HAL_GetTick>
 8005722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005726:	e00a      	b.n	800573e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005728:	f7fc fd1e 	bl	8002168 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d902      	bls.n	800573e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	f000 bc55 	b.w	8005fe8 <HAL_RCC_OscConfig+0x106c>
 800573e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005742:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005746:	2202      	movs	r2, #2
 8005748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005766:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800576a:	2202      	movs	r2, #2
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005772:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578e:	2202      	movs	r2, #2
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	fa93 f2a3 	rbit	r2, r3
 80057a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80057a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057aa:	4b41      	ldr	r3, [pc, #260]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 80057ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80057b6:	2102      	movs	r1, #2
 80057b8:	6019      	str	r1, [r3, #0]
 80057ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	fa93 f1a3 	rbit	r1, r3
 80057c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80057d0:	6019      	str	r1, [r3, #0]
  return result;
 80057d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	fab3 f383 	clz	r3, r3
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d197      	bne.n	8005728 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 81a1 	beq.w	8005b50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005814:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d116      	bne.n	800584e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005820:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582a:	61d3      	str	r3, [r2, #28]
 800582c:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005838:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005842:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005846:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <HAL_RCC_OscConfig+0x93c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11a      	bne.n	8005890 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800585a:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <HAL_RCC_OscConfig+0x93c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_RCC_OscConfig+0x93c>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005864:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005866:	f7fc fc7f 	bl	8002168 <HAL_GetTick>
 800586a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586e:	e009      	b.n	8005884 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005870:	f7fc fc7a 	bl	8002168 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e3b1      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <HAL_RCC_OscConfig+0x93c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ef      	beq.n	8005870 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d10d      	bne.n	80058bc <HAL_RCC_OscConfig+0x940>
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	4a02      	ldr	r2, [pc, #8]	; (80058b0 <HAL_RCC_OscConfig+0x934>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6213      	str	r3, [r2, #32]
 80058ac:	e03c      	b.n	8005928 <HAL_RCC_OscConfig+0x9ac>
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000
 80058b4:	10908120 	.word	0x10908120
 80058b8:	40007000 	.word	0x40007000
 80058bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <HAL_RCC_OscConfig+0x96a>
 80058cc:	4bc1      	ldr	r3, [pc, #772]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	4ac0      	ldr	r2, [pc, #768]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	6213      	str	r3, [r2, #32]
 80058d8:	4bbe      	ldr	r3, [pc, #760]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	4abd      	ldr	r2, [pc, #756]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80058de:	f023 0304 	bic.w	r3, r3, #4
 80058e2:	6213      	str	r3, [r2, #32]
 80058e4:	e020      	b.n	8005928 <HAL_RCC_OscConfig+0x9ac>
 80058e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x994>
 80058f6:	4bb7      	ldr	r3, [pc, #732]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4ab6      	ldr	r2, [pc, #728]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	6213      	str	r3, [r2, #32]
 8005902:	4bb4      	ldr	r3, [pc, #720]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4ab3      	ldr	r2, [pc, #716]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	6213      	str	r3, [r2, #32]
 800590e:	e00b      	b.n	8005928 <HAL_RCC_OscConfig+0x9ac>
 8005910:	4bb0      	ldr	r3, [pc, #704]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	4aaf      	ldr	r2, [pc, #700]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	6213      	str	r3, [r2, #32]
 800591c:	4bad      	ldr	r3, [pc, #692]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4aac      	ldr	r2, [pc, #688]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005922:	f023 0304 	bic.w	r3, r3, #4
 8005926:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8081 	beq.w	8005a3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593a:	f7fc fc15 	bl	8002168 <HAL_GetTick>
 800593e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005942:	e00b      	b.n	800595c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005944:	f7fc fc10 	bl	8002168 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f241 3288 	movw	r2, #5000	; 0x1388
 8005954:	4293      	cmp	r3, r2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e345      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
 800595c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005960:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005964:	2202      	movs	r2, #2
 8005966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	fa93 f2a3 	rbit	r2, r3
 8005976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005984:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005988:	2202      	movs	r2, #2
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005990:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	fa93 f2a3 	rbit	r2, r3
 800599a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800599e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80059a2:	601a      	str	r2, [r3, #0]
  return result;
 80059a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80059ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ae:	fab3 f383 	clz	r3, r3
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d102      	bne.n	80059c8 <HAL_RCC_OscConfig+0xa4c>
 80059c2:	4b84      	ldr	r3, [pc, #528]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	e013      	b.n	80059f0 <HAL_RCC_OscConfig+0xa74>
 80059c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80059d0:	2202      	movs	r2, #2
 80059d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	4b79      	ldr	r3, [pc, #484]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80059f8:	2102      	movs	r1, #2
 80059fa:	6011      	str	r1, [r2, #0]
 80059fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	fa92 f1a2 	rbit	r1, r2
 8005a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005a12:	6011      	str	r1, [r2, #0]
  return result;
 8005a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a18:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	fab2 f282 	clz	r2, r2
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	f002 021f 	and.w	r2, r2, #31
 8005a2e:	2101      	movs	r1, #1
 8005a30:	fa01 f202 	lsl.w	r2, r1, r2
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d084      	beq.n	8005944 <HAL_RCC_OscConfig+0x9c8>
 8005a3a:	e07f      	b.n	8005b3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3c:	f7fc fb94 	bl	8002168 <HAL_GetTick>
 8005a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a44:	e00b      	b.n	8005a5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7fc fb8f 	bl	8002168 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e2c4      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005a66:	2202      	movs	r2, #2
 8005a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	fa93 f2a3 	rbit	r2, r3
 8005a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	fa93 f2a3 	rbit	r2, r3
 8005a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005aa4:	601a      	str	r2, [r3, #0]
  return result;
 8005aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aaa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005aae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab0:	fab3 f383 	clz	r3, r3
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f043 0302 	orr.w	r3, r3, #2
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d102      	bne.n	8005aca <HAL_RCC_OscConfig+0xb4e>
 8005ac4:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	e013      	b.n	8005af2 <HAL_RCC_OscConfig+0xb76>
 8005aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ace:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ada:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	fa93 f2a3 	rbit	r2, r3
 8005ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	4b39      	ldr	r3, [pc, #228]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005af6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005afa:	2102      	movs	r1, #2
 8005afc:	6011      	str	r1, [r2, #0]
 8005afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	fa92 f1a2 	rbit	r1, r2
 8005b0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005b14:	6011      	str	r1, [r2, #0]
  return result;
 8005b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	fab2 f282 	clz	r2, r2
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	f002 021f 	and.w	r2, r2, #31
 8005b30:	2101      	movs	r1, #1
 8005b32:	fa01 f202 	lsl.w	r2, r1, r2
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d184      	bne.n	8005a46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d105      	bne.n	8005b50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b44:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8242 	beq.w	8005fe6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <HAL_RCC_OscConfig+0xc58>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	f000 8213 	beq.w	8005f96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	f040 8162 	bne.w	8005e46 <HAL_RCC_OscConfig+0xeca>
 8005b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	fa93 f2a3 	rbit	r2, r3
 8005b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005ba6:	601a      	str	r2, [r3, #0]
  return result;
 8005ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005bb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	fab3 f383 	clz	r3, r3
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc8:	f7fc face 	bl	8002168 <HAL_GetTick>
 8005bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bd0:	e00c      	b.n	8005bec <HAL_RCC_OscConfig+0xc70>
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fc fac6 	bl	8002168 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e1fd      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fa93 f2a3 	rbit	r2, r3
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005c10:	601a      	str	r2, [r3, #0]
  return result;
 8005c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005c1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1c:	fab3 f383 	clz	r3, r3
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d102      	bne.n	8005c36 <HAL_RCC_OscConfig+0xcba>
 8005c30:	4bb0      	ldr	r3, [pc, #704]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	e027      	b.n	8005c86 <HAL_RCC_OscConfig+0xd0a>
 8005c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	fa93 f2a3 	rbit	r2, r3
 8005c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	fa93 f2a3 	rbit	r2, r3
 8005c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	4b9c      	ldr	r3, [pc, #624]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005c8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c92:	6011      	str	r1, [r2, #0]
 8005c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	fa92 f1a2 	rbit	r1, r2
 8005ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ca6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005caa:	6011      	str	r1, [r2, #0]
  return result;
 8005cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cb0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	fab2 f282 	clz	r2, r2
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	f042 0220 	orr.w	r2, r2, #32
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	f002 021f 	and.w	r2, r2, #31
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d182      	bne.n	8005bd8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd2:	4b88      	ldr	r3, [pc, #544]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	497f      	ldr	r1, [pc, #508]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
 8005cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	fa93 f2a3 	rbit	r2, r3
 8005d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005d1e:	601a      	str	r2, [r3, #0]
  return result;
 8005d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005d28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d2a:	fab3 f383 	clz	r3, r3
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fc fa12 	bl	8002168 <HAL_GetTick>
 8005d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d48:	e009      	b.n	8005d5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4a:	f7fc fa0d 	bl	8002168 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e144      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	fa93 f2a3 	rbit	r2, r3
 8005d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005d82:	601a      	str	r2, [r3, #0]
  return result;
 8005d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005d8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d102      	bne.n	8005da8 <HAL_RCC_OscConfig+0xe2c>
 8005da2:	4b54      	ldr	r3, [pc, #336]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	e027      	b.n	8005df8 <HAL_RCC_OscConfig+0xe7c>
 8005da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	fa93 f2a3 	rbit	r2, r3
 8005dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	fa93 f2a3 	rbit	r2, r3
 8005dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	4b3f      	ldr	r3, [pc, #252]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dfc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005e00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	fa92 f1a2 	rbit	r1, r2
 8005e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005e1c:	6011      	str	r1, [r2, #0]
  return result;
 8005e1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	fab2 f282 	clz	r2, r2
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	f042 0220 	orr.w	r2, r2, #32
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	f002 021f 	and.w	r2, r2, #31
 8005e38:	2101      	movs	r1, #1
 8005e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d082      	beq.n	8005d4a <HAL_RCC_OscConfig+0xdce>
 8005e44:	e0cf      	b.n	8005fe6 <HAL_RCC_OscConfig+0x106a>
 8005e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005e4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	fa93 f2a3 	rbit	r2, r3
 8005e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005e6a:	601a      	str	r2, [r3, #0]
  return result;
 8005e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005e74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fc f96c 	bl	8002168 <HAL_GetTick>
 8005e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e94:	e009      	b.n	8005eaa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e96:	f7fc f967 	bl	8002168 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e09e      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
 8005eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ebc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	fa93 f2a3 	rbit	r2, r3
 8005ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005ece:	601a      	str	r2, [r3, #0]
  return result;
 8005ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005ed8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eda:	fab3 f383 	clz	r3, r3
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d104      	bne.n	8005ef8 <HAL_RCC_OscConfig+0xf7c>
 8005eee:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <HAL_RCC_OscConfig+0xf78>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	e029      	b.n	8005f48 <HAL_RCC_OscConfig+0xfcc>
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	fa93 f2a3 	rbit	r2, r3
 8005f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	fa93 f2a3 	rbit	r2, r3
 8005f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <HAL_RCC_OscConfig+0x1078>)
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	fa92 f1a2 	rbit	r1, r2
 8005f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005f6c:	6011      	str	r1, [r2, #0]
  return result;
 8005f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	fab2 f282 	clz	r2, r2
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	f042 0220 	orr.w	r2, r2, #32
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	f002 021f 	and.w	r2, r2, #31
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d180      	bne.n	8005e96 <HAL_RCC_OscConfig+0xf1a>
 8005f94:	e027      	b.n	8005fe6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e01e      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <HAL_RCC_OscConfig+0x1078>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005fb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005fca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d001      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b09e      	sub	sp, #120	; 0x78
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e162      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b90      	ldr	r3, [pc, #576]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d910      	bls.n	8006040 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 0207 	bic.w	r2, r3, #7
 8006026:	498b      	ldr	r1, [pc, #556]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b89      	ldr	r3, [pc, #548]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e14a      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800604c:	4b82      	ldr	r3, [pc, #520]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	497f      	ldr	r1, [pc, #508]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80dc 	beq.w	8006224 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d13c      	bne.n	80060ee <HAL_RCC_ClockConfig+0xf6>
 8006074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006078:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800607c:	fa93 f3a3 	rbit	r3, r3
 8006080:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006084:	fab3 f383 	clz	r3, r3
 8006088:	b2db      	uxtb	r3, r3
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d102      	bne.n	800609e <HAL_RCC_ClockConfig+0xa6>
 8006098:	4b6f      	ldr	r3, [pc, #444]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	e00f      	b.n	80060be <HAL_RCC_ClockConfig+0xc6>
 800609e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a6:	fa93 f3a3 	rbit	r3, r3
 80060aa:	667b      	str	r3, [r7, #100]	; 0x64
 80060ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b0:	663b      	str	r3, [r7, #96]	; 0x60
 80060b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b4:	fa93 f3a3 	rbit	r3, r3
 80060b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ba:	4b67      	ldr	r3, [pc, #412]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80060c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c6:	fa92 f2a2 	rbit	r2, r2
 80060ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80060cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060ce:	fab2 f282 	clz	r2, r2
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	f042 0220 	orr.w	r2, r2, #32
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	f002 021f 	and.w	r2, r2, #31
 80060de:	2101      	movs	r1, #1
 80060e0:	fa01 f202 	lsl.w	r2, r1, r2
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d17b      	bne.n	80061e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0f3      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d13c      	bne.n	8006170 <HAL_RCC_ClockConfig+0x178>
 80060f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fe:	fa93 f3a3 	rbit	r3, r3
 8006102:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006106:	fab3 f383 	clz	r3, r3
 800610a:	b2db      	uxtb	r3, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d102      	bne.n	8006120 <HAL_RCC_ClockConfig+0x128>
 800611a:	4b4f      	ldr	r3, [pc, #316]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	e00f      	b.n	8006140 <HAL_RCC_ClockConfig+0x148>
 8006120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006124:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006128:	fa93 f3a3 	rbit	r3, r3
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006132:	643b      	str	r3, [r7, #64]	; 0x40
 8006134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006136:	fa93 f3a3 	rbit	r3, r3
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613c:	4b46      	ldr	r3, [pc, #280]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006144:	63ba      	str	r2, [r7, #56]	; 0x38
 8006146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006148:	fa92 f2a2 	rbit	r2, r2
 800614c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800614e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006150:	fab2 f282 	clz	r2, r2
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	f042 0220 	orr.w	r2, r2, #32
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	f002 021f 	and.w	r2, r2, #31
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f202 	lsl.w	r2, r1, r2
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d13a      	bne.n	80061e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0b2      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
 8006170:	2302      	movs	r3, #2
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	fa93 f3a3 	rbit	r3, r3
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617e:	fab3 f383 	clz	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d102      	bne.n	8006198 <HAL_RCC_ClockConfig+0x1a0>
 8006192:	4b31      	ldr	r3, [pc, #196]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	e00d      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1bc>
 8006198:	2302      	movs	r3, #2
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	fa93 f3a3 	rbit	r3, r3
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
 80061a4:	2302      	movs	r3, #2
 80061a6:	623b      	str	r3, [r7, #32]
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	fa93 f3a3 	rbit	r3, r3
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	4b29      	ldr	r3, [pc, #164]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2202      	movs	r2, #2
 80061b6:	61ba      	str	r2, [r7, #24]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	fa92 f2a2 	rbit	r2, r2
 80061be:	617a      	str	r2, [r7, #20]
  return result;
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	fab2 f282 	clz	r2, r2
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	f042 0220 	orr.w	r2, r2, #32
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	f002 021f 	and.w	r2, r2, #31
 80061d2:	2101      	movs	r1, #1
 80061d4:	fa01 f202 	lsl.w	r2, r1, r2
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e079      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e2:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f023 0203 	bic.w	r2, r3, #3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	491a      	ldr	r1, [pc, #104]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f4:	f7fb ffb8 	bl	8002168 <HAL_GetTick>
 80061f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061fc:	f7fb ffb4 	bl	8002168 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	; 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e061      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 020c 	and.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	429a      	cmp	r2, r3
 8006222:	d1eb      	bne.n	80061fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d214      	bcs.n	800625c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 0207 	bic.w	r2, r3, #7
 800623a:	4906      	ldr	r1, [pc, #24]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b04      	ldr	r3, [pc, #16]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d005      	beq.n	800625c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e040      	b.n	80062d6 <HAL_RCC_ClockConfig+0x2de>
 8006254:	40022000 	.word	0x40022000
 8006258:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_RCC_ClockConfig+0x2e8>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	491a      	ldr	r1, [pc, #104]	; (80062e0 <HAL_RCC_ClockConfig+0x2e8>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <HAL_RCC_ClockConfig+0x2e8>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4912      	ldr	r1, [pc, #72]	; (80062e0 <HAL_RCC_ClockConfig+0x2e8>)
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800629a:	f000 f829 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 800629e:	4601      	mov	r1, r0
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <HAL_RCC_ClockConfig+0x2e8>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a8:	22f0      	movs	r2, #240	; 0xf0
 80062aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	fa92 f2a2 	rbit	r2, r2
 80062b2:	60fa      	str	r2, [r7, #12]
  return result;
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	fab2 f282 	clz	r2, r2
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	40d3      	lsrs	r3, r2
 80062be:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <HAL_RCC_ClockConfig+0x2ec>)
 80062c0:	5cd3      	ldrb	r3, [r2, r3]
 80062c2:	fa21 f303 	lsr.w	r3, r1, r3
 80062c6:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <HAL_RCC_ClockConfig+0x2f0>)
 80062c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80062ca:	4b08      	ldr	r3, [pc, #32]	; (80062ec <HAL_RCC_ClockConfig+0x2f4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fb ff06 	bl	80020e0 <HAL_InitTick>
  
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3778      	adds	r7, #120	; 0x78
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000
 80062e4:	0800c6c0 	.word	0x0800c6c0
 80062e8:	20000004 	.word	0x20000004
 80062ec:	20000008 	.word	0x20000008

080062f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b08b      	sub	sp, #44	; 0x2c
 80062f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800630a:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b04      	cmp	r3, #4
 8006318:	d002      	beq.n	8006320 <HAL_RCC_GetSysClockFreq+0x30>
 800631a:	2b08      	cmp	r3, #8
 800631c:	d003      	beq.n	8006326 <HAL_RCC_GetSysClockFreq+0x36>
 800631e:	e03c      	b.n	800639a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006320:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006322:	623b      	str	r3, [r7, #32]
      break;
 8006324:	e03c      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800632c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006330:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	fa92 f2a2 	rbit	r2, r2
 8006338:	607a      	str	r2, [r7, #4]
  return result;
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	fab2 f282 	clz	r2, r2
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	40d3      	lsrs	r3, r2
 8006344:	4a1c      	ldr	r2, [pc, #112]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006346:	5cd3      	ldrb	r3, [r2, r3]
 8006348:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800634a:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	220f      	movs	r2, #15
 8006354:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	fa92 f2a2 	rbit	r2, r2
 800635c:	60fa      	str	r2, [r7, #12]
  return result;
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	fab2 f282 	clz	r2, r2
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	40d3      	lsrs	r3, r2
 8006368:	4a14      	ldr	r2, [pc, #80]	; (80063bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800636a:	5cd3      	ldrb	r3, [r2, r3]
 800636c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006378:	4a0e      	ldr	r2, [pc, #56]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
 8006388:	e004      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	623b      	str	r3, [r7, #32]
      break;
 8006398:	e002      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800639c:	623b      	str	r3, [r7, #32]
      break;
 800639e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	372c      	adds	r7, #44	; 0x2c
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000
 80063b4:	007a1200 	.word	0x007a1200
 80063b8:	0800c6d8 	.word	0x0800c6d8
 80063bc:	0800c6e8 	.word	0x0800c6e8
 80063c0:	003d0900 	.word	0x003d0900

080063c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c8:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063ca:	681b      	ldr	r3, [r3, #0]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20000004 	.word	0x20000004

080063dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80063e2:	f7ff ffef 	bl	80063c4 <HAL_RCC_GetHCLKFreq>
 80063e6:	4601      	mov	r1, r0
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80063f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	fa92 f2a2 	rbit	r2, r2
 80063fc:	603a      	str	r2, [r7, #0]
  return result;
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	fab2 f282 	clz	r2, r2
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	40d3      	lsrs	r3, r2
 8006408:	4a04      	ldr	r2, [pc, #16]	; (800641c <HAL_RCC_GetPCLK1Freq+0x40>)
 800640a:	5cd3      	ldrb	r3, [r2, r3]
 800640c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40021000 	.word	0x40021000
 800641c:	0800c6d0 	.word	0x0800c6d0

08006420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006426:	f7ff ffcd 	bl	80063c4 <HAL_RCC_GetHCLKFreq>
 800642a:	4601      	mov	r1, r0
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006434:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	fa92 f2a2 	rbit	r2, r2
 8006440:	603a      	str	r2, [r7, #0]
  return result;
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	fab2 f282 	clz	r2, r2
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	40d3      	lsrs	r3, r2
 800644c:	4a04      	ldr	r2, [pc, #16]	; (8006460 <HAL_RCC_GetPCLK2Freq+0x40>)
 800644e:	5cd3      	ldrb	r3, [r2, r3]
 8006450:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40021000 	.word	0x40021000
 8006460:	0800c6d0 	.word	0x0800c6d0

08006464 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b092      	sub	sp, #72	; 0x48
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80d4 	beq.w	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006488:	4b4e      	ldr	r3, [pc, #312]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10e      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006494:	4b4b      	ldr	r3, [pc, #300]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	4a4a      	ldr	r2, [pc, #296]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800649a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649e:	61d3      	str	r3, [r2, #28]
 80064a0:	4b48      	ldr	r3, [pc, #288]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b2:	4b45      	ldr	r3, [pc, #276]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d118      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064be:	4b42      	ldr	r3, [pc, #264]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a41      	ldr	r2, [pc, #260]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ca:	f7fb fe4d 	bl	8002168 <HAL_GetTick>
 80064ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	e008      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d2:	f7fb fe49 	bl	8002168 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b64      	cmp	r3, #100	; 0x64
 80064de:	d901      	bls.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e169      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e4:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f0:	4b34      	ldr	r3, [pc, #208]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8084 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800650c:	429a      	cmp	r2, r3
 800650e:	d07c      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006510:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800651a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	fa93 f3a3 	rbit	r3, r3
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800652a:	fab3 f383 	clz	r3, r3
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	4b26      	ldr	r3, [pc, #152]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	461a      	mov	r2, r3
 800653a:	2301      	movs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800654e:	fab3 f383 	clz	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	4b1d      	ldr	r3, [pc, #116]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	461a      	mov	r2, r3
 800655e:	2300      	movs	r3, #0
 8006560:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006562:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006566:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04b      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006572:	f7fb fdf9 	bl	8002168 <HAL_GetTick>
 8006576:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006578:	e00a      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fb fdf5 	bl	8002168 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f241 3288 	movw	r2, #5000	; 0x1388
 8006588:	4293      	cmp	r3, r2
 800658a:	d901      	bls.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e113      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006590:	2302      	movs	r3, #2
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	fa93 f3a3 	rbit	r3, r3
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
 800659c:	2302      	movs	r3, #2
 800659e:	623b      	str	r3, [r7, #32]
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	fa93 f3a3 	rbit	r3, r3
 80065a6:	61fb      	str	r3, [r7, #28]
  return result;
 80065a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065aa:	fab3 f383 	clz	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f043 0302 	orr.w	r3, r3, #2
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d108      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80065be:	4b01      	ldr	r3, [pc, #4]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	e00d      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40007000 	.word	0x40007000
 80065cc:	10908100 	.word	0x10908100
 80065d0:	2302      	movs	r3, #2
 80065d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	fa93 f3a3 	rbit	r3, r3
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	4b78      	ldr	r3, [pc, #480]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	2202      	movs	r2, #2
 80065e2:	613a      	str	r2, [r7, #16]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	fa92 f2a2 	rbit	r2, r2
 80065ea:	60fa      	str	r2, [r7, #12]
  return result;
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	fab2 f282 	clz	r2, r2
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	f002 021f 	and.w	r2, r2, #31
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f202 	lsl.w	r2, r1, r2
 8006604:	4013      	ands	r3, r2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0b7      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800660a:	4b6d      	ldr	r3, [pc, #436]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	496a      	ldr	r1, [pc, #424]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006618:	4313      	orrs	r3, r2
 800661a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800661c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006620:	2b01      	cmp	r3, #1
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006624:	4b66      	ldr	r3, [pc, #408]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	4a65      	ldr	r2, [pc, #404]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	f023 0203 	bic.w	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	495d      	ldr	r1, [pc, #372]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800664a:	4313      	orrs	r3, r2
 800664c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800665a:	4b59      	ldr	r3, [pc, #356]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	4956      	ldr	r1, [pc, #344]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006668:	4313      	orrs	r3, r2
 800666a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d008      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006678:	4b51      	ldr	r3, [pc, #324]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	494e      	ldr	r1, [pc, #312]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006696:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f023 0210 	bic.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	4947      	ldr	r1, [pc, #284]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80066b4:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	493f      	ldr	r1, [pc, #252]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066d2:	4b3b      	ldr	r3, [pc, #236]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f023 0220 	bic.w	r2, r3, #32
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	4938      	ldr	r1, [pc, #224]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066f0:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	4930      	ldr	r1, [pc, #192]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	4929      	ldr	r1, [pc, #164]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800671c:	4313      	orrs	r3, r2
 800671e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	4921      	ldr	r1, [pc, #132]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800673a:	4313      	orrs	r3, r2
 800673c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d008      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800674a:	4b1d      	ldr	r3, [pc, #116]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	491a      	ldr	r1, [pc, #104]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	4912      	ldr	r1, [pc, #72]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006786:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	490b      	ldr	r1, [pc, #44]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006794:	4313      	orrs	r3, r2
 8006796:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	4903      	ldr	r1, [pc, #12]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3748      	adds	r7, #72	; 0x48
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40021000 	.word	0x40021000

080067c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e09d      	b.n	8006912 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e6:	d009      	beq.n	80067fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	61da      	str	r2, [r3, #28]
 80067ee:	e005      	b.n	80067fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fb f90c 	bl	8001a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006832:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683c:	d902      	bls.n	8006844 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e002      	b.n	800684a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006848:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006852:	d007      	beq.n	8006864 <HAL_SPI_Init+0xa0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	ea42 0103 	orr.w	r1, r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	f003 0204 	and.w	r2, r3, #4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068e0:	ea42 0103 	orr.w	r1, r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e049      	b.n	80069c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fb f90b 	bl	8001b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 fa95 	bl	8006e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <HAL_TIM_PWM_Start_IT+0x28>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	bf14      	ite	ne
 80069e8:	2301      	movne	r3, #1
 80069ea:	2300      	moveq	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	e03c      	b.n	8006a6a <HAL_TIM_PWM_Start_IT+0xa2>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d109      	bne.n	8006a0a <HAL_TIM_PWM_Start_IT+0x42>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e02f      	b.n	8006a6a <HAL_TIM_PWM_Start_IT+0xa2>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d109      	bne.n	8006a24 <HAL_TIM_PWM_Start_IT+0x5c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	bf14      	ite	ne
 8006a1c:	2301      	movne	r3, #1
 8006a1e:	2300      	moveq	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	e022      	b.n	8006a6a <HAL_TIM_PWM_Start_IT+0xa2>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d109      	bne.n	8006a3e <HAL_TIM_PWM_Start_IT+0x76>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	bf14      	ite	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	2300      	moveq	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	e015      	b.n	8006a6a <HAL_TIM_PWM_Start_IT+0xa2>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d109      	bne.n	8006a58 <HAL_TIM_PWM_Start_IT+0x90>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	e008      	b.n	8006a6a <HAL_TIM_PWM_Start_IT+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	bf14      	ite	ne
 8006a64:	2301      	movne	r3, #1
 8006a66:	2300      	moveq	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0e2      	b.n	8006c38 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <HAL_TIM_PWM_Start_IT+0xba>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a80:	e023      	b.n	8006aca <HAL_TIM_PWM_Start_IT+0x102>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d104      	bne.n	8006a92 <HAL_TIM_PWM_Start_IT+0xca>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a90:	e01b      	b.n	8006aca <HAL_TIM_PWM_Start_IT+0x102>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d104      	bne.n	8006aa2 <HAL_TIM_PWM_Start_IT+0xda>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa0:	e013      	b.n	8006aca <HAL_TIM_PWM_Start_IT+0x102>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b0c      	cmp	r3, #12
 8006aa6:	d104      	bne.n	8006ab2 <HAL_TIM_PWM_Start_IT+0xea>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ab0:	e00b      	b.n	8006aca <HAL_TIM_PWM_Start_IT+0x102>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d104      	bne.n	8006ac2 <HAL_TIM_PWM_Start_IT+0xfa>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac0:	e003      	b.n	8006aca <HAL_TIM_PWM_Start_IT+0x102>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d841      	bhi.n	8006b54 <HAL_TIM_PWM_Start_IT+0x18c>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <HAL_TIM_PWM_Start_IT+0x110>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006b0d 	.word	0x08006b0d
 8006adc:	08006b55 	.word	0x08006b55
 8006ae0:	08006b55 	.word	0x08006b55
 8006ae4:	08006b55 	.word	0x08006b55
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b55 	.word	0x08006b55
 8006af0:	08006b55 	.word	0x08006b55
 8006af4:	08006b55 	.word	0x08006b55
 8006af8:	08006b31 	.word	0x08006b31
 8006afc:	08006b55 	.word	0x08006b55
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006b55 	.word	0x08006b55
 8006b08:	08006b43 	.word	0x08006b43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0202 	orr.w	r2, r2, #2
 8006b1a:	60da      	str	r2, [r3, #12]
      break;
 8006b1c:	e01d      	b.n	8006b5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0204 	orr.w	r2, r2, #4
 8006b2c:	60da      	str	r2, [r3, #12]
      break;
 8006b2e:	e014      	b.n	8006b5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0208 	orr.w	r2, r2, #8
 8006b3e:	60da      	str	r2, [r3, #12]
      break;
 8006b40:	e00b      	b.n	8006b5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0210 	orr.w	r2, r2, #16
 8006b50:	60da      	str	r2, [r3, #12]
      break;
 8006b52:	e002      	b.n	8006b5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
      break;
 8006b58:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d16a      	bne.n	8006c36 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2201      	movs	r2, #1
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fcf3 	bl	8007554 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a33      	ldr	r2, [pc, #204]	; (8006c40 <HAL_TIM_PWM_Start_IT+0x278>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a31      	ldr	r2, [pc, #196]	; (8006c44 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00e      	beq.n	8006ba0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a30      	ldr	r2, [pc, #192]	; (8006c48 <HAL_TIM_PWM_Start_IT+0x280>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d009      	beq.n	8006ba0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a2e      	ldr	r2, [pc, #184]	; (8006c4c <HAL_TIM_PWM_Start_IT+0x284>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2d      	ldr	r2, [pc, #180]	; (8006c50 <HAL_TIM_PWM_Start_IT+0x288>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIM_PWM_Start_IT+0x1dc>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <HAL_TIM_PWM_Start_IT+0x1de>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <HAL_TIM_PWM_Start_IT+0x278>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d018      	beq.n	8006bf6 <HAL_TIM_PWM_Start_IT+0x22e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d013      	beq.n	8006bf6 <HAL_TIM_PWM_Start_IT+0x22e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_TIM_PWM_Start_IT+0x22e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_TIM_PWM_Start_IT+0x290>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d009      	beq.n	8006bf6 <HAL_TIM_PWM_Start_IT+0x22e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d004      	beq.n	8006bf6 <HAL_TIM_PWM_Start_IT+0x22e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a15      	ldr	r2, [pc, #84]	; (8006c48 <HAL_TIM_PWM_Start_IT+0x280>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d115      	bne.n	8006c22 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <HAL_TIM_PWM_Start_IT+0x294>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b06      	cmp	r3, #6
 8006c06:	d015      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x26c>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0e:	d011      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c20:	e008      	b.n	8006c34 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e000      	b.n	8006c36 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	00010007 	.word	0x00010007

08006c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e0ff      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b14      	cmp	r3, #20
 8006c8a:	f200 80f0 	bhi.w	8006e6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006e6f 	.word	0x08006e6f
 8006c9c:	08006e6f 	.word	0x08006e6f
 8006ca0:	08006e6f 	.word	0x08006e6f
 8006ca4:	08006d29 	.word	0x08006d29
 8006ca8:	08006e6f 	.word	0x08006e6f
 8006cac:	08006e6f 	.word	0x08006e6f
 8006cb0:	08006e6f 	.word	0x08006e6f
 8006cb4:	08006d6b 	.word	0x08006d6b
 8006cb8:	08006e6f 	.word	0x08006e6f
 8006cbc:	08006e6f 	.word	0x08006e6f
 8006cc0:	08006e6f 	.word	0x08006e6f
 8006cc4:	08006dab 	.word	0x08006dab
 8006cc8:	08006e6f 	.word	0x08006e6f
 8006ccc:	08006e6f 	.word	0x08006e6f
 8006cd0:	08006e6f 	.word	0x08006e6f
 8006cd4:	08006ded 	.word	0x08006ded
 8006cd8:	08006e6f 	.word	0x08006e6f
 8006cdc:	08006e6f 	.word	0x08006e6f
 8006ce0:	08006e6f 	.word	0x08006e6f
 8006ce4:	08006e2d 	.word	0x08006e2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f95a 	bl	8006fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0208 	orr.w	r2, r2, #8
 8006d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0204 	bic.w	r2, r2, #4
 8006d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6999      	ldr	r1, [r3, #24]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	619a      	str	r2, [r3, #24]
      break;
 8006d26:	e0a5      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f9ca 	bl	80070c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6999      	ldr	r1, [r3, #24]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	021a      	lsls	r2, r3, #8
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	619a      	str	r2, [r3, #24]
      break;
 8006d68:	e084      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fa33 	bl	80071dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0208 	orr.w	r2, r2, #8
 8006d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0204 	bic.w	r2, r2, #4
 8006d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	61da      	str	r2, [r3, #28]
      break;
 8006da8:	e064      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fa9b 	bl	80072ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69d9      	ldr	r1, [r3, #28]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	021a      	lsls	r2, r3, #8
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	61da      	str	r2, [r3, #28]
      break;
 8006dea:	e043      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fae4 	bl	80073c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0208 	orr.w	r2, r2, #8
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0204 	bic.w	r2, r2, #4
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e2a:	e023      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fb28 	bl	8007488 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	021a      	lsls	r2, r3, #8
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e6c:	e002      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75fb      	strb	r3, [r7, #23]
      break;
 8006e72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop

08006e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3c      	ldr	r2, [pc, #240]	; (8006f8c <TIM_Base_SetConfig+0x104>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a39      	ldr	r2, [pc, #228]	; (8006f90 <TIM_Base_SetConfig+0x108>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a38      	ldr	r2, [pc, #224]	; (8006f94 <TIM_Base_SetConfig+0x10c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a37      	ldr	r2, [pc, #220]	; (8006f98 <TIM_Base_SetConfig+0x110>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d108      	bne.n	8006ed2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <TIM_Base_SetConfig+0x104>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01b      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d017      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <TIM_Base_SetConfig+0x108>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a29      	ldr	r2, [pc, #164]	; (8006f94 <TIM_Base_SetConfig+0x10c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00f      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a28      	ldr	r2, [pc, #160]	; (8006f98 <TIM_Base_SetConfig+0x110>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <TIM_Base_SetConfig+0x114>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <TIM_Base_SetConfig+0x118>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <TIM_Base_SetConfig+0x11c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d108      	bne.n	8006f24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <TIM_Base_SetConfig+0x104>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_Base_SetConfig+0xe8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a11      	ldr	r2, [pc, #68]	; (8006f98 <TIM_Base_SetConfig+0x110>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_Base_SetConfig+0xe8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a10      	ldr	r2, [pc, #64]	; (8006f9c <TIM_Base_SetConfig+0x114>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_Base_SetConfig+0xe8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0f      	ldr	r2, [pc, #60]	; (8006fa0 <TIM_Base_SetConfig+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_Base_SetConfig+0xe8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <TIM_Base_SetConfig+0x11c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d103      	bne.n	8006f78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	615a      	str	r2, [r3, #20]
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40013400 	.word	0x40013400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 0302 	bic.w	r3, r3, #2
 8006ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a2c      	ldr	r2, [pc, #176]	; (80070b4 <TIM_OC1_SetConfig+0x10c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00f      	beq.n	8007028 <TIM_OC1_SetConfig+0x80>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a2b      	ldr	r2, [pc, #172]	; (80070b8 <TIM_OC1_SetConfig+0x110>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00b      	beq.n	8007028 <TIM_OC1_SetConfig+0x80>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a2a      	ldr	r2, [pc, #168]	; (80070bc <TIM_OC1_SetConfig+0x114>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d007      	beq.n	8007028 <TIM_OC1_SetConfig+0x80>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a29      	ldr	r2, [pc, #164]	; (80070c0 <TIM_OC1_SetConfig+0x118>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_OC1_SetConfig+0x80>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a28      	ldr	r2, [pc, #160]	; (80070c4 <TIM_OC1_SetConfig+0x11c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10c      	bne.n	8007042 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0308 	bic.w	r3, r3, #8
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <TIM_OC1_SetConfig+0x10c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00f      	beq.n	800706a <TIM_OC1_SetConfig+0xc2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1a      	ldr	r2, [pc, #104]	; (80070b8 <TIM_OC1_SetConfig+0x110>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00b      	beq.n	800706a <TIM_OC1_SetConfig+0xc2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a19      	ldr	r2, [pc, #100]	; (80070bc <TIM_OC1_SetConfig+0x114>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d007      	beq.n	800706a <TIM_OC1_SetConfig+0xc2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <TIM_OC1_SetConfig+0x118>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_OC1_SetConfig+0xc2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <TIM_OC1_SetConfig+0x11c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d111      	bne.n	800708e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f023 0210 	bic.w	r2, r3, #16
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0320 	bic.w	r3, r3, #32
 8007116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a28      	ldr	r2, [pc, #160]	; (80071c8 <TIM_OC2_SetConfig+0x100>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_OC2_SetConfig+0x6c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a27      	ldr	r2, [pc, #156]	; (80071cc <TIM_OC2_SetConfig+0x104>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d10d      	bne.n	8007150 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a1d      	ldr	r2, [pc, #116]	; (80071c8 <TIM_OC2_SetConfig+0x100>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00f      	beq.n	8007178 <TIM_OC2_SetConfig+0xb0>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <TIM_OC2_SetConfig+0x104>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00b      	beq.n	8007178 <TIM_OC2_SetConfig+0xb0>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <TIM_OC2_SetConfig+0x108>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d007      	beq.n	8007178 <TIM_OC2_SetConfig+0xb0>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <TIM_OC2_SetConfig+0x10c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC2_SetConfig+0xb0>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <TIM_OC2_SetConfig+0x110>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d113      	bne.n	80071a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800717e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007186:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400
 80071d8:	40014800 	.word	0x40014800

080071dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <TIM_OC3_SetConfig+0xfc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_OC3_SetConfig+0x6a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a26      	ldr	r2, [pc, #152]	; (80072dc <TIM_OC3_SetConfig+0x100>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d10d      	bne.n	8007262 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800724c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007260:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <TIM_OC3_SetConfig+0xfc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <TIM_OC3_SetConfig+0xae>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <TIM_OC3_SetConfig+0x100>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <TIM_OC3_SetConfig+0xae>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a1a      	ldr	r2, [pc, #104]	; (80072e0 <TIM_OC3_SetConfig+0x104>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_OC3_SetConfig+0xae>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a19      	ldr	r2, [pc, #100]	; (80072e4 <TIM_OC3_SetConfig+0x108>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC3_SetConfig+0xae>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <TIM_OC3_SetConfig+0x10c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d113      	bne.n	80072b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40013400 	.word	0x40013400
 80072e0:	40014000 	.word	0x40014000
 80072e4:	40014400 	.word	0x40014400
 80072e8:	40014800 	.word	0x40014800

080072ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800731a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800733a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	031b      	lsls	r3, r3, #12
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a18      	ldr	r2, [pc, #96]	; (80073ac <TIM_OC4_SetConfig+0xc0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00f      	beq.n	8007370 <TIM_OC4_SetConfig+0x84>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a17      	ldr	r2, [pc, #92]	; (80073b0 <TIM_OC4_SetConfig+0xc4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00b      	beq.n	8007370 <TIM_OC4_SetConfig+0x84>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <TIM_OC4_SetConfig+0xc8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d007      	beq.n	8007370 <TIM_OC4_SetConfig+0x84>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <TIM_OC4_SetConfig+0xcc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d003      	beq.n	8007370 <TIM_OC4_SetConfig+0x84>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a14      	ldr	r2, [pc, #80]	; (80073bc <TIM_OC4_SetConfig+0xd0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d109      	bne.n	8007384 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	019b      	lsls	r3, r3, #6
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40013400 	.word	0x40013400
 80073b4:	40014000 	.word	0x40014000
 80073b8:	40014400 	.word	0x40014400
 80073bc:	40014800 	.word	0x40014800

080073c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007404:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a17      	ldr	r2, [pc, #92]	; (8007474 <TIM_OC5_SetConfig+0xb4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_OC5_SetConfig+0x7a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a16      	ldr	r2, [pc, #88]	; (8007478 <TIM_OC5_SetConfig+0xb8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_OC5_SetConfig+0x7a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a15      	ldr	r2, [pc, #84]	; (800747c <TIM_OC5_SetConfig+0xbc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_OC5_SetConfig+0x7a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a14      	ldr	r2, [pc, #80]	; (8007480 <TIM_OC5_SetConfig+0xc0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_OC5_SetConfig+0x7a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <TIM_OC5_SetConfig+0xc4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d109      	bne.n	800744e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007440:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40012c00 	.word	0x40012c00
 8007478:	40013400 	.word	0x40013400
 800747c:	40014000 	.word	0x40014000
 8007480:	40014400 	.word	0x40014400
 8007484:	40014800 	.word	0x40014800

08007488 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	051b      	lsls	r3, r3, #20
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a18      	ldr	r2, [pc, #96]	; (8007540 <TIM_OC6_SetConfig+0xb8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00f      	beq.n	8007504 <TIM_OC6_SetConfig+0x7c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a17      	ldr	r2, [pc, #92]	; (8007544 <TIM_OC6_SetConfig+0xbc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00b      	beq.n	8007504 <TIM_OC6_SetConfig+0x7c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a16      	ldr	r2, [pc, #88]	; (8007548 <TIM_OC6_SetConfig+0xc0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d007      	beq.n	8007504 <TIM_OC6_SetConfig+0x7c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a15      	ldr	r2, [pc, #84]	; (800754c <TIM_OC6_SetConfig+0xc4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_OC6_SetConfig+0x7c>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a14      	ldr	r2, [pc, #80]	; (8007550 <TIM_OC6_SetConfig+0xc8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d109      	bne.n	8007518 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800750a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40013400 	.word	0x40013400
 8007548:	40014000 	.word	0x40014000
 800754c:	40014400 	.word	0x40014400
 8007550:	40014800 	.word	0x40014800

08007554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2201      	movs	r2, #1
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1a      	ldr	r2, [r3, #32]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	43db      	mvns	r3, r3
 8007576:	401a      	ands	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1a      	ldr	r2, [r3, #32]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	fa01 f303 	lsl.w	r3, r1, r3
 800758c:	431a      	orrs	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
	...

080075a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e063      	b.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2b      	ldr	r2, [pc, #172]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d108      	bne.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007604:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1b      	ldr	r2, [pc, #108]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762a:	d013      	beq.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a18      	ldr	r2, [pc, #96]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a12      	ldr	r2, [pc, #72]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a13      	ldr	r2, [pc, #76]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d10c      	bne.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800765a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	4313      	orrs	r3, r2
 8007664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	40012c00 	.word	0x40012c00
 8007690:	40013400 	.word	0x40013400
 8007694:	40000400 	.word	0x40000400
 8007698:	40000800 	.word	0x40000800
 800769c:	40014000 	.word	0x40014000

080076a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e065      	b.n	8007788 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	041b      	lsls	r3, r3, #16
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a16      	ldr	r2, [pc, #88]	; (8007794 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a14      	ldr	r2, [pc, #80]	; (8007798 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d115      	bne.n	8007776 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40013400 	.word	0x40013400

0800779c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e040      	b.n	8007830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fa faea 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2224      	movs	r2, #36	; 0x24
 80077c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f82c 	bl	8007838 <UART_SetConfig>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e022      	b.n	8007830 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9f6 	bl	8007be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa7d 	bl	8007d28 <UART_CheckIdleState>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007866:	f023 030c 	bic.w	r3, r3, #12
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6812      	ldr	r2, [r2, #0]
 800786e:	6979      	ldr	r1, [r7, #20]
 8007870:	430b      	orrs	r3, r1
 8007872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4aa8      	ldr	r2, [pc, #672]	; (8007b54 <UART_SetConfig+0x31c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d120      	bne.n	80078fa <UART_SetConfig+0xc2>
 80078b8:	4ba7      	ldr	r3, [pc, #668]	; (8007b58 <UART_SetConfig+0x320>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d817      	bhi.n	80078f4 <UART_SetConfig+0xbc>
 80078c4:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x94>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	080078ef 	.word	0x080078ef
 80078d8:	080078e3 	.word	0x080078e3
 80078dc:	2301      	movs	r3, #1
 80078de:	77fb      	strb	r3, [r7, #31]
 80078e0:	e0b5      	b.n	8007a4e <UART_SetConfig+0x216>
 80078e2:	2302      	movs	r3, #2
 80078e4:	77fb      	strb	r3, [r7, #31]
 80078e6:	e0b2      	b.n	8007a4e <UART_SetConfig+0x216>
 80078e8:	2304      	movs	r3, #4
 80078ea:	77fb      	strb	r3, [r7, #31]
 80078ec:	e0af      	b.n	8007a4e <UART_SetConfig+0x216>
 80078ee:	2308      	movs	r3, #8
 80078f0:	77fb      	strb	r3, [r7, #31]
 80078f2:	e0ac      	b.n	8007a4e <UART_SetConfig+0x216>
 80078f4:	2310      	movs	r3, #16
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e0a9      	b.n	8007a4e <UART_SetConfig+0x216>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a97      	ldr	r2, [pc, #604]	; (8007b5c <UART_SetConfig+0x324>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d124      	bne.n	800794e <UART_SetConfig+0x116>
 8007904:	4b94      	ldr	r3, [pc, #592]	; (8007b58 <UART_SetConfig+0x320>)
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800790c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007910:	d011      	beq.n	8007936 <UART_SetConfig+0xfe>
 8007912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007916:	d817      	bhi.n	8007948 <UART_SetConfig+0x110>
 8007918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800791c:	d011      	beq.n	8007942 <UART_SetConfig+0x10a>
 800791e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007922:	d811      	bhi.n	8007948 <UART_SetConfig+0x110>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <UART_SetConfig+0xf8>
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792c:	d006      	beq.n	800793c <UART_SetConfig+0x104>
 800792e:	e00b      	b.n	8007948 <UART_SetConfig+0x110>
 8007930:	2300      	movs	r3, #0
 8007932:	77fb      	strb	r3, [r7, #31]
 8007934:	e08b      	b.n	8007a4e <UART_SetConfig+0x216>
 8007936:	2302      	movs	r3, #2
 8007938:	77fb      	strb	r3, [r7, #31]
 800793a:	e088      	b.n	8007a4e <UART_SetConfig+0x216>
 800793c:	2304      	movs	r3, #4
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e085      	b.n	8007a4e <UART_SetConfig+0x216>
 8007942:	2308      	movs	r3, #8
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e082      	b.n	8007a4e <UART_SetConfig+0x216>
 8007948:	2310      	movs	r3, #16
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e07f      	b.n	8007a4e <UART_SetConfig+0x216>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a83      	ldr	r2, [pc, #524]	; (8007b60 <UART_SetConfig+0x328>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d124      	bne.n	80079a2 <UART_SetConfig+0x16a>
 8007958:	4b7f      	ldr	r3, [pc, #508]	; (8007b58 <UART_SetConfig+0x320>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007964:	d011      	beq.n	800798a <UART_SetConfig+0x152>
 8007966:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800796a:	d817      	bhi.n	800799c <UART_SetConfig+0x164>
 800796c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007970:	d011      	beq.n	8007996 <UART_SetConfig+0x15e>
 8007972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007976:	d811      	bhi.n	800799c <UART_SetConfig+0x164>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <UART_SetConfig+0x14c>
 800797c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007980:	d006      	beq.n	8007990 <UART_SetConfig+0x158>
 8007982:	e00b      	b.n	800799c <UART_SetConfig+0x164>
 8007984:	2300      	movs	r3, #0
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e061      	b.n	8007a4e <UART_SetConfig+0x216>
 800798a:	2302      	movs	r3, #2
 800798c:	77fb      	strb	r3, [r7, #31]
 800798e:	e05e      	b.n	8007a4e <UART_SetConfig+0x216>
 8007990:	2304      	movs	r3, #4
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e05b      	b.n	8007a4e <UART_SetConfig+0x216>
 8007996:	2308      	movs	r3, #8
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e058      	b.n	8007a4e <UART_SetConfig+0x216>
 800799c:	2310      	movs	r3, #16
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e055      	b.n	8007a4e <UART_SetConfig+0x216>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a6f      	ldr	r2, [pc, #444]	; (8007b64 <UART_SetConfig+0x32c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d124      	bne.n	80079f6 <UART_SetConfig+0x1be>
 80079ac:	4b6a      	ldr	r3, [pc, #424]	; (8007b58 <UART_SetConfig+0x320>)
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80079b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079b8:	d011      	beq.n	80079de <UART_SetConfig+0x1a6>
 80079ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079be:	d817      	bhi.n	80079f0 <UART_SetConfig+0x1b8>
 80079c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c4:	d011      	beq.n	80079ea <UART_SetConfig+0x1b2>
 80079c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079ca:	d811      	bhi.n	80079f0 <UART_SetConfig+0x1b8>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <UART_SetConfig+0x1a0>
 80079d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d4:	d006      	beq.n	80079e4 <UART_SetConfig+0x1ac>
 80079d6:	e00b      	b.n	80079f0 <UART_SetConfig+0x1b8>
 80079d8:	2300      	movs	r3, #0
 80079da:	77fb      	strb	r3, [r7, #31]
 80079dc:	e037      	b.n	8007a4e <UART_SetConfig+0x216>
 80079de:	2302      	movs	r3, #2
 80079e0:	77fb      	strb	r3, [r7, #31]
 80079e2:	e034      	b.n	8007a4e <UART_SetConfig+0x216>
 80079e4:	2304      	movs	r3, #4
 80079e6:	77fb      	strb	r3, [r7, #31]
 80079e8:	e031      	b.n	8007a4e <UART_SetConfig+0x216>
 80079ea:	2308      	movs	r3, #8
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	e02e      	b.n	8007a4e <UART_SetConfig+0x216>
 80079f0:	2310      	movs	r3, #16
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e02b      	b.n	8007a4e <UART_SetConfig+0x216>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a5b      	ldr	r2, [pc, #364]	; (8007b68 <UART_SetConfig+0x330>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d124      	bne.n	8007a4a <UART_SetConfig+0x212>
 8007a00:	4b55      	ldr	r3, [pc, #340]	; (8007b58 <UART_SetConfig+0x320>)
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007a08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a0c:	d011      	beq.n	8007a32 <UART_SetConfig+0x1fa>
 8007a0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a12:	d817      	bhi.n	8007a44 <UART_SetConfig+0x20c>
 8007a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a18:	d011      	beq.n	8007a3e <UART_SetConfig+0x206>
 8007a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a1e:	d811      	bhi.n	8007a44 <UART_SetConfig+0x20c>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <UART_SetConfig+0x1f4>
 8007a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a28:	d006      	beq.n	8007a38 <UART_SetConfig+0x200>
 8007a2a:	e00b      	b.n	8007a44 <UART_SetConfig+0x20c>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	77fb      	strb	r3, [r7, #31]
 8007a30:	e00d      	b.n	8007a4e <UART_SetConfig+0x216>
 8007a32:	2302      	movs	r3, #2
 8007a34:	77fb      	strb	r3, [r7, #31]
 8007a36:	e00a      	b.n	8007a4e <UART_SetConfig+0x216>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	77fb      	strb	r3, [r7, #31]
 8007a3c:	e007      	b.n	8007a4e <UART_SetConfig+0x216>
 8007a3e:	2308      	movs	r3, #8
 8007a40:	77fb      	strb	r3, [r7, #31]
 8007a42:	e004      	b.n	8007a4e <UART_SetConfig+0x216>
 8007a44:	2310      	movs	r3, #16
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e001      	b.n	8007a4e <UART_SetConfig+0x216>
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a56:	d15c      	bne.n	8007b12 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8007a58:	7ffb      	ldrb	r3, [r7, #31]
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d827      	bhi.n	8007aae <UART_SetConfig+0x276>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <UART_SetConfig+0x22c>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007a89 	.word	0x08007a89
 8007a68:	08007a91 	.word	0x08007a91
 8007a6c:	08007a99 	.word	0x08007a99
 8007a70:	08007aaf 	.word	0x08007aaf
 8007a74:	08007a9f 	.word	0x08007a9f
 8007a78:	08007aaf 	.word	0x08007aaf
 8007a7c:	08007aaf 	.word	0x08007aaf
 8007a80:	08007aaf 	.word	0x08007aaf
 8007a84:	08007aa7 	.word	0x08007aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a88:	f7fe fca8 	bl	80063dc <HAL_RCC_GetPCLK1Freq>
 8007a8c:	61b8      	str	r0, [r7, #24]
        break;
 8007a8e:	e013      	b.n	8007ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a90:	f7fe fcc6 	bl	8006420 <HAL_RCC_GetPCLK2Freq>
 8007a94:	61b8      	str	r0, [r7, #24]
        break;
 8007a96:	e00f      	b.n	8007ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a98:	4b34      	ldr	r3, [pc, #208]	; (8007b6c <UART_SetConfig+0x334>)
 8007a9a:	61bb      	str	r3, [r7, #24]
        break;
 8007a9c:	e00c      	b.n	8007ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a9e:	f7fe fc27 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 8007aa2:	61b8      	str	r0, [r7, #24]
        break;
 8007aa4:	e008      	b.n	8007ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aaa:	61bb      	str	r3, [r7, #24]
        break;
 8007aac:	e004      	b.n	8007ab8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8084 	beq.w	8007bc8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	005a      	lsls	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	441a      	add	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d916      	bls.n	8007b0c <UART_SetConfig+0x2d4>
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d212      	bcs.n	8007b0c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f023 030f 	bic.w	r3, r3, #15
 8007aee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	89fb      	ldrh	r3, [r7, #14]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	89fa      	ldrh	r2, [r7, #14]
 8007b08:	60da      	str	r2, [r3, #12]
 8007b0a:	e05d      	b.n	8007bc8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	77bb      	strb	r3, [r7, #30]
 8007b10:	e05a      	b.n	8007bc8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b12:	7ffb      	ldrb	r3, [r7, #31]
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d836      	bhi.n	8007b86 <UART_SetConfig+0x34e>
 8007b18:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0x2e8>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b71 	.word	0x08007b71
 8007b2c:	08007b87 	.word	0x08007b87
 8007b30:	08007b77 	.word	0x08007b77
 8007b34:	08007b87 	.word	0x08007b87
 8007b38:	08007b87 	.word	0x08007b87
 8007b3c:	08007b87 	.word	0x08007b87
 8007b40:	08007b7f 	.word	0x08007b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fe fc4a 	bl	80063dc <HAL_RCC_GetPCLK1Freq>
 8007b48:	61b8      	str	r0, [r7, #24]
        break;
 8007b4a:	e021      	b.n	8007b90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b4c:	f7fe fc68 	bl	8006420 <HAL_RCC_GetPCLK2Freq>
 8007b50:	61b8      	str	r0, [r7, #24]
        break;
 8007b52:	e01d      	b.n	8007b90 <UART_SetConfig+0x358>
 8007b54:	40013800 	.word	0x40013800
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	40004400 	.word	0x40004400
 8007b60:	40004800 	.word	0x40004800
 8007b64:	40004c00 	.word	0x40004c00
 8007b68:	40005000 	.word	0x40005000
 8007b6c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <UART_SetConfig+0x3a8>)
 8007b72:	61bb      	str	r3, [r7, #24]
        break;
 8007b74:	e00c      	b.n	8007b90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b76:	f7fe fbbb 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 8007b7a:	61b8      	str	r0, [r7, #24]
        break;
 8007b7c:	e008      	b.n	8007b90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b82:	61bb      	str	r3, [r7, #24]
        break;
 8007b84:	e004      	b.n	8007b90 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8007b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d018      	beq.n	8007bc8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	085a      	lsrs	r2, r3, #1
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	441a      	add	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b0f      	cmp	r3, #15
 8007bb0:	d908      	bls.n	8007bc4 <UART_SetConfig+0x38c>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb8:	d204      	bcs.n	8007bc4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	60da      	str	r2, [r3, #12]
 8007bc2:	e001      	b.n	8007bc8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007bd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3720      	adds	r7, #32
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	007a1200 	.word	0x007a1200

08007be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01a      	beq.n	8007cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce2:	d10a      	bne.n	8007cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d38:	f7fa fa16 	bl	8002168 <HAL_GetTick>
 8007d3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d10e      	bne.n	8007d6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f82d 	bl	8007dba <UART_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e023      	b.n	8007db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d10e      	bne.n	8007d96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f817 	bl	8007dba <UART_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e00d      	b.n	8007db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b09c      	sub	sp, #112	; 0x70
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dca:	e0a5      	b.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	f000 80a1 	beq.w	8007f18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd6:	f7fa f9c7 	bl	8002168 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d302      	bcc.n	8007dec <UART_WaitOnFlagUntilTimeout+0x32>
 8007de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d13e      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e00:	667b      	str	r3, [r7, #100]	; 0x64
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e6      	bne.n	8007dec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	663b      	str	r3, [r7, #96]	; 0x60
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e5      	bne.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e067      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d04f      	beq.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e86:	d147      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ee4:	623a      	str	r2, [r7, #32]
 8007ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	69f9      	ldr	r1, [r7, #28]
 8007eea:	6a3a      	ldr	r2, [r7, #32]
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e5      	bne.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2220      	movs	r2, #32
 8007efc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2220      	movs	r2, #32
 8007f02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e010      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	4013      	ands	r3, r2
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	bf0c      	ite	eq
 8007f28:	2301      	moveq	r3, #1
 8007f2a:	2300      	movne	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	461a      	mov	r2, r3
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	f43f af4a 	beq.w	8007dcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3770      	adds	r7, #112	; 0x70
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e056      	b.n	8008008 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7f9 ff14 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2224      	movs	r2, #36	; 0x24
 8007f74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0201 	bic.w	r2, r2, #1
 8007f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff fc56 	bl	8007838 <UART_SetConfig>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e038      	b.n	8008008 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fe20 	bl	8007be4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	055b      	lsls	r3, r3, #21
 8007fcc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007fe2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	6979      	ldr	r1, [r7, #20]
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff fe91 	bl	8007d28 <UART_CheckIdleState>
 8008006:	4603      	mov	r3, r0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008020:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008024:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008046:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800804a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	b29b      	uxth	r3, r3
 8008058:	43db      	mvns	r3, r3
 800805a:	b29b      	uxth	r3, r3
 800805c:	4013      	ands	r3, r2
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008074:	b084      	sub	sp, #16
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	f107 0014 	add.w	r0, r7, #20
 8008082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	b004      	add	sp, #16
 80080b4:	4770      	bx	lr
	...

080080b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b09d      	sub	sp, #116	; 0x74
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	78db      	ldrb	r3, [r3, #3]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d81f      	bhi.n	800812a <USB_ActivateEndpoint+0x72>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <USB_ActivateEndpoint+0x38>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008101 	.word	0x08008101
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	08008133 	.word	0x08008133
 80080fc:	0800810f 	.word	0x0800810f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800810c:	e012      	b.n	8008134 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800810e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008112:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008116:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800811a:	e00b      	b.n	8008134 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800811c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008120:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008124:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008128:	e004      	b.n	8008134 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008130:	e000      	b.n	8008134 <USB_ActivateEndpoint+0x7c>
      break;
 8008132:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008152:	b29b      	uxth	r3, r3
 8008154:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	b21b      	sxth	r3, r3
 8008166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	b21a      	sxth	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b21b      	sxth	r3, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	b21b      	sxth	r3, r3
 800817a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	441a      	add	r2, r3
 8008188:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800818c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819c:	b29b      	uxth	r3, r3
 800819e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	7b1b      	ldrb	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f040 8149 	bne.w	800843c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 8084 	beq.w	80082bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	4413      	add	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	011a      	lsls	r2, r3, #4
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	88db      	ldrh	r3, [r3, #6]
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	827b      	strh	r3, [r7, #18]
 80081f6:	8a7b      	ldrh	r3, [r7, #18]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01b      	beq.n	8008238 <USB_ActivateEndpoint+0x180>
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008216:	823b      	strh	r3, [r7, #16]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	441a      	add	r2, r3
 8008222:	8a3b      	ldrh	r3, [r7, #16]
 8008224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008234:	b29b      	uxth	r3, r3
 8008236:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	78db      	ldrb	r3, [r3, #3]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d020      	beq.n	8008282 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008256:	81bb      	strh	r3, [r7, #12]
 8008258:	89bb      	ldrh	r3, [r7, #12]
 800825a:	f083 0320 	eor.w	r3, r3, #32
 800825e:	81bb      	strh	r3, [r7, #12]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	89bb      	ldrh	r3, [r7, #12]
 800826c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	b29b      	uxth	r3, r3
 800827e:	8013      	strh	r3, [r2, #0]
 8008280:	e2a6      	b.n	80087d0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008298:	81fb      	strh	r3, [r7, #14]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	441a      	add	r2, r3
 80082a4:	89fb      	ldrh	r3, [r7, #14]
 80082a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	8013      	strh	r3, [r2, #0]
 80082ba:	e289      	b.n	80087d0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	633b      	str	r3, [r7, #48]	; 0x30
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	4413      	add	r3, r2
 80082ce:	633b      	str	r3, [r7, #48]	; 0x30
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	011a      	lsls	r2, r3, #4
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	88db      	ldrh	r3, [r3, #6]
 80082e4:	085b      	lsrs	r3, r3, #1
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	4413      	add	r3, r2
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	011a      	lsls	r2, r3, #4
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	4413      	add	r3, r2
 800830e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d112      	bne.n	8008342 <USB_ActivateEndpoint+0x28a>
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008326:	b29a      	uxth	r2, r3
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	801a      	strh	r2, [r3, #0]
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800833a:	b29a      	uxth	r2, r3
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	e02f      	b.n	80083a2 <USB_ActivateEndpoint+0x2ea>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b3e      	cmp	r3, #62	; 0x3e
 8008348:	d813      	bhi.n	8008372 <USB_ActivateEndpoint+0x2ba>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	66bb      	str	r3, [r7, #104]	; 0x68
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <USB_ActivateEndpoint+0x2ac>
 800835e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008360:	3301      	adds	r3, #1
 8008362:	66bb      	str	r3, [r7, #104]	; 0x68
 8008364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008366:	b29b      	uxth	r3, r3
 8008368:	029b      	lsls	r3, r3, #10
 800836a:	b29a      	uxth	r2, r3
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e017      	b.n	80083a2 <USB_ActivateEndpoint+0x2ea>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	66bb      	str	r3, [r7, #104]	; 0x68
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	2b00      	cmp	r3, #0
 8008384:	d102      	bne.n	800838c <USB_ActivateEndpoint+0x2d4>
 8008386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008388:	3b01      	subs	r3, #1
 800838a:	66bb      	str	r3, [r7, #104]	; 0x68
 800838c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800838e:	b29b      	uxth	r3, r3
 8008390:	029b      	lsls	r3, r3, #10
 8008392:	b29b      	uxth	r3, r3
 8008394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839c:	b29a      	uxth	r2, r3
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80083b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01b      	beq.n	80083f2 <USB_ActivateEndpoint+0x33a>
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d0:	843b      	strh	r3, [r7, #32]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	441a      	add	r2, r3
 80083dc:	8c3b      	ldrh	r3, [r7, #32]
 80083de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008408:	83fb      	strh	r3, [r7, #30]
 800840a:	8bfb      	ldrh	r3, [r7, #30]
 800840c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008410:	83fb      	strh	r3, [r7, #30]
 8008412:	8bfb      	ldrh	r3, [r7, #30]
 8008414:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008418:	83fb      	strh	r3, [r7, #30]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	441a      	add	r2, r3
 8008424:	8bfb      	ldrh	r3, [r7, #30]
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
 800843a:	e1c9      	b.n	80087d0 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	78db      	ldrb	r3, [r3, #3]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d11e      	bne.n	8008482 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29b      	uxth	r3, r3
 8008452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	441a      	add	r2, r3
 8008468:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800846c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008474:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847c:	b29b      	uxth	r3, r3
 800847e:	8013      	strh	r3, [r2, #0]
 8008480:	e01d      	b.n	80084be <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008498:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	441a      	add	r2, r3
 80084a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ce:	4413      	add	r3, r2
 80084d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	011a      	lsls	r2, r3, #4
 80084d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	891b      	ldrh	r3, [r3, #8]
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	657b      	str	r3, [r7, #84]	; 0x54
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008502:	4413      	add	r3, r2
 8008504:	657b      	str	r3, [r7, #84]	; 0x54
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	011a      	lsls	r2, r3, #4
 800850c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800850e:	4413      	add	r3, r2
 8008510:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008514:	653b      	str	r3, [r7, #80]	; 0x50
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	895b      	ldrh	r3, [r3, #10]
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	b29b      	uxth	r3, r3
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008524:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f040 8093 	bne.w	8008656 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008540:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01b      	beq.n	8008584 <USB_ActivateEndpoint+0x4cc>
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	441a      	add	r2, r3
 800856e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800857c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008580:	b29b      	uxth	r3, r3
 8008582:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008592:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01b      	beq.n	80085d4 <USB_ActivateEndpoint+0x51c>
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80085ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80085f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	441a      	add	r2, r3
 800863e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008650:	b29b      	uxth	r3, r3
 8008652:	8013      	strh	r3, [r2, #0]
 8008654:	e0bc      	b.n	80087d0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008666:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800866a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01d      	beq.n	80086ae <USB_ActivateEndpoint+0x5f6>
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	441a      	add	r2, r3
 8008696:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800869a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800869e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80086be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d01d      	beq.n	8008706 <USB_ActivateEndpoint+0x64e>
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	441a      	add	r2, r3
 80086ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d024      	beq.n	8008758 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008724:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800872c:	f083 0320 	eor.w	r3, r3, #32
 8008730:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	441a      	add	r2, r3
 800873e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800874a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800874e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008752:	b29b      	uxth	r3, r3
 8008754:	8013      	strh	r3, [r2, #0]
 8008756:	e01d      	b.n	8008794 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	441a      	add	r2, r3
 800877c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008790:	b29b      	uxth	r3, r3
 8008792:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	441a      	add	r2, r3
 80087b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80087bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80087d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3774      	adds	r7, #116	; 0x74
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b08d      	sub	sp, #52	; 0x34
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	7b1b      	ldrb	r3, [r3, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f040 808e 	bne.w	8008910 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d044      	beq.n	8008886 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	81bb      	strh	r3, [r7, #12]
 800880a:	89bb      	ldrh	r3, [r7, #12]
 800880c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01b      	beq.n	800884c <USB_DeactivateEndpoint+0x6c>
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882a:	817b      	strh	r3, [r7, #10]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	441a      	add	r2, r3
 8008836:	897b      	ldrh	r3, [r7, #10]
 8008838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008844:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800885e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008862:	813b      	strh	r3, [r7, #8]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	441a      	add	r2, r3
 800886e:	893b      	ldrh	r3, [r7, #8]
 8008870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008880:	b29b      	uxth	r3, r3
 8008882:	8013      	strh	r3, [r2, #0]
 8008884:	e192      	b.n	8008bac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	827b      	strh	r3, [r7, #18]
 8008894:	8a7b      	ldrh	r3, [r7, #18]
 8008896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01b      	beq.n	80088d6 <USB_DeactivateEndpoint+0xf6>
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b4:	823b      	strh	r3, [r7, #16]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	441a      	add	r2, r3
 80088c0:	8a3b      	ldrh	r3, [r7, #16]
 80088c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ec:	81fb      	strh	r3, [r7, #14]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	441a      	add	r2, r3
 80088f8:	89fb      	ldrh	r3, [r7, #14]
 80088fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890a:	b29b      	uxth	r3, r3
 800890c:	8013      	strh	r3, [r2, #0]
 800890e:	e14d      	b.n	8008bac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f040 80a5 	bne.w	8008a64 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	843b      	strh	r3, [r7, #32]
 8008928:	8c3b      	ldrh	r3, [r7, #32]
 800892a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01b      	beq.n	800896a <USB_DeactivateEndpoint+0x18a>
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	83fb      	strh	r3, [r7, #30]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	8bfb      	ldrh	r3, [r7, #30]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	83bb      	strh	r3, [r7, #28]
 8008978:	8bbb      	ldrh	r3, [r7, #28]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01b      	beq.n	80089ba <USB_DeactivateEndpoint+0x1da>
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	837b      	strh	r3, [r7, #26]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	441a      	add	r2, r3
 80089a4:	8b7b      	ldrh	r3, [r7, #26]
 80089a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d0:	833b      	strh	r3, [r7, #24]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	441a      	add	r2, r3
 80089dc:	8b3b      	ldrh	r3, [r7, #24]
 80089de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a08:	82fb      	strh	r3, [r7, #22]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	441a      	add	r2, r3
 8008a14:	8afb      	ldrh	r3, [r7, #22]
 8008a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a40:	82bb      	strh	r3, [r7, #20]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	441a      	add	r2, r3
 8008a4c:	8abb      	ldrh	r3, [r7, #20]
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
 8008a62:	e0a3      	b.n	8008bac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008a72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01b      	beq.n	8008ab4 <USB_DeactivateEndpoint+0x2d4>
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	441a      	add	r2, r3
 8008a9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008ac2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01b      	beq.n	8008b04 <USB_DeactivateEndpoint+0x324>
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	441a      	add	r2, r3
 8008b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3734      	adds	r7, #52	; 0x34
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b0c2      	sub	sp, #264	; 0x108
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc8:	6018      	str	r0, [r3, #0]
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f040 867b 	bne.w	80098dc <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d908      	bls.n	8008c14 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c12:	e007      	b.n	8008c24 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	7b1b      	ldrb	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d13a      	bne.n	8008caa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6959      	ldr	r1, [r3, #20]
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	88da      	ldrh	r2, [r3, #6]
 8008c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c56:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	f001 fc11 	bl	800a482 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4413      	add	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	011a      	lsls	r2, r3, #4
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	f000 bde3 	b.w	8009870 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	78db      	ldrb	r3, [r3, #3]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	f040 843a 	bne.w	8009530 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a1a      	ldr	r2, [r3, #32]
 8008cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	f240 83b7 	bls.w	8009448 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	441a      	add	r2, r3
 8008d1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 81b3 	beq.w	80090e2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	633b      	str	r3, [r7, #48]	; 0x30
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	785b      	ldrb	r3, [r3, #1]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d16d      	bne.n	8008e74 <USB_EPStartXfer+0x2ba>
 8008d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	4413      	add	r3, r2
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	011a      	lsls	r2, r3, #4
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	4413      	add	r3, r2
 8008dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d112      	bne.n	8008e02 <USB_EPStartXfer+0x248>
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	801a      	strh	r2, [r3, #0]
 8008e00:	e05d      	b.n	8008ebe <USB_EPStartXfer+0x304>
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e06:	2b3e      	cmp	r3, #62	; 0x3e
 8008e08:	d817      	bhi.n	8008e3a <USB_EPStartXfer+0x280>
 8008e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <USB_EPStartXfer+0x270>
 8008e20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	801a      	strh	r2, [r3, #0]
 8008e38:	e041      	b.n	8008ebe <USB_EPStartXfer+0x304>
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e48:	f003 031f 	and.w	r3, r3, #31
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <USB_EPStartXfer+0x2a0>
 8008e50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e54:	3b01      	subs	r3, #1
 8008e56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	029b      	lsls	r3, r3, #10
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	801a      	strh	r2, [r3, #0]
 8008e72:	e024      	b.n	8008ebe <USB_EPStartXfer+0x304>
 8008e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d11c      	bne.n	8008ebe <USB_EPStartXfer+0x304>
 8008e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	461a      	mov	r2, r3
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	4413      	add	r3, r2
 8008e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	011a      	lsls	r2, r3, #4
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	4413      	add	r3, r2
 8008eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	895b      	ldrh	r3, [r3, #10]
 8008eca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6959      	ldr	r1, [r3, #20]
 8008eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ee4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ee8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008eec:	6800      	ldr	r0, [r0, #0]
 8008eee:	f001 fac8 	bl	800a482 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	695a      	ldr	r2, [r3, #20]
 8008efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f02:	441a      	add	r2, r3
 8008f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6a1a      	ldr	r2, [r3, #32]
 8008f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d90f      	bls.n	8008f4c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6a1a      	ldr	r2, [r3, #32]
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3c:	1ad2      	subs	r2, r2, r3
 8008f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	621a      	str	r2, [r3, #32]
 8008f4a:	e00e      	b.n	8008f6a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	785b      	ldrb	r3, [r3, #1]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d16d      	bne.n	8009056 <USB_EPStartXfer+0x49c>
 8008f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	61bb      	str	r3, [r7, #24]
 8008f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	461a      	mov	r2, r3
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
 8008f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	011a      	lsls	r2, r3, #4
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d112      	bne.n	8008fe4 <USB_EPStartXfer+0x42a>
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	801a      	strh	r2, [r3, #0]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	801a      	strh	r2, [r3, #0]
 8008fe2:	e063      	b.n	80090ac <USB_EPStartXfer+0x4f2>
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8008fea:	d817      	bhi.n	800901c <USB_EPStartXfer+0x462>
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff0:	085b      	lsrs	r3, r3, #1
 8008ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <USB_EPStartXfer+0x452>
 8009002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009006:	3301      	adds	r3, #1
 8009008:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800900c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009010:	b29b      	uxth	r3, r3
 8009012:	029b      	lsls	r3, r3, #10
 8009014:	b29a      	uxth	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	e047      	b.n	80090ac <USB_EPStartXfer+0x4f2>
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <USB_EPStartXfer+0x482>
 8009032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009036:	3b01      	subs	r3, #1
 8009038:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800903c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009040:	b29b      	uxth	r3, r3
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800904e:	b29a      	uxth	r2, r3
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e02a      	b.n	80090ac <USB_EPStartXfer+0x4f2>
 8009056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d122      	bne.n	80090ac <USB_EPStartXfer+0x4f2>
 8009066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009080:	b29b      	uxth	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	4413      	add	r3, r2
 8009088:	623b      	str	r3, [r7, #32]
 800908a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	011a      	lsls	r2, r3, #4
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	4413      	add	r3, r2
 800909c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	891b      	ldrh	r3, [r3, #8]
 80090b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6959      	ldr	r1, [r3, #20]
 80090c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090da:	6800      	ldr	r0, [r0, #0]
 80090dc:	f001 f9d1 	bl	800a482 <USB_WritePMA>
 80090e0:	e3c6      	b.n	8009870 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d16d      	bne.n	80091ce <USB_EPStartXfer+0x614>
 80090f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80090fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800910c:	b29b      	uxth	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009112:	4413      	add	r3, r2
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
 8009116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	011a      	lsls	r2, r3, #4
 8009124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009126:	4413      	add	r3, r2
 8009128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800912c:	647b      	str	r3, [r7, #68]	; 0x44
 800912e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009132:	2b00      	cmp	r3, #0
 8009134:	d112      	bne.n	800915c <USB_EPStartXfer+0x5a2>
 8009136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009140:	b29a      	uxth	r2, r3
 8009142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009154:	b29a      	uxth	r2, r3
 8009156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009158:	801a      	strh	r2, [r3, #0]
 800915a:	e063      	b.n	8009224 <USB_EPStartXfer+0x66a>
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009160:	2b3e      	cmp	r3, #62	; 0x3e
 8009162:	d817      	bhi.n	8009194 <USB_EPStartXfer+0x5da>
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009168:	085b      	lsrs	r3, r3, #1
 800916a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800916e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <USB_EPStartXfer+0x5ca>
 800917a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800917e:	3301      	adds	r3, #1
 8009180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009188:	b29b      	uxth	r3, r3
 800918a:	029b      	lsls	r3, r3, #10
 800918c:	b29a      	uxth	r2, r3
 800918e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009190:	801a      	strh	r2, [r3, #0]
 8009192:	e047      	b.n	8009224 <USB_EPStartXfer+0x66a>
 8009194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a2:	f003 031f 	and.w	r3, r3, #31
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <USB_EPStartXfer+0x5fa>
 80091aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091ae:	3b01      	subs	r3, #1
 80091b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	029b      	lsls	r3, r3, #10
 80091bc:	b29b      	uxth	r3, r3
 80091be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e02a      	b.n	8009224 <USB_EPStartXfer+0x66a>
 80091ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d122      	bne.n	8009224 <USB_EPStartXfer+0x66a>
 80091de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	653b      	str	r3, [r7, #80]	; 0x50
 80091ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fe:	4413      	add	r3, r2
 8009200:	653b      	str	r3, [r7, #80]	; 0x50
 8009202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	011a      	lsls	r2, r3, #4
 8009210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009212:	4413      	add	r3, r2
 8009214:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800921a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921e:	b29a      	uxth	r2, r3
 8009220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009222:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	891b      	ldrh	r3, [r3, #8]
 8009230:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6959      	ldr	r1, [r3, #20]
 8009240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009244:	b29b      	uxth	r3, r3
 8009246:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800924a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800924e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	f001 f915 	bl	800a482 <USB_WritePMA>
            ep->xfer_buff += len;
 8009258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	695a      	ldr	r2, [r3, #20]
 8009264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009268:	441a      	add	r2, r3
 800926a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6a1a      	ldr	r2, [r3, #32]
 8009282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	429a      	cmp	r2, r3
 8009290:	d90f      	bls.n	80092b2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6a1a      	ldr	r2, [r3, #32]
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a2:	1ad2      	subs	r2, r2, r3
 80092a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	621a      	str	r2, [r3, #32]
 80092b0:	e00e      	b.n	80092d0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2200      	movs	r2, #0
 80092ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	643b      	str	r3, [r7, #64]	; 0x40
 80092dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d16d      	bne.n	80093c8 <USB_EPStartXfer+0x80e>
 80092ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009306:	b29b      	uxth	r3, r3
 8009308:	461a      	mov	r2, r3
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	4413      	add	r3, r2
 800930e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	011a      	lsls	r2, r3, #4
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	4413      	add	r3, r2
 8009322:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009326:	637b      	str	r3, [r7, #52]	; 0x34
 8009328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800932c:	2b00      	cmp	r3, #0
 800932e:	d112      	bne.n	8009356 <USB_EPStartXfer+0x79c>
 8009330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800933a:	b29a      	uxth	r2, r3
 800933c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933e:	801a      	strh	r2, [r3, #0]
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b29b      	uxth	r3, r3
 8009346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934e:	b29a      	uxth	r2, r3
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	801a      	strh	r2, [r3, #0]
 8009354:	e05d      	b.n	8009412 <USB_EPStartXfer+0x858>
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935a:	2b3e      	cmp	r3, #62	; 0x3e
 800935c:	d817      	bhi.n	800938e <USB_EPStartXfer+0x7d4>
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009362:	085b      	lsrs	r3, r3, #1
 8009364:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <USB_EPStartXfer+0x7c4>
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	3301      	adds	r3, #1
 800937a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800937e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009382:	b29b      	uxth	r3, r3
 8009384:	029b      	lsls	r3, r3, #10
 8009386:	b29a      	uxth	r2, r3
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	801a      	strh	r2, [r3, #0]
 800938c:	e041      	b.n	8009412 <USB_EPStartXfer+0x858>
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d104      	bne.n	80093ae <USB_EPStartXfer+0x7f4>
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	3b01      	subs	r3, #1
 80093aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	029b      	lsls	r3, r3, #10
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	e024      	b.n	8009412 <USB_EPStartXfer+0x858>
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d11c      	bne.n	8009412 <USB_EPStartXfer+0x858>
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ec:	4413      	add	r3, r2
 80093ee:	643b      	str	r3, [r7, #64]	; 0x40
 80093f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	011a      	lsls	r2, r3, #4
 80093fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009400:	4413      	add	r3, r2
 8009402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940c:	b29a      	uxth	r2, r3
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	895b      	ldrh	r3, [r3, #10]
 800941e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6959      	ldr	r1, [r3, #20]
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009432:	b29b      	uxth	r3, r3
 8009434:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009438:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800943c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009440:	6800      	ldr	r0, [r0, #0]
 8009442:	f001 f81e 	bl	800a482 <USB_WritePMA>
 8009446:	e213      	b.n	8009870 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	b29b      	uxth	r3, r3
 8009476:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	441a      	add	r2, r3
 800949c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80094a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094d4:	4413      	add	r3, r2
 80094d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	011a      	lsls	r2, r3, #4
 80094e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e8:	4413      	add	r3, r2
 80094ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80094f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80094fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	891b      	ldrh	r3, [r3, #8]
 8009506:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800950a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6959      	ldr	r1, [r3, #20]
 8009516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951a:	b29b      	uxth	r3, r3
 800951c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009520:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009524:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009528:	6800      	ldr	r0, [r0, #0]
 800952a:	f000 ffaa 	bl	800a482 <USB_WritePMA>
 800952e:	e19f      	b.n	8009870 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6a1a      	ldr	r2, [r3, #32]
 800953c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009540:	1ad2      	subs	r2, r2, r3
 8009542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800954e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	b29b      	uxth	r3, r3
 800956c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80bc 	beq.w	80096ee <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	673b      	str	r3, [r7, #112]	; 0x70
 8009582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d16d      	bne.n	800966e <USB_EPStartXfer+0xab4>
 8009592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	66bb      	str	r3, [r7, #104]	; 0x68
 800959e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095b2:	4413      	add	r3, r2
 80095b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80095b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	011a      	lsls	r2, r3, #4
 80095c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095c6:	4413      	add	r3, r2
 80095c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095cc:	667b      	str	r3, [r7, #100]	; 0x64
 80095ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d112      	bne.n	80095fc <USB_EPStartXfer+0xa42>
 80095d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e4:	801a      	strh	r2, [r3, #0]
 80095e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095f8:	801a      	strh	r2, [r3, #0]
 80095fa:	e05d      	b.n	80096b8 <USB_EPStartXfer+0xafe>
 80095fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009600:	2b3e      	cmp	r3, #62	; 0x3e
 8009602:	d817      	bhi.n	8009634 <USB_EPStartXfer+0xa7a>
 8009604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800960e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <USB_EPStartXfer+0xa6a>
 800961a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800961e:	3301      	adds	r3, #1
 8009620:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009628:	b29b      	uxth	r3, r3
 800962a:	029b      	lsls	r3, r3, #10
 800962c:	b29a      	uxth	r2, r3
 800962e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009630:	801a      	strh	r2, [r3, #0]
 8009632:	e041      	b.n	80096b8 <USB_EPStartXfer+0xafe>
 8009634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009638:	095b      	lsrs	r3, r3, #5
 800963a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800963e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009642:	f003 031f 	and.w	r3, r3, #31
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <USB_EPStartXfer+0xa9a>
 800964a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800964e:	3b01      	subs	r3, #1
 8009650:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009654:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009658:	b29b      	uxth	r3, r3
 800965a:	029b      	lsls	r3, r3, #10
 800965c:	b29b      	uxth	r3, r3
 800965e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009666:	b29a      	uxth	r2, r3
 8009668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	e024      	b.n	80096b8 <USB_EPStartXfer+0xafe>
 800966e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d11c      	bne.n	80096b8 <USB_EPStartXfer+0xafe>
 800967e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800968c:	b29b      	uxth	r3, r3
 800968e:	461a      	mov	r2, r3
 8009690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009692:	4413      	add	r3, r2
 8009694:	673b      	str	r3, [r7, #112]	; 0x70
 8009696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	011a      	lsls	r2, r3, #4
 80096a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a6:	4413      	add	r3, r2
 80096a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80096b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	895b      	ldrh	r3, [r3, #10]
 80096c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6959      	ldr	r1, [r3, #20]
 80096d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096e6:	6800      	ldr	r0, [r0, #0]
 80096e8:	f000 fecb 	bl	800a482 <USB_WritePMA>
 80096ec:	e0c0      	b.n	8009870 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	785b      	ldrb	r3, [r3, #1]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d16d      	bne.n	80097da <USB_EPStartXfer+0xc20>
 80096fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	67fb      	str	r3, [r7, #124]	; 0x7c
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009718:	b29b      	uxth	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800971e:	4413      	add	r3, r2
 8009720:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	011a      	lsls	r2, r3, #4
 8009730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009732:	4413      	add	r3, r2
 8009734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009738:	67bb      	str	r3, [r7, #120]	; 0x78
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800973e:	2b00      	cmp	r3, #0
 8009740:	d112      	bne.n	8009768 <USB_EPStartXfer+0xbae>
 8009742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800974c:	b29a      	uxth	r2, r3
 800974e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009750:	801a      	strh	r2, [r3, #0]
 8009752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b29b      	uxth	r3, r3
 8009758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800975c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009760:	b29a      	uxth	r2, r3
 8009762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	e069      	b.n	800983c <USB_EPStartXfer+0xc82>
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976c:	2b3e      	cmp	r3, #62	; 0x3e
 800976e:	d817      	bhi.n	80097a0 <USB_EPStartXfer+0xbe6>
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009774:	085b      	lsrs	r3, r3, #1
 8009776:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d004      	beq.n	8009790 <USB_EPStartXfer+0xbd6>
 8009786:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800978a:	3301      	adds	r3, #1
 800978c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009790:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009794:	b29b      	uxth	r3, r3
 8009796:	029b      	lsls	r3, r3, #10
 8009798:	b29a      	uxth	r2, r3
 800979a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	e04d      	b.n	800983c <USB_EPStartXfer+0xc82>
 80097a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ae:	f003 031f 	and.w	r3, r3, #31
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d104      	bne.n	80097c0 <USB_EPStartXfer+0xc06>
 80097b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097ba:	3b01      	subs	r3, #1
 80097bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	029b      	lsls	r3, r3, #10
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	e030      	b.n	800983c <USB_EPStartXfer+0xc82>
 80097da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d128      	bne.n	800983c <USB_EPStartXfer+0xc82>
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009806:	b29b      	uxth	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800980e:	4413      	add	r3, r2
 8009810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	011a      	lsls	r2, r3, #4
 8009822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009826:	4413      	add	r3, r2
 8009828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800982c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009834:	b29a      	uxth	r2, r3
 8009836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800983a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800983c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800984c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6959      	ldr	r1, [r3, #20]
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985c:	b29b      	uxth	r3, r3
 800985e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009862:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009866:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	f000 fe09 	bl	800a482 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009896:	817b      	strh	r3, [r7, #10]
 8009898:	897b      	ldrh	r3, [r7, #10]
 800989a:	f083 0310 	eor.w	r3, r3, #16
 800989e:	817b      	strh	r3, [r7, #10]
 80098a0:	897b      	ldrh	r3, [r7, #10]
 80098a2:	f083 0320 	eor.w	r3, r3, #32
 80098a6:	817b      	strh	r3, [r7, #10]
 80098a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	441a      	add	r2, r3
 80098c2:	897b      	ldrh	r3, [r7, #10]
 80098c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	8013      	strh	r3, [r2, #0]
 80098d8:	f000 bc9f 	b.w	800a21a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80098dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	7b1b      	ldrb	r3, [r3, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f040 80ae 	bne.w	8009a4a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80098ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	429a      	cmp	r2, r3
 8009908:	d917      	bls.n	800993a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800990a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800992a:	1ad2      	subs	r2, r2, r3
 800992c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	619a      	str	r2, [r3, #24]
 8009938:	e00e      	b.n	8009958 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800993a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800994a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2200      	movs	r2, #0
 8009956:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009974:	b29b      	uxth	r3, r3
 8009976:	461a      	mov	r2, r3
 8009978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800997c:	4413      	add	r3, r2
 800997e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	011a      	lsls	r2, r3, #4
 8009990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009994:	4413      	add	r3, r2
 8009996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800999a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d116      	bne.n	80099d4 <USB_EPStartXfer+0xe1a>
 80099a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099d0:	801a      	strh	r2, [r3, #0]
 80099d2:	e3e8      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d8:	2b3e      	cmp	r3, #62	; 0x3e
 80099da:	d818      	bhi.n	8009a0e <USB_EPStartXfer+0xe54>
 80099dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e0:	085b      	lsrs	r3, r3, #1
 80099e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <USB_EPStartXfer+0xe42>
 80099f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099f6:	3301      	adds	r3, #1
 80099f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a0a:	801a      	strh	r2, [r3, #0]
 8009a0c:	e3cb      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
 8009a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1c:	f003 031f 	and.w	r3, r3, #31
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <USB_EPStartXfer+0xe74>
 8009a24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	029b      	lsls	r3, r3, #10
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a46:	801a      	strh	r2, [r3, #0]
 8009a48:	e3ad      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	78db      	ldrb	r3, [r3, #3]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	f040 8200 	bne.w	8009e5c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f040 8091 	bne.w	8009b90 <USB_EPStartXfer+0xfd6>
 8009a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a92:	4413      	add	r3, r2
 8009a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	011a      	lsls	r2, r3, #4
 8009aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009aaa:	4413      	add	r3, r2
 8009aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d116      	bne.n	8009af2 <USB_EPStartXfer+0xf38>
 8009ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009aee:	801a      	strh	r2, [r3, #0]
 8009af0:	e083      	b.n	8009bfa <USB_EPStartXfer+0x1040>
 8009af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	2b3e      	cmp	r3, #62	; 0x3e
 8009b00:	d820      	bhi.n	8009b44 <USB_EPStartXfer+0xf8a>
 8009b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <USB_EPStartXfer+0xf78>
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	029b      	lsls	r3, r3, #10
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	e05a      	b.n	8009bfa <USB_EPStartXfer+0x1040>
 8009b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	095b      	lsrs	r3, r3, #5
 8009b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 031f 	and.w	r3, r3, #31
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <USB_EPStartXfer+0xfba>
 8009b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	029b      	lsls	r3, r3, #10
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	e034      	b.n	8009bfa <USB_EPStartXfer+0x1040>
 8009b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d12c      	bne.n	8009bfa <USB_EPStartXfer+0x1040>
 8009ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	011a      	lsls	r2, r3, #4
 8009bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bdc:	4413      	add	r3, r2
 8009bde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009bf8:	801a      	strh	r2, [r3, #0]
 8009bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	785b      	ldrb	r3, [r3, #1]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f040 8091 	bne.w	8009d3c <USB_EPStartXfer+0x1182>
 8009c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c3e:	4413      	add	r3, r2
 8009c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	011a      	lsls	r2, r3, #4
 8009c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c56:	4413      	add	r3, r2
 8009c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d116      	bne.n	8009c9e <USB_EPStartXfer+0x10e4>
 8009c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c82:	801a      	strh	r2, [r3, #0]
 8009c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c9a:	801a      	strh	r2, [r3, #0]
 8009c9c:	e07c      	b.n	8009d98 <USB_EPStartXfer+0x11de>
 8009c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	2b3e      	cmp	r3, #62	; 0x3e
 8009cac:	d820      	bhi.n	8009cf0 <USB_EPStartXfer+0x1136>
 8009cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	085b      	lsrs	r3, r3, #1
 8009cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d004      	beq.n	8009cde <USB_EPStartXfer+0x1124>
 8009cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd8:	3301      	adds	r3, #1
 8009cda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	029b      	lsls	r3, r3, #10
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	e053      	b.n	8009d98 <USB_EPStartXfer+0x11de>
 8009cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	f003 031f 	and.w	r3, r3, #31
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d104      	bne.n	8009d20 <USB_EPStartXfer+0x1166>
 8009d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	029b      	lsls	r3, r3, #10
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d38:	801a      	strh	r2, [r3, #0]
 8009d3a:	e02d      	b.n	8009d98 <USB_EPStartXfer+0x11de>
 8009d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d125      	bne.n	8009d98 <USB_EPStartXfer+0x11de>
 8009d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d62:	4413      	add	r3, r2
 8009d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	011a      	lsls	r2, r3, #4
 8009d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 81fe 	beq.w	800a1a6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009dca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <USB_EPStartXfer+0x1228>
 8009dd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10d      	bne.n	8009dfe <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009de2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 81db 	bne.w	800a1a6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009df0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 81d4 	bne.w	800a1a6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e24:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	441a      	add	r2, r3
 8009e42:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	8013      	strh	r3, [r2, #0]
 8009e5a:	e1a4      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	78db      	ldrb	r3, [r3, #3]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	f040 819a 	bne.w	800a1a2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d917      	bls.n	8009eba <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699a      	ldr	r2, [r3, #24]
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eaa:	1ad2      	subs	r2, r2, r3
 8009eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	619a      	str	r2, [r3, #24]
 8009eb8:	e00e      	b.n	8009ed8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d178      	bne.n	8009fda <USB_EPStartXfer+0x1420>
 8009ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	011a      	lsls	r2, r3, #4
 8009f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f24:	4413      	add	r3, r2
 8009f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d116      	bne.n	8009f64 <USB_EPStartXfer+0x13aa>
 8009f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f48:	801a      	strh	r2, [r3, #0]
 8009f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	e06b      	b.n	800a03c <USB_EPStartXfer+0x1482>
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f68:	2b3e      	cmp	r3, #62	; 0x3e
 8009f6a:	d818      	bhi.n	8009f9e <USB_EPStartXfer+0x13e4>
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f70:	085b      	lsrs	r3, r3, #1
 8009f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <USB_EPStartXfer+0x13d2>
 8009f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f86:	3301      	adds	r3, #1
 8009f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	029b      	lsls	r3, r3, #10
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e04e      	b.n	800a03c <USB_EPStartXfer+0x1482>
 8009f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa2:	095b      	lsrs	r3, r3, #5
 8009fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fac:	f003 031f 	and.w	r3, r3, #31
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d104      	bne.n	8009fbe <USB_EPStartXfer+0x1404>
 8009fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	029b      	lsls	r3, r3, #10
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fd6:	801a      	strh	r2, [r3, #0]
 8009fd8:	e030      	b.n	800a03c <USB_EPStartXfer+0x1482>
 8009fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d128      	bne.n	800a03c <USB_EPStartXfer+0x1482>
 8009fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a006:	b29b      	uxth	r3, r3
 800a008:	461a      	mov	r2, r3
 800a00a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a00e:	4413      	add	r3, r2
 800a010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	011a      	lsls	r2, r3, #4
 800a022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a026:	4413      	add	r3, r2
 800a028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a02c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	b29a      	uxth	r2, r3
 800a036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d178      	bne.n	800a14c <USB_EPStartXfer+0x1592>
 800a05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a076:	b29b      	uxth	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a07e:	4413      	add	r3, r2
 800a080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	011a      	lsls	r2, r3, #4
 800a092:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a096:	4413      	add	r3, r2
 800a098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a09c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d116      	bne.n	800a0d6 <USB_EPStartXfer+0x151c>
 800a0a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0d2:	801a      	strh	r2, [r3, #0]
 800a0d4:	e067      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0da:	2b3e      	cmp	r3, #62	; 0x3e
 800a0dc:	d818      	bhi.n	800a110 <USB_EPStartXfer+0x1556>
 800a0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e2:	085b      	lsrs	r3, r3, #1
 800a0e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <USB_EPStartXfer+0x1544>
 800a0f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a102:	b29b      	uxth	r3, r3
 800a104:	029b      	lsls	r3, r3, #10
 800a106:	b29a      	uxth	r2, r3
 800a108:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	e04a      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11e:	f003 031f 	and.w	r3, r3, #31
 800a122:	2b00      	cmp	r3, #0
 800a124:	d104      	bne.n	800a130 <USB_EPStartXfer+0x1576>
 800a126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a12a:	3b01      	subs	r3, #1
 800a12c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a134:	b29b      	uxth	r3, r3
 800a136:	029b      	lsls	r3, r3, #10
 800a138:	b29b      	uxth	r3, r3
 800a13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a142:	b29a      	uxth	r2, r3
 800a144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a148:	801a      	strh	r2, [r3, #0]
 800a14a:	e02c      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
 800a14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d124      	bne.n	800a1a6 <USB_EPStartXfer+0x15ec>
 800a15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a172:	4413      	add	r3, r2
 800a174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	011a      	lsls	r2, r3, #4
 800a186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a18a:	4413      	add	r3, r2
 800a18c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a198:	b29a      	uxth	r2, r3
 800a19a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	e001      	b.n	800a1a6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e03a      	b.n	800a21c <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a1d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a1dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	441a      	add	r2, r3
 800a202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a20a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a20e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a216:	b29b      	uxth	r3, r3
 800a218:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	785b      	ldrb	r3, [r3, #1]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d020      	beq.n	800a27a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	b29b      	uxth	r3, r3
 800a246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a24e:	81bb      	strh	r3, [r7, #12]
 800a250:	89bb      	ldrh	r3, [r7, #12]
 800a252:	f083 0310 	eor.w	r3, r3, #16
 800a256:	81bb      	strh	r3, [r7, #12]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	441a      	add	r2, r3
 800a262:	89bb      	ldrh	r3, [r7, #12]
 800a264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a26c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a274:	b29b      	uxth	r3, r3
 800a276:	8013      	strh	r3, [r2, #0]
 800a278:	e01f      	b.n	800a2ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	b29b      	uxth	r3, r3
 800a288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a290:	81fb      	strh	r3, [r7, #14]
 800a292:	89fb      	ldrh	r3, [r7, #14]
 800a294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a298:	81fb      	strh	r3, [r7, #14]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	89fb      	ldrh	r3, [r7, #14]
 800a2a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	7b1b      	ldrb	r3, [r3, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f040 809d 	bne.w	800a416 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d04c      	beq.n	800a37e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	823b      	strh	r3, [r7, #16]
 800a2f2:	8a3b      	ldrh	r3, [r7, #16]
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01b      	beq.n	800a334 <USB_EPClearStall+0x6c>
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a312:	81fb      	strh	r3, [r7, #14]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	441a      	add	r2, r3
 800a31e:	89fb      	ldrh	r3, [r7, #14]
 800a320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a32c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a330:	b29b      	uxth	r3, r3
 800a332:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	78db      	ldrb	r3, [r3, #3]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d06c      	beq.n	800a416 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a352:	81bb      	strh	r3, [r7, #12]
 800a354:	89bb      	ldrh	r3, [r7, #12]
 800a356:	f083 0320 	eor.w	r3, r3, #32
 800a35a:	81bb      	strh	r3, [r7, #12]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	441a      	add	r2, r3
 800a366:	89bb      	ldrh	r3, [r7, #12]
 800a368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a36c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a378:	b29b      	uxth	r3, r3
 800a37a:	8013      	strh	r3, [r2, #0]
 800a37c:	e04b      	b.n	800a416 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	82fb      	strh	r3, [r7, #22]
 800a38c:	8afb      	ldrh	r3, [r7, #22]
 800a38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01b      	beq.n	800a3ce <USB_EPClearStall+0x106>
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ac:	82bb      	strh	r3, [r7, #20]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	441a      	add	r2, r3
 800a3b8:	8abb      	ldrh	r3, [r7, #20]
 800a3ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e4:	827b      	strh	r3, [r7, #18]
 800a3e6:	8a7b      	ldrh	r3, [r7, #18]
 800a3e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3ec:	827b      	strh	r3, [r7, #18]
 800a3ee:	8a7b      	ldrh	r3, [r7, #18]
 800a3f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3f4:	827b      	strh	r3, [r7, #18]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	441a      	add	r2, r3
 800a400:	8a7b      	ldrh	r3, [r7, #18]
 800a402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a40a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a412:	b29b      	uxth	r3, r3
 800a414:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	371c      	adds	r7, #28
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d103      	bne.n	800a43e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2280      	movs	r2, #128	; 0x80
 800a43a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a470:	b29b      	uxth	r3, r3
 800a472:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a474:	68fb      	ldr	r3, [r7, #12]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a482:	b480      	push	{r7}
 800a484:	b08d      	sub	sp, #52	; 0x34
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	4611      	mov	r1, r2
 800a48e:	461a      	mov	r2, r3
 800a490:	460b      	mov	r3, r1
 800a492:	80fb      	strh	r3, [r7, #6]
 800a494:	4613      	mov	r3, r2
 800a496:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a498:	88bb      	ldrh	r3, [r7, #4]
 800a49a:	3301      	adds	r3, #1
 800a49c:	085b      	lsrs	r3, r3, #1
 800a49e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4a8:	88fb      	ldrh	r3, [r7, #6]
 800a4aa:	005a      	lsls	r2, r3, #1
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4ba:	e01e      	b.n	800a4fa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	021b      	lsls	r3, r3, #8
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	3302      	adds	r3, #2
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	3302      	adds	r3, #2
 800a4ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1dd      	bne.n	800a4bc <USB_WritePMA+0x3a>
  }
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	3734      	adds	r7, #52	; 0x34
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a50e:	b480      	push	{r7}
 800a510:	b08b      	sub	sp, #44	; 0x2c
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	4611      	mov	r1, r2
 800a51a:	461a      	mov	r2, r3
 800a51c:	460b      	mov	r3, r1
 800a51e:	80fb      	strh	r3, [r7, #6]
 800a520:	4613      	mov	r3, r2
 800a522:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a524:	88bb      	ldrh	r3, [r7, #4]
 800a526:	085b      	lsrs	r3, r3, #1
 800a528:	b29b      	uxth	r3, r3
 800a52a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	005a      	lsls	r2, r3, #1
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a540:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
 800a546:	e01b      	b.n	800a580 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	3302      	adds	r3, #2
 800a554:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	3301      	adds	r3, #1
 800a562:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	0a1b      	lsrs	r3, r3, #8
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	3301      	adds	r3, #1
 800a572:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	3302      	adds	r3, #2
 800a578:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	3b01      	subs	r3, #1
 800a57e:	627b      	str	r3, [r7, #36]	; 0x24
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e0      	bne.n	800a548 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a586:	88bb      	ldrh	r3, [r7, #4]
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d007      	beq.n	800a5a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a5a2:	bf00      	nop
 800a5a4:	372c      	adds	r7, #44	; 0x2c
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	7c1b      	ldrb	r3, [r3, #16]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d115      	bne.n	800a5f2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	2181      	movs	r1, #129	; 0x81
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fe93 	bl	800c2fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5de:	2202      	movs	r2, #2
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 fe89 	bl	800c2fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a5f0:	e012      	b.n	800a618 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5f2:	2340      	movs	r3, #64	; 0x40
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	2181      	movs	r1, #129	; 0x81
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fe7e 	bl	800c2fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a604:	2340      	movs	r3, #64	; 0x40
 800a606:	2202      	movs	r2, #2
 800a608:	2101      	movs	r1, #1
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fe75 	bl	800c2fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a618:	2308      	movs	r3, #8
 800a61a:	2203      	movs	r2, #3
 800a61c:	2182      	movs	r1, #130	; 0x82
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 fe6b 	bl	800c2fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a62a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a62e:	f001 ff8d 	bl	800c54c <USBD_static_malloc>
 800a632:	4602      	mov	r2, r0
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a644:	2301      	movs	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
 800a648:	e026      	b.n	800a698 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a650:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2200      	movs	r2, #0
 800a668:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	7c1b      	ldrb	r3, [r3, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d109      	bne.n	800a688 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a67a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a67e:	2101      	movs	r1, #1
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 ff2c 	bl	800c4de <USBD_LL_PrepareReceive>
 800a686:	e007      	b.n	800a698 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a68e:	2340      	movs	r3, #64	; 0x40
 800a690:	2101      	movs	r1, #1
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 ff23 	bl	800c4de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a698:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a6b2:	2181      	movs	r1, #129	; 0x81
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 fe46 	bl	800c346 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fe3f 	bl	800c346 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a6d0:	2182      	movs	r1, #130	; 0x82
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 fe37 	bl	800c346 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f001 ff35 	bl	800c568 <USBD_static_free>
    pdev->pClassData = NULL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a706:	7bfb      	ldrb	r3, [r7, #15]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a720:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a736:	2b00      	cmp	r3, #0
 800a738:	d039      	beq.n	800a7ae <USBD_CDC_Setup+0x9e>
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	d17f      	bne.n	800a83e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	88db      	ldrh	r3, [r3, #6]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d029      	beq.n	800a79a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da11      	bge.n	800a774 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a75c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	88d2      	ldrh	r2, [r2, #6]
 800a762:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a764:	6939      	ldr	r1, [r7, #16]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	88db      	ldrh	r3, [r3, #6]
 800a76a:	461a      	mov	r2, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 f9e4 	bl	800bb3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a772:	e06b      	b.n	800a84c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	785a      	ldrb	r2, [r3, #1]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	88db      	ldrh	r3, [r3, #6]
 800a782:	b2da      	uxtb	r2, r3
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a78a:	6939      	ldr	r1, [r7, #16]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	88db      	ldrh	r3, [r3, #6]
 800a790:	461a      	mov	r2, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f001 f9ff 	bl	800bb96 <USBD_CtlPrepareRx>
      break;
 800a798:	e058      	b.n	800a84c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	7850      	ldrb	r0, [r2, #1]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	4798      	blx	r3
      break;
 800a7ac:	e04e      	b.n	800a84c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b0b      	cmp	r3, #11
 800a7b4:	d02e      	beq.n	800a814 <USBD_CDC_Setup+0x104>
 800a7b6:	2b0b      	cmp	r3, #11
 800a7b8:	dc38      	bgt.n	800a82c <USBD_CDC_Setup+0x11c>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <USBD_CDC_Setup+0xb4>
 800a7be:	2b0a      	cmp	r3, #10
 800a7c0:	d014      	beq.n	800a7ec <USBD_CDC_Setup+0xdc>
 800a7c2:	e033      	b.n	800a82c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d107      	bne.n	800a7de <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a7ce:	f107 030c 	add.w	r3, r7, #12
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f001 f9af 	bl	800bb3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7dc:	e02e      	b.n	800a83c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 f93f 	bl	800ba64 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ea:	e027      	b.n	800a83c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d107      	bne.n	800a806 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7f6:	f107 030f 	add.w	r3, r7, #15
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 f99b 	bl	800bb3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a804:	e01a      	b.n	800a83c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 f92b 	bl	800ba64 <USBD_CtlError>
            ret = USBD_FAIL;
 800a80e:	2302      	movs	r3, #2
 800a810:	75fb      	strb	r3, [r7, #23]
          break;
 800a812:	e013      	b.n	800a83c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d00d      	beq.n	800a83a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 f91f 	bl	800ba64 <USBD_CtlError>
            ret = USBD_FAIL;
 800a826:	2302      	movs	r3, #2
 800a828:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a82a:	e006      	b.n	800a83a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 f918 	bl	800ba64 <USBD_CtlError>
          ret = USBD_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	75fb      	strb	r3, [r7, #23]
          break;
 800a838:	e000      	b.n	800a83c <USBD_CDC_Setup+0x12c>
          break;
 800a83a:	bf00      	nop
      }
      break;
 800a83c:	e006      	b.n	800a84c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f001 f90f 	bl	800ba64 <USBD_CtlError>
      ret = USBD_FAIL;
 800a846:	2302      	movs	r3, #2
 800a848:	75fb      	strb	r3, [r7, #23]
      break;
 800a84a:	bf00      	nop
  }

  return ret;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	460b      	mov	r3, r1
 800a860:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a868:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a870:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d03a      	beq.n	800a8f2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a87c:	78fa      	ldrb	r2, [r7, #3]
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	331c      	adds	r3, #28
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d029      	beq.n	800a8e6 <USBD_CDC_DataIn+0x90>
 800a892:	78fa      	ldrb	r2, [r7, #3]
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	440b      	add	r3, r1
 800a8a0:	331c      	adds	r3, #28
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	78f9      	ldrb	r1, [r7, #3]
 800a8a6:	68b8      	ldr	r0, [r7, #8]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	4403      	add	r3, r0
 800a8b2:	3338      	adds	r3, #56	; 0x38
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d110      	bne.n	800a8e6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a8c4:	78fa      	ldrb	r2, [r7, #3]
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	331c      	adds	r3, #28
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8d8:	78f9      	ldrb	r1, [r7, #3]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2200      	movs	r2, #0
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 fdda 	bl	800c498 <USBD_LL_Transmit>
 800a8e4:	e003      	b.n	800a8ee <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e000      	b.n	800a8f4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a8f2:	2302      	movs	r3, #2
  }
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 fe05 	bl	800c524 <USBD_LL_GetRxDataSize>
 800a91a:	4602      	mov	r2, r0
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00d      	beq.n	800a948 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a940:	4611      	mov	r1, r2
 800a942:	4798      	blx	r3

    return USBD_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	e000      	b.n	800a94a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a948:	2302      	movs	r3, #2
  }
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a960:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d015      	beq.n	800a998 <USBD_CDC_EP0_RxReady+0x46>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a972:	2bff      	cmp	r3, #255	; 0xff
 800a974:	d010      	beq.n	800a998 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a984:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a98c:	b292      	uxth	r2, r2
 800a98e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	22ff      	movs	r2, #255	; 0xff
 800a994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
	...

0800a9a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2243      	movs	r2, #67	; 0x43
 800a9b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a9b2:	4b03      	ldr	r3, [pc, #12]	; (800a9c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	20000098 	.word	0x20000098

0800a9c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2243      	movs	r2, #67	; 0x43
 800a9d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a9d2:	4b03      	ldr	r3, [pc, #12]	; (800a9e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	20000054 	.word	0x20000054

0800a9e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2243      	movs	r2, #67	; 0x43
 800a9f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a9f2:	4b03      	ldr	r3, [pc, #12]	; (800aa00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	200000dc 	.word	0x200000dc

0800aa04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	220a      	movs	r2, #10
 800aa10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800aa12:	4b03      	ldr	r3, [pc, #12]	; (800aa20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	20000010 	.word	0x20000010

0800aa24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b087      	sub	sp, #28
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa70:	88fa      	ldrh	r2, [r7, #6]
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa96:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aabc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d017      	beq.n	800aaf8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7c1b      	ldrb	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d109      	bne.n	800aae4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aada:	2101      	movs	r1, #1
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fcfe 	bl	800c4de <USBD_LL_PrepareReceive>
 800aae2:	e007      	b.n	800aaf4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaea:	2340      	movs	r3, #64	; 0x40
 800aaec:	2101      	movs	r1, #1
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 fcf5 	bl	800c4de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e000      	b.n	800aafa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aaf8:	2302      	movs	r3, #2
  }
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab16:	2302      	movs	r3, #2
 800ab18:	e01a      	b.n	800ab50 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	79fa      	ldrb	r2, [r7, #7]
 800ab46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f001 fb61 	bl	800c210 <USBD_LL_Init>

  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d006      	beq.n	800ab7a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
 800ab78:	e001      	b.n	800ab7e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 fb95 	bl	800c2c4 <USBD_LL_Start>

  return USBD_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800abc6:	2302      	movs	r3, #2
 800abc8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00c      	beq.n	800abee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	4611      	mov	r1, r2
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800abee:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	4611      	mov	r1, r2
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	4798      	blx	r3

  return USBD_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b082      	sub	sp, #8
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 feda 	bl	800b9ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac44:	461a      	mov	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d016      	beq.n	800ac88 <USBD_LL_SetupStage+0x6a>
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d81c      	bhi.n	800ac98 <USBD_LL_SetupStage+0x7a>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <USBD_LL_SetupStage+0x4a>
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d008      	beq.n	800ac78 <USBD_LL_SetupStage+0x5a>
 800ac66:	e017      	b.n	800ac98 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f9cd 	bl	800b010 <USBD_StdDevReq>
      break;
 800ac76:	e01a      	b.n	800acae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa2f 	bl	800b0e4 <USBD_StdItfReq>
      break;
 800ac86:	e012      	b.n	800acae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fa6f 	bl	800b174 <USBD_StdEPReq>
      break;
 800ac96:	e00a      	b.n	800acae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 fb6c 	bl	800c384 <USBD_LL_StallEP>
      break;
 800acac:	bf00      	nop
  }

  return USBD_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	460b      	mov	r3, r1
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800acc6:	7afb      	ldrb	r3, [r7, #11]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d14b      	bne.n	800ad64 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800acd2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d134      	bne.n	800ad48 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	68da      	ldr	r2, [r3, #12]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d919      	bls.n	800ad1e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	1ad2      	subs	r2, r2, r3
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	68da      	ldr	r2, [r3, #12]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d203      	bcs.n	800ad0c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	e002      	b.n	800ad12 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	461a      	mov	r2, r3
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 ff5b 	bl	800bbd2 <USBD_CtlContinueRx>
 800ad1c:	e038      	b.n	800ad90 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d105      	bne.n	800ad40 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 ff58 	bl	800bbf6 <USBD_CtlSendStatus>
 800ad46:	e023      	b.n	800ad90 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d11e      	bne.n	800ad90 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f001 fb11 	bl	800c384 <USBD_LL_StallEP>
 800ad62:	e015      	b.n	800ad90 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00d      	beq.n	800ad8c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d108      	bne.n	800ad8c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	7afa      	ldrb	r2, [r7, #11]
 800ad84:	4611      	mov	r1, r2
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	4798      	blx	r3
 800ad8a:	e001      	b.n	800ad90 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e000      	b.n	800ad92 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b086      	sub	sp, #24
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	460b      	mov	r3, r1
 800ada4:	607a      	str	r2, [r7, #4]
 800ada6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ada8:	7afb      	ldrb	r3, [r7, #11]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d17f      	bne.n	800aeae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3314      	adds	r3, #20
 800adb2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d15c      	bne.n	800ae78 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d915      	bls.n	800adf6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	68da      	ldr	r2, [r3, #12]
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	1ad2      	subs	r2, r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	b29b      	uxth	r3, r3
 800adde:	461a      	mov	r2, r3
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fec5 	bl	800bb72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ade8:	2300      	movs	r3, #0
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f001 fb75 	bl	800c4de <USBD_LL_PrepareReceive>
 800adf4:	e04e      	b.n	800ae94 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	6912      	ldr	r2, [r2, #16]
 800adfe:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae02:	fb01 f202 	mul.w	r2, r1, r2
 800ae06:	1a9b      	subs	r3, r3, r2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11c      	bne.n	800ae46 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d316      	bcc.n	800ae46 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	689a      	ldr	r2, [r3, #8]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d20f      	bcs.n	800ae46 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae26:	2200      	movs	r2, #0
 800ae28:	2100      	movs	r1, #0
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 fea1 	bl	800bb72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f001 fb4d 	bl	800c4de <USBD_LL_PrepareReceive>
 800ae44:	e026      	b.n	800ae94 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00a      	beq.n	800ae68 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d105      	bne.n	800ae68 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ae68:	2180      	movs	r1, #128	; 0x80
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f001 fa8a 	bl	800c384 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 fed3 	bl	800bc1c <USBD_CtlReceiveStatus>
 800ae76:	e00d      	b.n	800ae94 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae7e:	2b04      	cmp	r3, #4
 800ae80:	d004      	beq.n	800ae8c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d103      	bne.n	800ae94 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ae8c:	2180      	movs	r1, #128	; 0x80
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f001 fa78 	bl	800c384 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d11d      	bne.n	800aeda <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fe80 	bl	800aba4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aeac:	e015      	b.n	800aeda <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00d      	beq.n	800aed6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d108      	bne.n	800aed6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	7afa      	ldrb	r2, [r7, #11]
 800aece:	4611      	mov	r1, r2
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	4798      	blx	r3
 800aed4:	e001      	b.n	800aeda <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aed6:	2302      	movs	r3, #2
 800aed8:	e000      	b.n	800aedc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeec:	2340      	movs	r3, #64	; 0x40
 800aeee:	2200      	movs	r2, #0
 800aef0:	2100      	movs	r1, #0
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 fa01 	bl	800c2fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2240      	movs	r2, #64	; 0x40
 800af04:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	2200      	movs	r2, #0
 800af0c:	2180      	movs	r1, #128	; 0x80
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 f9f3 	bl	800c2fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2240      	movs	r2, #64	; 0x40
 800af1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d009      	beq.n	800af5c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6852      	ldr	r2, [r2, #4]
 800af54:	b2d2      	uxtb	r2, r2
 800af56:	4611      	mov	r1, r2
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
  }

  return USBD_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af66:	b480      	push	{r7}
 800af68:	b083      	sub	sp, #12
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	78fa      	ldrb	r2, [r7, #3]
 800af76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2204      	movs	r2, #4
 800af9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afbe:	2b04      	cmp	r3, #4
 800afc0:	d105      	bne.n	800afce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afea:	2b03      	cmp	r3, #3
 800afec:	d10b      	bne.n	800b006 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d005      	beq.n	800b006 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b026:	2b40      	cmp	r3, #64	; 0x40
 800b028:	d005      	beq.n	800b036 <USBD_StdDevReq+0x26>
 800b02a:	2b40      	cmp	r3, #64	; 0x40
 800b02c:	d84f      	bhi.n	800b0ce <USBD_StdDevReq+0xbe>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d009      	beq.n	800b046 <USBD_StdDevReq+0x36>
 800b032:	2b20      	cmp	r3, #32
 800b034:	d14b      	bne.n	800b0ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	4798      	blx	r3
      break;
 800b044:	e048      	b.n	800b0d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	785b      	ldrb	r3, [r3, #1]
 800b04a:	2b09      	cmp	r3, #9
 800b04c:	d839      	bhi.n	800b0c2 <USBD_StdDevReq+0xb2>
 800b04e:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <USBD_StdDevReq+0x44>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b0a5 	.word	0x0800b0a5
 800b058:	0800b0b9 	.word	0x0800b0b9
 800b05c:	0800b0c3 	.word	0x0800b0c3
 800b060:	0800b0af 	.word	0x0800b0af
 800b064:	0800b0c3 	.word	0x0800b0c3
 800b068:	0800b087 	.word	0x0800b087
 800b06c:	0800b07d 	.word	0x0800b07d
 800b070:	0800b0c3 	.word	0x0800b0c3
 800b074:	0800b09b 	.word	0x0800b09b
 800b078:	0800b091 	.word	0x0800b091
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f9dc 	bl	800b43c <USBD_GetDescriptor>
          break;
 800b084:	e022      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fb3f 	bl	800b70c <USBD_SetAddress>
          break;
 800b08e:	e01d      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fb7e 	bl	800b794 <USBD_SetConfig>
          break;
 800b098:	e018      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fc07 	bl	800b8b0 <USBD_GetConfig>
          break;
 800b0a2:	e013      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fc37 	bl	800b91a <USBD_GetStatus>
          break;
 800b0ac:	e00e      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fc65 	bl	800b980 <USBD_SetFeature>
          break;
 800b0b6:	e009      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fc74 	bl	800b9a8 <USBD_ClrFeature>
          break;
 800b0c0:	e004      	b.n	800b0cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fccd 	bl	800ba64 <USBD_CtlError>
          break;
 800b0ca:	bf00      	nop
      }
      break;
 800b0cc:	e004      	b.n	800b0d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fcc7 	bl	800ba64 <USBD_CtlError>
      break;
 800b0d6:	bf00      	nop
  }

  return ret;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop

0800b0e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0fa:	2b40      	cmp	r3, #64	; 0x40
 800b0fc:	d005      	beq.n	800b10a <USBD_StdItfReq+0x26>
 800b0fe:	2b40      	cmp	r3, #64	; 0x40
 800b100:	d82e      	bhi.n	800b160 <USBD_StdItfReq+0x7c>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <USBD_StdItfReq+0x26>
 800b106:	2b20      	cmp	r3, #32
 800b108:	d12a      	bne.n	800b160 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b110:	3b01      	subs	r3, #1
 800b112:	2b02      	cmp	r3, #2
 800b114:	d81d      	bhi.n	800b152 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	889b      	ldrh	r3, [r3, #4]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d813      	bhi.n	800b148 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	4798      	blx	r3
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	88db      	ldrh	r3, [r3, #6]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d110      	bne.n	800b15c <USBD_StdItfReq+0x78>
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10d      	bne.n	800b15c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fd58 	bl	800bbf6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b146:	e009      	b.n	800b15c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fc8a 	bl	800ba64 <USBD_CtlError>
          break;
 800b150:	e004      	b.n	800b15c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fc85 	bl	800ba64 <USBD_CtlError>
          break;
 800b15a:	e000      	b.n	800b15e <USBD_StdItfReq+0x7a>
          break;
 800b15c:	bf00      	nop
      }
      break;
 800b15e:	e004      	b.n	800b16a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fc7e 	bl	800ba64 <USBD_CtlError>
      break;
 800b168:	bf00      	nop
  }

  return USBD_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	889b      	ldrh	r3, [r3, #4]
 800b186:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b190:	2b40      	cmp	r3, #64	; 0x40
 800b192:	d007      	beq.n	800b1a4 <USBD_StdEPReq+0x30>
 800b194:	2b40      	cmp	r3, #64	; 0x40
 800b196:	f200 8146 	bhi.w	800b426 <USBD_StdEPReq+0x2b2>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <USBD_StdEPReq+0x40>
 800b19e:	2b20      	cmp	r3, #32
 800b1a0:	f040 8141 	bne.w	800b426 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	4798      	blx	r3
      break;
 800b1b2:	e13d      	b.n	800b430 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d10a      	bne.n	800b1d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	e12d      	b.n	800b432 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	785b      	ldrb	r3, [r3, #1]
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d007      	beq.n	800b1ee <USBD_StdEPReq+0x7a>
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	f300 811b 	bgt.w	800b41a <USBD_StdEPReq+0x2a6>
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d072      	beq.n	800b2ce <USBD_StdEPReq+0x15a>
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d03a      	beq.n	800b262 <USBD_StdEPReq+0xee>
 800b1ec:	e115      	b.n	800b41a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d002      	beq.n	800b1fe <USBD_StdEPReq+0x8a>
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d015      	beq.n	800b228 <USBD_StdEPReq+0xb4>
 800b1fc:	e02b      	b.n	800b256 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00c      	beq.n	800b21e <USBD_StdEPReq+0xaa>
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b80      	cmp	r3, #128	; 0x80
 800b208:	d009      	beq.n	800b21e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 f8b8 	bl	800c384 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b214:	2180      	movs	r1, #128	; 0x80
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 f8b4 	bl	800c384 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b21c:	e020      	b.n	800b260 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fc1f 	bl	800ba64 <USBD_CtlError>
              break;
 800b226:	e01b      	b.n	800b260 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	885b      	ldrh	r3, [r3, #2]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10e      	bne.n	800b24e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b230:	7bbb      	ldrb	r3, [r7, #14]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00b      	beq.n	800b24e <USBD_StdEPReq+0xda>
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	2b80      	cmp	r3, #128	; 0x80
 800b23a:	d008      	beq.n	800b24e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	88db      	ldrh	r3, [r3, #6]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d104      	bne.n	800b24e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 f89b 	bl	800c384 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fcd1 	bl	800bbf6 <USBD_CtlSendStatus>

              break;
 800b254:	e004      	b.n	800b260 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fc03 	bl	800ba64 <USBD_CtlError>
              break;
 800b25e:	bf00      	nop
          }
          break;
 800b260:	e0e0      	b.n	800b424 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d002      	beq.n	800b272 <USBD_StdEPReq+0xfe>
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d015      	beq.n	800b29c <USBD_StdEPReq+0x128>
 800b270:	e026      	b.n	800b2c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00c      	beq.n	800b292 <USBD_StdEPReq+0x11e>
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	2b80      	cmp	r3, #128	; 0x80
 800b27c:	d009      	beq.n	800b292 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f001 f87e 	bl	800c384 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b288:	2180      	movs	r1, #128	; 0x80
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f001 f87a 	bl	800c384 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b290:	e01c      	b.n	800b2cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fbe5 	bl	800ba64 <USBD_CtlError>
              break;
 800b29a:	e017      	b.n	800b2cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	885b      	ldrh	r3, [r3, #2]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d112      	bne.n	800b2ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2a4:	7bbb      	ldrb	r3, [r7, #14]
 800b2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 f885 	bl	800c3c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fc9c 	bl	800bbf6 <USBD_CtlSendStatus>
              }
              break;
 800b2be:	e004      	b.n	800b2ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fbce 	bl	800ba64 <USBD_CtlError>
              break;
 800b2c8:	e000      	b.n	800b2cc <USBD_StdEPReq+0x158>
              break;
 800b2ca:	bf00      	nop
          }
          break;
 800b2cc:	e0aa      	b.n	800b424 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d002      	beq.n	800b2de <USBD_StdEPReq+0x16a>
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d032      	beq.n	800b342 <USBD_StdEPReq+0x1ce>
 800b2dc:	e097      	b.n	800b40e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2de:	7bbb      	ldrb	r3, [r7, #14]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <USBD_StdEPReq+0x180>
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b80      	cmp	r3, #128	; 0x80
 800b2e8:	d004      	beq.n	800b2f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fbb9 	bl	800ba64 <USBD_CtlError>
                break;
 800b2f2:	e091      	b.n	800b418 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	da0b      	bge.n	800b314 <USBD_StdEPReq+0x1a0>
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	3310      	adds	r3, #16
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	4413      	add	r3, r2
 800b310:	3304      	adds	r3, #4
 800b312:	e00b      	b.n	800b32c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	4413      	add	r3, r2
 800b32a:	3304      	adds	r3, #4
 800b32c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2202      	movs	r2, #2
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fbfd 	bl	800bb3a <USBD_CtlSendData>
              break;
 800b340:	e06a      	b.n	800b418 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b346:	2b00      	cmp	r3, #0
 800b348:	da11      	bge.n	800b36e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	f003 020f 	and.w	r2, r3, #15
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	3318      	adds	r3, #24
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d117      	bne.n	800b394 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fb7c 	bl	800ba64 <USBD_CtlError>
                  break;
 800b36c:	e054      	b.n	800b418 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	f003 020f 	and.w	r2, r3, #15
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d104      	bne.n	800b394 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b38a:	6839      	ldr	r1, [r7, #0]
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fb69 	bl	800ba64 <USBD_CtlError>
                  break;
 800b392:	e041      	b.n	800b418 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da0b      	bge.n	800b3b4 <USBD_StdEPReq+0x240>
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	3310      	adds	r3, #16
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	e00b      	b.n	800b3cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <USBD_StdEPReq+0x266>
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	2b80      	cmp	r3, #128	; 0x80
 800b3d8:	d103      	bne.n	800b3e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	e00e      	b.n	800b400 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f001 f80a 	bl	800c400 <USBD_LL_IsStallEP>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]
 800b3f8:	e002      	b.n	800b400 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2202      	movs	r2, #2
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fb97 	bl	800bb3a <USBD_CtlSendData>
              break;
 800b40c:	e004      	b.n	800b418 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fb27 	bl	800ba64 <USBD_CtlError>
              break;
 800b416:	bf00      	nop
          }
          break;
 800b418:	e004      	b.n	800b424 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fb21 	bl	800ba64 <USBD_CtlError>
          break;
 800b422:	bf00      	nop
      }
      break;
 800b424:	e004      	b.n	800b430 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fb1b 	bl	800ba64 <USBD_CtlError>
      break;
 800b42e:	bf00      	nop
  }

  return ret;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
	...

0800b43c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	885b      	ldrh	r3, [r3, #2]
 800b456:	0a1b      	lsrs	r3, r3, #8
 800b458:	b29b      	uxth	r3, r3
 800b45a:	3b01      	subs	r3, #1
 800b45c:	2b06      	cmp	r3, #6
 800b45e:	f200 8128 	bhi.w	800b6b2 <USBD_GetDescriptor+0x276>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <USBD_GetDescriptor+0x2c>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	0800b49d 	.word	0x0800b49d
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b6b3 	.word	0x0800b6b3
 800b478:	0800b6b3 	.word	0x0800b6b3
 800b47c:	0800b653 	.word	0x0800b653
 800b480:	0800b67f 	.word	0x0800b67f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	7c12      	ldrb	r2, [r2, #16]
 800b490:	f107 0108 	add.w	r1, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
      break;
 800b49a:	e112      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	7c1b      	ldrb	r3, [r3, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10d      	bne.n	800b4c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ac:	f107 0208 	add.w	r2, r7, #8
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4be:	e100      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	f107 0208 	add.w	r2, r7, #8
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	701a      	strb	r2, [r3, #0]
      break;
 800b4da:	e0f2      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	f200 80ac 	bhi.w	800b640 <USBD_GetDescriptor+0x204>
 800b4e8:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <USBD_GetDescriptor+0xb4>)
 800b4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ee:	bf00      	nop
 800b4f0:	0800b509 	.word	0x0800b509
 800b4f4:	0800b53d 	.word	0x0800b53d
 800b4f8:	0800b571 	.word	0x0800b571
 800b4fc:	0800b5a5 	.word	0x0800b5a5
 800b500:	0800b5d9 	.word	0x0800b5d9
 800b504:	0800b60d 	.word	0x0800b60d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00b      	beq.n	800b52c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	7c12      	ldrb	r2, [r2, #16]
 800b520:	f107 0108 	add.w	r1, r7, #8
 800b524:	4610      	mov	r0, r2
 800b526:	4798      	blx	r3
 800b528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b52a:	e091      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fa98 	bl	800ba64 <USBD_CtlError>
            err++;
 800b534:	7afb      	ldrb	r3, [r7, #11]
 800b536:	3301      	adds	r3, #1
 800b538:	72fb      	strb	r3, [r7, #11]
          break;
 800b53a:	e089      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00b      	beq.n	800b560 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	7c12      	ldrb	r2, [r2, #16]
 800b554:	f107 0108 	add.w	r1, r7, #8
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
 800b55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b55e:	e077      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa7e 	bl	800ba64 <USBD_CtlError>
            err++;
 800b568:	7afb      	ldrb	r3, [r7, #11]
 800b56a:	3301      	adds	r3, #1
 800b56c:	72fb      	strb	r3, [r7, #11]
          break;
 800b56e:	e06f      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00b      	beq.n	800b594 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	7c12      	ldrb	r2, [r2, #16]
 800b588:	f107 0108 	add.w	r1, r7, #8
 800b58c:	4610      	mov	r0, r2
 800b58e:	4798      	blx	r3
 800b590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b592:	e05d      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fa64 	bl	800ba64 <USBD_CtlError>
            err++;
 800b59c:	7afb      	ldrb	r3, [r7, #11]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5a2:	e055      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00b      	beq.n	800b5c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	7c12      	ldrb	r2, [r2, #16]
 800b5bc:	f107 0108 	add.w	r1, r7, #8
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4798      	blx	r3
 800b5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c6:	e043      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fa4a 	bl	800ba64 <USBD_CtlError>
            err++;
 800b5d0:	7afb      	ldrb	r3, [r7, #11]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5d6:	e03b      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	7c12      	ldrb	r2, [r2, #16]
 800b5f0:	f107 0108 	add.w	r1, r7, #8
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	4798      	blx	r3
 800b5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5fa:	e029      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa30 	bl	800ba64 <USBD_CtlError>
            err++;
 800b604:	7afb      	ldrb	r3, [r7, #11]
 800b606:	3301      	adds	r3, #1
 800b608:	72fb      	strb	r3, [r7, #11]
          break;
 800b60a:	e021      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00b      	beq.n	800b630 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	7c12      	ldrb	r2, [r2, #16]
 800b624:	f107 0108 	add.w	r1, r7, #8
 800b628:	4610      	mov	r0, r2
 800b62a:	4798      	blx	r3
 800b62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b62e:	e00f      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fa16 	bl	800ba64 <USBD_CtlError>
            err++;
 800b638:	7afb      	ldrb	r3, [r7, #11]
 800b63a:	3301      	adds	r3, #1
 800b63c:	72fb      	strb	r3, [r7, #11]
          break;
 800b63e:	e007      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fa0e 	bl	800ba64 <USBD_CtlError>
          err++;
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	3301      	adds	r3, #1
 800b64c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b64e:	e038      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
 800b650:	e037      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	7c1b      	ldrb	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d109      	bne.n	800b66e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b662:	f107 0208 	add.w	r2, r7, #8
 800b666:	4610      	mov	r0, r2
 800b668:	4798      	blx	r3
 800b66a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b66c:	e029      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f9f7 	bl	800ba64 <USBD_CtlError>
        err++;
 800b676:	7afb      	ldrb	r3, [r7, #11]
 800b678:	3301      	adds	r3, #1
 800b67a:	72fb      	strb	r3, [r7, #11]
      break;
 800b67c:	e021      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7c1b      	ldrb	r3, [r3, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10d      	bne.n	800b6a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68e:	f107 0208 	add.w	r2, r7, #8
 800b692:	4610      	mov	r0, r2
 800b694:	4798      	blx	r3
 800b696:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3301      	adds	r3, #1
 800b69c:	2207      	movs	r2, #7
 800b69e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6a0:	e00f      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9dd 	bl	800ba64 <USBD_CtlError>
        err++;
 800b6aa:	7afb      	ldrb	r3, [r7, #11]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b6b0:	e007      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f9d5 	bl	800ba64 <USBD_CtlError>
      err++;
 800b6ba:	7afb      	ldrb	r3, [r7, #11]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c0:	bf00      	nop
  }

  if (err != 0U)
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11c      	bne.n	800b702 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b6c8:	893b      	ldrh	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d011      	beq.n	800b6f2 <USBD_GetDescriptor+0x2b6>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	88db      	ldrh	r3, [r3, #6]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00d      	beq.n	800b6f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	88da      	ldrh	r2, [r3, #6]
 800b6da:	893b      	ldrh	r3, [r7, #8]
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	bf28      	it	cs
 800b6e0:	4613      	movcs	r3, r2
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6e6:	893b      	ldrh	r3, [r7, #8]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fa24 	bl	800bb3a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	88db      	ldrh	r3, [r3, #6]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d104      	bne.n	800b704 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa7b 	bl	800bbf6 <USBD_CtlSendStatus>
 800b700:	e000      	b.n	800b704 <USBD_GetDescriptor+0x2c8>
    return;
 800b702:	bf00      	nop
    }
  }
}
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop

0800b70c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	889b      	ldrh	r3, [r3, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d130      	bne.n	800b780 <USBD_SetAddress+0x74>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	88db      	ldrh	r3, [r3, #6]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d12c      	bne.n	800b780 <USBD_SetAddress+0x74>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	885b      	ldrh	r3, [r3, #2]
 800b72a:	2b7f      	cmp	r3, #127	; 0x7f
 800b72c:	d828      	bhi.n	800b780 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b740:	2b03      	cmp	r3, #3
 800b742:	d104      	bne.n	800b74e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f98c 	bl	800ba64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74c:	e01d      	b.n	800b78a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	7bfa      	ldrb	r2, [r7, #15]
 800b752:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fe7d 	bl	800c45a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fa48 	bl	800bbf6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d004      	beq.n	800b776 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b774:	e009      	b.n	800b78a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b77e:	e004      	b.n	800b78a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f96e 	bl	800ba64 <USBD_CtlError>
  }
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	4b41      	ldr	r3, [pc, #260]	; (800b8ac <USBD_SetConfig+0x118>)
 800b7a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7a8:	4b40      	ldr	r3, [pc, #256]	; (800b8ac <USBD_SetConfig+0x118>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d904      	bls.n	800b7ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f956 	bl	800ba64 <USBD_CtlError>
 800b7b8:	e075      	b.n	800b8a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d002      	beq.n	800b7ca <USBD_SetConfig+0x36>
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d023      	beq.n	800b810 <USBD_SetConfig+0x7c>
 800b7c8:	e062      	b.n	800b890 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b7ca:	4b38      	ldr	r3, [pc, #224]	; (800b8ac <USBD_SetConfig+0x118>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d01a      	beq.n	800b808 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b7d2:	4b36      	ldr	r3, [pc, #216]	; (800b8ac <USBD_SetConfig+0x118>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2203      	movs	r2, #3
 800b7e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b7e4:	4b31      	ldr	r3, [pc, #196]	; (800b8ac <USBD_SetConfig+0x118>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff f9e5 	bl	800abba <USBD_SetClassConfig>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d104      	bne.n	800b800 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f933 	bl	800ba64 <USBD_CtlError>
            return;
 800b7fe:	e052      	b.n	800b8a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f9f8 	bl	800bbf6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b806:	e04e      	b.n	800b8a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f9f4 	bl	800bbf6 <USBD_CtlSendStatus>
        break;
 800b80e:	e04a      	b.n	800b8a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b810:	4b26      	ldr	r3, [pc, #152]	; (800b8ac <USBD_SetConfig+0x118>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d112      	bne.n	800b83e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b820:	4b22      	ldr	r3, [pc, #136]	; (800b8ac <USBD_SetConfig+0x118>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b82a:	4b20      	ldr	r3, [pc, #128]	; (800b8ac <USBD_SetConfig+0x118>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff f9e1 	bl	800abf8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9dd 	bl	800bbf6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b83c:	e033      	b.n	800b8a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b83e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ac <USBD_SetConfig+0x118>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d01d      	beq.n	800b888 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	b2db      	uxtb	r3, r3
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff f9cf 	bl	800abf8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b85a:	4b14      	ldr	r3, [pc, #80]	; (800b8ac <USBD_SetConfig+0x118>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b864:	4b11      	ldr	r3, [pc, #68]	; (800b8ac <USBD_SetConfig+0x118>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff f9a5 	bl	800abba <USBD_SetClassConfig>
 800b870:	4603      	mov	r3, r0
 800b872:	2b02      	cmp	r3, #2
 800b874:	d104      	bne.n	800b880 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f8f3 	bl	800ba64 <USBD_CtlError>
            return;
 800b87e:	e012      	b.n	800b8a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f9b8 	bl	800bbf6 <USBD_CtlSendStatus>
        break;
 800b886:	e00e      	b.n	800b8a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f9b4 	bl	800bbf6 <USBD_CtlSendStatus>
        break;
 800b88e:	e00a      	b.n	800b8a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f8e6 	bl	800ba64 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <USBD_SetConfig+0x118>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7ff f9aa 	bl	800abf8 <USBD_ClrClassConfig>
        break;
 800b8a4:	bf00      	nop
    }
  }
}
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	20000670 	.word	0x20000670

0800b8b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	88db      	ldrh	r3, [r3, #6]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d004      	beq.n	800b8cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f8cd 	bl	800ba64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8ca:	e022      	b.n	800b912 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	dc02      	bgt.n	800b8dc <USBD_GetConfig+0x2c>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dc03      	bgt.n	800b8e2 <USBD_GetConfig+0x32>
 800b8da:	e015      	b.n	800b908 <USBD_GetConfig+0x58>
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d00b      	beq.n	800b8f8 <USBD_GetConfig+0x48>
 800b8e0:	e012      	b.n	800b908 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f922 	bl	800bb3a <USBD_CtlSendData>
        break;
 800b8f6:	e00c      	b.n	800b912 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f91a 	bl	800bb3a <USBD_CtlSendData>
        break;
 800b906:	e004      	b.n	800b912 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f8aa 	bl	800ba64 <USBD_CtlError>
        break;
 800b910:	bf00      	nop
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92a:	3b01      	subs	r3, #1
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d81e      	bhi.n	800b96e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	88db      	ldrh	r3, [r3, #6]
 800b934:	2b02      	cmp	r3, #2
 800b936:	d004      	beq.n	800b942 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f892 	bl	800ba64 <USBD_CtlError>
        break;
 800b940:	e01a      	b.n	800b978 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f043 0202 	orr.w	r2, r3, #2
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	330c      	adds	r3, #12
 800b962:	2202      	movs	r2, #2
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f8e7 	bl	800bb3a <USBD_CtlSendData>
      break;
 800b96c:	e004      	b.n	800b978 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f877 	bl	800ba64 <USBD_CtlError>
      break;
 800b976:	bf00      	nop
  }
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	885b      	ldrh	r3, [r3, #2]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d106      	bne.n	800b9a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f92b 	bl	800bbf6 <USBD_CtlSendStatus>
  }
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d80b      	bhi.n	800b9d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	885b      	ldrh	r3, [r3, #2]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d10c      	bne.n	800b9e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f911 	bl	800bbf6 <USBD_CtlSendStatus>
      }
      break;
 800b9d4:	e004      	b.n	800b9e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f843 	bl	800ba64 <USBD_CtlError>
      break;
 800b9de:	e000      	b.n	800b9e2 <USBD_ClrFeature+0x3a>
      break;
 800b9e0:	bf00      	nop
  }
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	785a      	ldrb	r2, [r3, #1]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	3302      	adds	r3, #2
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	3303      	adds	r3, #3
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	4413      	add	r3, r2
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	3304      	adds	r3, #4
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	3305      	adds	r3, #5
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	021b      	lsls	r3, r3, #8
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	4413      	add	r3, r2
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	3306      	adds	r3, #6
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	3307      	adds	r3, #7
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	4413      	add	r3, r2
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	80da      	strh	r2, [r3, #6]

}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba6e:	2180      	movs	r1, #128	; 0x80
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fc87 	bl	800c384 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba76:	2100      	movs	r1, #0
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fc83 	bl	800c384 <USBD_LL_StallEP>
}
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b086      	sub	sp, #24
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	60b9      	str	r1, [r7, #8]
 800ba90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d032      	beq.n	800bb02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 f834 	bl	800bb0a <USBD_GetLen>
 800baa2:	4603      	mov	r3, r0
 800baa4:	3301      	adds	r3, #1
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	b29a      	uxth	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	75fa      	strb	r2, [r7, #23]
 800bab6:	461a      	mov	r2, r3
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	4413      	add	r3, r2
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	7812      	ldrb	r2, [r2, #0]
 800bac0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	75fa      	strb	r2, [r7, #23]
 800bac8:	461a      	mov	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	4413      	add	r3, r2
 800bace:	2203      	movs	r2, #3
 800bad0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bad2:	e012      	b.n	800bafa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	60fa      	str	r2, [r7, #12]
 800bada:	7dfa      	ldrb	r2, [r7, #23]
 800badc:	1c51      	adds	r1, r2, #1
 800bade:	75f9      	strb	r1, [r7, #23]
 800bae0:	4611      	mov	r1, r2
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	440a      	add	r2, r1
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800baea:	7dfb      	ldrb	r3, [r7, #23]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	75fa      	strb	r2, [r7, #23]
 800baf0:	461a      	mov	r2, r3
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	4413      	add	r3, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e8      	bne.n	800bad4 <USBD_GetString+0x4e>
    }
  }
}
 800bb02:	bf00      	nop
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bb16:	e005      	b.n	800bb24 <USBD_GetLen+0x1a>
  {
    len++;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3301      	adds	r3, #1
 800bb22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f5      	bne.n	800bb18 <USBD_GetLen+0xe>
  }

  return len;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	4613      	mov	r3, r2
 800bb46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb50:	88fa      	ldrh	r2, [r7, #6]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bb56:	88fa      	ldrh	r2, [r7, #6]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb5c:	88fb      	ldrh	r3, [r7, #6]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	2100      	movs	r1, #0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 fc98 	bl	800c498 <USBD_LL_Transmit>

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	2100      	movs	r1, #0
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fc86 	bl	800c498 <USBD_LL_Transmit>

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	4613      	mov	r3, r2
 800bba2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2203      	movs	r2, #3
 800bba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbac:	88fa      	ldrh	r2, [r7, #6]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bbb4:	88fa      	ldrh	r2, [r7, #6]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbbc:	88fb      	ldrh	r3, [r7, #6]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 fc8b 	bl	800c4de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f000 fc79 	bl	800c4de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2204      	movs	r2, #4
 800bc02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc06:	2300      	movs	r3, #0
 800bc08:	2200      	movs	r2, #0
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fc43 	bl	800c498 <USBD_LL_Transmit>

  return USBD_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2205      	movs	r2, #5
 800bc28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	2200      	movs	r2, #0
 800bc30:	2100      	movs	r1, #0
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fc53 	bl	800c4de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4912      	ldr	r1, [pc, #72]	; (800bc94 <MX_USB_DEVICE_Init+0x50>)
 800bc4c:	4812      	ldr	r0, [pc, #72]	; (800bc98 <MX_USB_DEVICE_Init+0x54>)
 800bc4e:	f7fe ff58 	bl	800ab02 <USBD_Init>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc58:	f7f5 fe0c 	bl	8001874 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc5c:	490f      	ldr	r1, [pc, #60]	; (800bc9c <MX_USB_DEVICE_Init+0x58>)
 800bc5e:	480e      	ldr	r0, [pc, #56]	; (800bc98 <MX_USB_DEVICE_Init+0x54>)
 800bc60:	f7fe ff7a 	bl	800ab58 <USBD_RegisterClass>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc6a:	f7f5 fe03 	bl	8001874 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc6e:	490c      	ldr	r1, [pc, #48]	; (800bca0 <MX_USB_DEVICE_Init+0x5c>)
 800bc70:	4809      	ldr	r0, [pc, #36]	; (800bc98 <MX_USB_DEVICE_Init+0x54>)
 800bc72:	f7fe fed7 	bl	800aa24 <USBD_CDC_RegisterInterface>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc7c:	f7f5 fdfa 	bl	8001874 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc80:	4805      	ldr	r0, [pc, #20]	; (800bc98 <MX_USB_DEVICE_Init+0x54>)
 800bc82:	f7fe ff83 	bl	800ab8c <USBD_Start>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc8c:	f7f5 fdf2 	bl	8001874 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc90:	bf00      	nop
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20000130 	.word	0x20000130
 800bc98:	20000674 	.word	0x20000674
 800bc9c:	2000001c 	.word	0x2000001c
 800bca0:	20000120 	.word	0x20000120

0800bca4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bca8:	2200      	movs	r2, #0
 800bcaa:	4905      	ldr	r1, [pc, #20]	; (800bcc0 <CDC_Init_FS+0x1c>)
 800bcac:	4805      	ldr	r0, [pc, #20]	; (800bcc4 <CDC_Init_FS+0x20>)
 800bcae:	f7fe fed0 	bl	800aa52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcb2:	4905      	ldr	r1, [pc, #20]	; (800bcc8 <CDC_Init_FS+0x24>)
 800bcb4:	4803      	ldr	r0, [pc, #12]	; (800bcc4 <CDC_Init_FS+0x20>)
 800bcb6:	f7fe fee6 	bl	800aa86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20000d20 	.word	0x20000d20
 800bcc4:	20000674 	.word	0x20000674
 800bcc8:	20000938 	.word	0x20000938

0800bccc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	6039      	str	r1, [r7, #0]
 800bce6:	71fb      	strb	r3, [r7, #7]
 800bce8:	4613      	mov	r3, r2
 800bcea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	2b23      	cmp	r3, #35	; 0x23
 800bcf0:	d84a      	bhi.n	800bd88 <CDC_Control_FS+0xac>
 800bcf2:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <CDC_Control_FS+0x1c>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd89 	.word	0x0800bd89
 800bcfc:	0800bd89 	.word	0x0800bd89
 800bd00:	0800bd89 	.word	0x0800bd89
 800bd04:	0800bd89 	.word	0x0800bd89
 800bd08:	0800bd89 	.word	0x0800bd89
 800bd0c:	0800bd89 	.word	0x0800bd89
 800bd10:	0800bd89 	.word	0x0800bd89
 800bd14:	0800bd89 	.word	0x0800bd89
 800bd18:	0800bd89 	.word	0x0800bd89
 800bd1c:	0800bd89 	.word	0x0800bd89
 800bd20:	0800bd89 	.word	0x0800bd89
 800bd24:	0800bd89 	.word	0x0800bd89
 800bd28:	0800bd89 	.word	0x0800bd89
 800bd2c:	0800bd89 	.word	0x0800bd89
 800bd30:	0800bd89 	.word	0x0800bd89
 800bd34:	0800bd89 	.word	0x0800bd89
 800bd38:	0800bd89 	.word	0x0800bd89
 800bd3c:	0800bd89 	.word	0x0800bd89
 800bd40:	0800bd89 	.word	0x0800bd89
 800bd44:	0800bd89 	.word	0x0800bd89
 800bd48:	0800bd89 	.word	0x0800bd89
 800bd4c:	0800bd89 	.word	0x0800bd89
 800bd50:	0800bd89 	.word	0x0800bd89
 800bd54:	0800bd89 	.word	0x0800bd89
 800bd58:	0800bd89 	.word	0x0800bd89
 800bd5c:	0800bd89 	.word	0x0800bd89
 800bd60:	0800bd89 	.word	0x0800bd89
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd89 	.word	0x0800bd89
 800bd6c:	0800bd89 	.word	0x0800bd89
 800bd70:	0800bd89 	.word	0x0800bd89
 800bd74:	0800bd89 	.word	0x0800bd89
 800bd78:	0800bd89 	.word	0x0800bd89
 800bd7c:	0800bd89 	.word	0x0800bd89
 800bd80:	0800bd89 	.word	0x0800bd89
 800bd84:	0800bd89 	.word	0x0800bd89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd88:	bf00      	nop
  }

  return (USBD_OK);
 800bd8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (rxFlag == 0)
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <CDC_Receive_FS+0x58>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d111      	bne.n	800bdce <CDC_Receive_FS+0x36>
	  {
	    // Проверяем, что принято не более, чем MAX_SIZE
	    if (*Len <= MAX_SIZE)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a11      	ldr	r2, [pc, #68]	; (800bdf4 <CDC_Receive_FS+0x5c>)
 800bdb0:	7812      	ldrb	r2, [r2, #0]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d80b      	bhi.n	800bdce <CDC_Receive_FS+0x36>
	    {
	    // Проверяем startbyte
	      if((Buf[0] == 0xff) && (Buf[1] == 0xfD))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2bff      	cmp	r3, #255	; 0xff
 800bdbc:	d107      	bne.n	800bdce <CDC_Receive_FS+0x36>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2bfd      	cmp	r3, #253	; 0xfd
 800bdc6:	d102      	bne.n	800bdce <CDC_Receive_FS+0x36>
	     	  rxFlag = 1;
 800bdc8:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <CDC_Receive_FS+0x58>)
 800bdca:	2201      	movs	r2, #1
 800bdcc:	701a      	strb	r2, [r3, #0]
	    }
	  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	4809      	ldr	r0, [pc, #36]	; (800bdf8 <CDC_Receive_FS+0x60>)
 800bdd2:	f7fe fe58 	bl	800aa86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdd6:	4808      	ldr	r0, [pc, #32]	; (800bdf8 <CDC_Receive_FS+0x60>)
 800bdd8:	f7fe fe69 	bl	800aaae <USBD_CDC_ReceivePacket>
  memcpy(bufferRx,Buf,22);
 800bddc:	2216      	movs	r2, #22
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	4806      	ldr	r0, [pc, #24]	; (800bdfc <CDC_Receive_FS+0x64>)
 800bde2:	f000 fc27 	bl	800c634 <memcpy>
  return (USBD_OK);
 800bde6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20001108 	.word	0x20001108
 800bdf4:	20000000 	.word	0x20000000
 800bdf8:	20000674 	.word	0x20000674
 800bdfc:	20000640 	.word	0x20000640

0800be00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2212      	movs	r2, #18
 800be10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be12:	4b03      	ldr	r3, [pc, #12]	; (800be20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be14:	4618      	mov	r0, r3
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	2000014c 	.word	0x2000014c

0800be24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	6039      	str	r1, [r7, #0]
 800be2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2204      	movs	r2, #4
 800be34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be36:	4b03      	ldr	r3, [pc, #12]	; (800be44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	20000160 	.word	0x20000160

0800be48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	4907      	ldr	r1, [pc, #28]	; (800be7c <USBD_FS_ProductStrDescriptor+0x34>)
 800be5e:	4808      	ldr	r0, [pc, #32]	; (800be80 <USBD_FS_ProductStrDescriptor+0x38>)
 800be60:	f7ff fe11 	bl	800ba86 <USBD_GetString>
 800be64:	e004      	b.n	800be70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	4904      	ldr	r1, [pc, #16]	; (800be7c <USBD_FS_ProductStrDescriptor+0x34>)
 800be6a:	4805      	ldr	r0, [pc, #20]	; (800be80 <USBD_FS_ProductStrDescriptor+0x38>)
 800be6c:	f7ff fe0b 	bl	800ba86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	2000110c 	.word	0x2000110c
 800be80:	0800c678 	.word	0x0800c678

0800be84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	4904      	ldr	r1, [pc, #16]	; (800bea4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be94:	4804      	ldr	r0, [pc, #16]	; (800bea8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be96:	f7ff fdf6 	bl	800ba86 <USBD_GetString>
  return USBD_StrDesc;
 800be9a:	4b02      	ldr	r3, [pc, #8]	; (800bea4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	2000110c 	.word	0x2000110c
 800bea8:	0800c690 	.word	0x0800c690

0800beac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	6039      	str	r1, [r7, #0]
 800beb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	221a      	movs	r2, #26
 800bebc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bebe:	f000 f843 	bl	800bf48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bec2:	4b02      	ldr	r3, [pc, #8]	; (800becc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	20000164 	.word	0x20000164

0800bed0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	6039      	str	r1, [r7, #0]
 800beda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	4907      	ldr	r1, [pc, #28]	; (800bf04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bee6:	4808      	ldr	r0, [pc, #32]	; (800bf08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bee8:	f7ff fdcd 	bl	800ba86 <USBD_GetString>
 800beec:	e004      	b.n	800bef8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4904      	ldr	r1, [pc, #16]	; (800bf04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bef2:	4805      	ldr	r0, [pc, #20]	; (800bf08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bef4:	f7ff fdc7 	bl	800ba86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef8:	4b02      	ldr	r3, [pc, #8]	; (800bf04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	2000110c 	.word	0x2000110c
 800bf08:	0800c6a4 	.word	0x0800c6a4

0800bf0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	6039      	str	r1, [r7, #0]
 800bf16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d105      	bne.n	800bf2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	4907      	ldr	r1, [pc, #28]	; (800bf40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf22:	4808      	ldr	r0, [pc, #32]	; (800bf44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf24:	f7ff fdaf 	bl	800ba86 <USBD_GetString>
 800bf28:	e004      	b.n	800bf34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	4904      	ldr	r1, [pc, #16]	; (800bf40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf2e:	4805      	ldr	r0, [pc, #20]	; (800bf44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf30:	f7ff fda9 	bl	800ba86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf34:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	2000110c 	.word	0x2000110c
 800bf44:	0800c6b0 	.word	0x0800c6b0

0800bf48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf4e:	4b0f      	ldr	r3, [pc, #60]	; (800bf8c <Get_SerialNum+0x44>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf54:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <Get_SerialNum+0x48>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	; (800bf94 <Get_SerialNum+0x4c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4413      	add	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf6e:	2208      	movs	r2, #8
 800bf70:	4909      	ldr	r1, [pc, #36]	; (800bf98 <Get_SerialNum+0x50>)
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f814 	bl	800bfa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf78:	2204      	movs	r2, #4
 800bf7a:	4908      	ldr	r1, [pc, #32]	; (800bf9c <Get_SerialNum+0x54>)
 800bf7c:	68b8      	ldr	r0, [r7, #8]
 800bf7e:	f000 f80f 	bl	800bfa0 <IntToUnicode>
  }
}
 800bf82:	bf00      	nop
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	1ffff7ac 	.word	0x1ffff7ac
 800bf90:	1ffff7b0 	.word	0x1ffff7b0
 800bf94:	1ffff7b4 	.word	0x1ffff7b4
 800bf98:	20000166 	.word	0x20000166
 800bf9c:	20000176 	.word	0x20000176

0800bfa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b087      	sub	sp, #28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]
 800bfb6:	e027      	b.n	800c008 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	0f1b      	lsrs	r3, r3, #28
 800bfbc:	2b09      	cmp	r3, #9
 800bfbe:	d80b      	bhi.n	800bfd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	0f1b      	lsrs	r3, r3, #28
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	4619      	mov	r1, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	440b      	add	r3, r1
 800bfd0:	3230      	adds	r2, #48	; 0x30
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	e00a      	b.n	800bfee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	0f1b      	lsrs	r3, r3, #28
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3237      	adds	r2, #55	; 0x37
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	011b      	lsls	r3, r3, #4
 800bff2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	3301      	adds	r3, #1
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c002:	7dfb      	ldrb	r3, [r7, #23]
 800c004:	3301      	adds	r3, #1
 800c006:	75fb      	strb	r3, [r7, #23]
 800c008:	7dfa      	ldrb	r2, [r7, #23]
 800c00a:	79fb      	ldrb	r3, [r7, #7]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d3d3      	bcc.n	800bfb8 <IntToUnicode+0x18>
  }
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	371c      	adds	r7, #28
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
	...

0800c020 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b08a      	sub	sp, #40	; 0x28
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c028:	f107 0314 	add.w	r3, r7, #20
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	605a      	str	r2, [r3, #4]
 800c032:	609a      	str	r2, [r3, #8]
 800c034:	60da      	str	r2, [r3, #12]
 800c036:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a23      	ldr	r2, [pc, #140]	; (800c0cc <HAL_PCD_MspInit+0xac>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d13f      	bne.n	800c0c2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c042:	4b23      	ldr	r3, [pc, #140]	; (800c0d0 <HAL_PCD_MspInit+0xb0>)
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	4a22      	ldr	r2, [pc, #136]	; (800c0d0 <HAL_PCD_MspInit+0xb0>)
 800c048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c04c:	6153      	str	r3, [r2, #20]
 800c04e:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <HAL_PCD_MspInit+0xb0>)
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c05a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c05e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c060:	2302      	movs	r3, #2
 800c062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c064:	2300      	movs	r3, #0
 800c066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c068:	2303      	movs	r3, #3
 800c06a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c06c:	230e      	movs	r3, #14
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c070:	f107 0314 	add.w	r3, r7, #20
 800c074:	4619      	mov	r1, r3
 800c076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c07a:	f7f6 ffdb 	bl	8003034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c07e:	4b14      	ldr	r3, [pc, #80]	; (800c0d0 <HAL_PCD_MspInit+0xb0>)
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	4a13      	ldr	r2, [pc, #76]	; (800c0d0 <HAL_PCD_MspInit+0xb0>)
 800c084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c088:	61d3      	str	r3, [r2, #28]
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <HAL_PCD_MspInit+0xb0>)
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800c096:	4b0f      	ldr	r3, [pc, #60]	; (800c0d4 <HAL_PCD_MspInit+0xb4>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a0e      	ldr	r2, [pc, #56]	; (800c0d4 <HAL_PCD_MspInit+0xb4>)
 800c09c:	f043 0320 	orr.w	r3, r3, #32
 800c0a0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	204a      	movs	r0, #74	; 0x4a
 800c0a8:	f7f6 ff8d 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800c0ac:	204a      	movs	r0, #74	; 0x4a
 800c0ae:	f7f6 ffa6 	bl	8002ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	204b      	movs	r0, #75	; 0x4b
 800c0b8:	f7f6 ff85 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c0bc:	204b      	movs	r0, #75	; 0x4b
 800c0be:	f7f6 ff9e 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c0c2:	bf00      	nop
 800c0c4:	3728      	adds	r7, #40	; 0x28
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	40005c00 	.word	0x40005c00
 800c0d0:	40021000 	.word	0x40021000
 800c0d4:	40010000 	.word	0x40010000

0800c0d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4610      	mov	r0, r2
 800c0f0:	f7fe fd95 	bl	800ac1e <USBD_LL_SetupStage>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c10e:	78fa      	ldrb	r2, [r7, #3]
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	440b      	add	r3, r1
 800c11c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	78fb      	ldrb	r3, [r7, #3]
 800c124:	4619      	mov	r1, r3
 800c126:	f7fe fdc7 	bl	800acb8 <USBD_LL_DataOutStage>
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c144:	78fa      	ldrb	r2, [r7, #3]
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	4613      	mov	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	440b      	add	r3, r1
 800c152:	333c      	adds	r3, #60	; 0x3c
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	78fb      	ldrb	r3, [r7, #3]
 800c158:	4619      	mov	r1, r3
 800c15a:	f7fe fe1e 	bl	800ad9a <USBD_LL_DataInStage>
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b082      	sub	sp, #8
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe ff31 	bl	800afdc <USBD_LL_SOF>
}
 800c17a:	bf00      	nop
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d001      	beq.n	800c19a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c196:	f7f5 fb6d 	bl	8001874 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1a0:	7bfa      	ldrb	r2, [r7, #15]
 800c1a2:	4611      	mov	r1, r2
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fe fede 	bl	800af66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe fe97 	bl	800aee4 <USBD_LL_Reset>
}
 800c1b6:	bf00      	nop
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fe fed9 	bl	800af86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1dc:	4b04      	ldr	r3, [pc, #16]	; (800c1f0 <HAL_PCD_SuspendCallback+0x30>)
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	4a03      	ldr	r2, [pc, #12]	; (800c1f0 <HAL_PCD_SuspendCallback+0x30>)
 800c1e2:	f043 0306 	orr.w	r3, r3, #6
 800c1e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1e8:	bf00      	nop
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	e000ed00 	.word	0xe000ed00

0800c1f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fed4 	bl	800afb0 <USBD_LL_Resume>
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c218:	4a28      	ldr	r2, [pc, #160]	; (800c2bc <USBD_LL_Init+0xac>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a26      	ldr	r2, [pc, #152]	; (800c2bc <USBD_LL_Init+0xac>)
 800c224:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c228:	4b24      	ldr	r3, [pc, #144]	; (800c2bc <USBD_LL_Init+0xac>)
 800c22a:	4a25      	ldr	r2, [pc, #148]	; (800c2c0 <USBD_LL_Init+0xb0>)
 800c22c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c22e:	4b23      	ldr	r3, [pc, #140]	; (800c2bc <USBD_LL_Init+0xac>)
 800c230:	2208      	movs	r2, #8
 800c232:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c234:	4b21      	ldr	r3, [pc, #132]	; (800c2bc <USBD_LL_Init+0xac>)
 800c236:	2202      	movs	r2, #2
 800c238:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c23a:	4b20      	ldr	r3, [pc, #128]	; (800c2bc <USBD_LL_Init+0xac>)
 800c23c:	2202      	movs	r2, #2
 800c23e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c240:	4b1e      	ldr	r3, [pc, #120]	; (800c2bc <USBD_LL_Init+0xac>)
 800c242:	2200      	movs	r2, #0
 800c244:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c246:	4b1d      	ldr	r3, [pc, #116]	; (800c2bc <USBD_LL_Init+0xac>)
 800c248:	2200      	movs	r2, #0
 800c24a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c24c:	481b      	ldr	r0, [pc, #108]	; (800c2bc <USBD_LL_Init+0xac>)
 800c24e:	f7f7 f9a9 	bl	80035a4 <HAL_PCD_Init>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d001      	beq.n	800c25c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c258:	f7f5 fb0c 	bl	8001874 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c262:	2318      	movs	r3, #24
 800c264:	2200      	movs	r2, #0
 800c266:	2100      	movs	r1, #0
 800c268:	f7f8 fe44 	bl	8004ef4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c272:	2358      	movs	r3, #88	; 0x58
 800c274:	2200      	movs	r2, #0
 800c276:	2180      	movs	r1, #128	; 0x80
 800c278:	f7f8 fe3c 	bl	8004ef4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c282:	23c0      	movs	r3, #192	; 0xc0
 800c284:	2200      	movs	r2, #0
 800c286:	2181      	movs	r1, #129	; 0x81
 800c288:	f7f8 fe34 	bl	8004ef4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c292:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c296:	2200      	movs	r2, #0
 800c298:	2101      	movs	r1, #1
 800c29a:	f7f8 fe2b 	bl	8004ef4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2182      	movs	r1, #130	; 0x82
 800c2ac:	f7f8 fe22 	bl	8004ef4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	2000130c 	.word	0x2000130c
 800c2c0:	40005c00 	.word	0x40005c00

0800c2c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f7 fa40 	bl	8003760 <HAL_PCD_Start>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 f954 	bl	800c594 <USBD_Get_USB_Status>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	461a      	mov	r2, r3
 800c308:	4603      	mov	r3, r0
 800c30a:	70fb      	strb	r3, [r7, #3]
 800c30c:	460b      	mov	r3, r1
 800c30e:	70bb      	strb	r3, [r7, #2]
 800c310:	4613      	mov	r3, r2
 800c312:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c322:	78bb      	ldrb	r3, [r7, #2]
 800c324:	883a      	ldrh	r2, [r7, #0]
 800c326:	78f9      	ldrb	r1, [r7, #3]
 800c328:	f7f7 fb5c 	bl	80039e4 <HAL_PCD_EP_Open>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f92e 	bl	800c594 <USBD_Get_USB_Status>
 800c338:	4603      	mov	r3, r0
 800c33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	460b      	mov	r3, r1
 800c350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c360:	78fa      	ldrb	r2, [r7, #3]
 800c362:	4611      	mov	r1, r2
 800c364:	4618      	mov	r0, r3
 800c366:	f7f7 fba3 	bl	8003ab0 <HAL_PCD_EP_Close>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	4618      	mov	r0, r3
 800c372:	f000 f90f 	bl	800c594 <USBD_Get_USB_Status>
 800c376:	4603      	mov	r3, r0
 800c378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c37a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c39e:	78fa      	ldrb	r2, [r7, #3]
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7f7 fc64 	bl	8003c70 <HAL_PCD_EP_SetStall>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f8f0 	bl	800c594 <USBD_Get_USB_Status>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3dc:	78fa      	ldrb	r2, [r7, #3]
 800c3de:	4611      	mov	r1, r2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f7 fc97 	bl	8003d14 <HAL_PCD_EP_ClrStall>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 f8d1 	bl	800c594 <USBD_Get_USB_Status>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c412:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	da0c      	bge.n	800c436 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c422:	68f9      	ldr	r1, [r7, #12]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	3302      	adds	r3, #2
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	e00b      	b.n	800c44e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c436:	78fb      	ldrb	r3, [r7, #3]
 800c438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c43c:	68f9      	ldr	r1, [r7, #12]
 800c43e:	4613      	mov	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	00db      	lsls	r3, r3, #3
 800c446:	440b      	add	r3, r1
 800c448:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c44c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	460b      	mov	r3, r1
 800c464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c466:	2300      	movs	r3, #0
 800c468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c474:	78fa      	ldrb	r2, [r7, #3]
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f7f7 fa8e 	bl	800399a <HAL_PCD_SetAddress>
 800c47e:	4603      	mov	r3, r0
 800c480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c482:	7bfb      	ldrb	r3, [r7, #15]
 800c484:	4618      	mov	r0, r3
 800c486:	f000 f885 	bl	800c594 <USBD_Get_USB_Status>
 800c48a:	4603      	mov	r3, r0
 800c48c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c48e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	607a      	str	r2, [r7, #4]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	72fb      	strb	r3, [r7, #11]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4ba:	893b      	ldrh	r3, [r7, #8]
 800c4bc:	7af9      	ldrb	r1, [r7, #11]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	f7f7 fb93 	bl	8003bea <HAL_PCD_EP_Transmit>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 f862 	bl	800c594 <USBD_Get_USB_Status>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b086      	sub	sp, #24
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	72fb      	strb	r3, [r7, #11]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c500:	893b      	ldrh	r3, [r7, #8]
 800c502:	7af9      	ldrb	r1, [r7, #11]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	f7f7 fb1b 	bl	8003b40 <HAL_PCD_EP_Receive>
 800c50a:	4603      	mov	r3, r0
 800c50c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	4618      	mov	r0, r3
 800c512:	f000 f83f 	bl	800c594 <USBD_Get_USB_Status>
 800c516:	4603      	mov	r3, r0
 800c518:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c51a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c536:	78fa      	ldrb	r2, [r7, #3]
 800c538:	4611      	mov	r1, r2
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f7 fb3d 	bl	8003bba <HAL_PCD_EP_GetRxCount>
 800c540:	4603      	mov	r3, r0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c554:	4b03      	ldr	r3, [pc, #12]	; (800c564 <USBD_static_malloc+0x18>)
}
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	200015f8 	.word	0x200015f8

0800c568 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]

}
 800c570:	bf00      	nop
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5a2:	79fb      	ldrb	r3, [r7, #7]
 800c5a4:	2b03      	cmp	r3, #3
 800c5a6:	d817      	bhi.n	800c5d8 <USBD_Get_USB_Status+0x44>
 800c5a8:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <USBD_Get_USB_Status+0x1c>)
 800c5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ae:	bf00      	nop
 800c5b0:	0800c5c1 	.word	0x0800c5c1
 800c5b4:	0800c5c7 	.word	0x0800c5c7
 800c5b8:	0800c5cd 	.word	0x0800c5cd
 800c5bc:	0800c5d3 	.word	0x0800c5d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c4:	e00b      	b.n	800c5de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ca:	e008      	b.n	800c5de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d0:	e005      	b.n	800c5de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d6:	e002      	b.n	800c5de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	73fb      	strb	r3, [r7, #15]
    break;
 800c5dc:	bf00      	nop
  }
  return usb_status;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <__libc_init_array>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	4d0d      	ldr	r5, [pc, #52]	; (800c624 <__libc_init_array+0x38>)
 800c5f0:	4c0d      	ldr	r4, [pc, #52]	; (800c628 <__libc_init_array+0x3c>)
 800c5f2:	1b64      	subs	r4, r4, r5
 800c5f4:	10a4      	asrs	r4, r4, #2
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	42a6      	cmp	r6, r4
 800c5fa:	d109      	bne.n	800c610 <__libc_init_array+0x24>
 800c5fc:	4d0b      	ldr	r5, [pc, #44]	; (800c62c <__libc_init_array+0x40>)
 800c5fe:	4c0c      	ldr	r4, [pc, #48]	; (800c630 <__libc_init_array+0x44>)
 800c600:	f000 f82e 	bl	800c660 <_init>
 800c604:	1b64      	subs	r4, r4, r5
 800c606:	10a4      	asrs	r4, r4, #2
 800c608:	2600      	movs	r6, #0
 800c60a:	42a6      	cmp	r6, r4
 800c60c:	d105      	bne.n	800c61a <__libc_init_array+0x2e>
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	f855 3b04 	ldr.w	r3, [r5], #4
 800c614:	4798      	blx	r3
 800c616:	3601      	adds	r6, #1
 800c618:	e7ee      	b.n	800c5f8 <__libc_init_array+0xc>
 800c61a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c61e:	4798      	blx	r3
 800c620:	3601      	adds	r6, #1
 800c622:	e7f2      	b.n	800c60a <__libc_init_array+0x1e>
 800c624:	0800c6f8 	.word	0x0800c6f8
 800c628:	0800c6f8 	.word	0x0800c6f8
 800c62c:	0800c6f8 	.word	0x0800c6f8
 800c630:	0800c6fc 	.word	0x0800c6fc

0800c634 <memcpy>:
 800c634:	440a      	add	r2, r1
 800c636:	4291      	cmp	r1, r2
 800c638:	f100 33ff 	add.w	r3, r0, #4294967295
 800c63c:	d100      	bne.n	800c640 <memcpy+0xc>
 800c63e:	4770      	bx	lr
 800c640:	b510      	push	{r4, lr}
 800c642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c64a:	4291      	cmp	r1, r2
 800c64c:	d1f9      	bne.n	800c642 <memcpy+0xe>
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <memset>:
 800c650:	4402      	add	r2, r0
 800c652:	4603      	mov	r3, r0
 800c654:	4293      	cmp	r3, r2
 800c656:	d100      	bne.n	800c65a <memset+0xa>
 800c658:	4770      	bx	lr
 800c65a:	f803 1b01 	strb.w	r1, [r3], #1
 800c65e:	e7f9      	b.n	800c654 <memset+0x4>

0800c660 <_init>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr

0800c66c <_fini>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr
